{"version":3,"sources":["ng://ngx-modelstage/src/ps-geometry.ts","node_modules/tslib/tslib.es6.js","ng://ngx-modelstage/src/mx-common.ts","ng://ngx-modelstage/src/mx-appstate.ts","ng://ngx-modelstage/src/modelstage.ts","ng://ngx-modelstage/src/modelstage-sample-web.ts"],"names":["psgeometry","Matrix4","elements","this","FromTranslation","x","y","z","result","FromScaling","FromRotationX","angle","cosA","Math","cos","sinA","sin","FromRotationY","FromRotationZ","FromRotation","pitch","yaw","roll","transpose","prototype","e","colIdx","rowIdx","idx","row","Vec4","col","equals","m","l","r","multiply","w","map","toRightTriangular","Matrix","determinant","isSingular","inverse","augmentedMatrix","divisor","altrow","multiplier","Identity","Matrix3","Vec3","rows","cols","slice","j","asVec3","asVec4","v","assignPoint","assignVec","add","vec","sub","dot","cross","s","applyQuaternion","q","qx","qy","qz","qw","px","py","pz","pw","norm","sqrt","normalize","squaredDist","Zero","One","Quaternion","setFromAxisAngle","axis","halfAngle","AABB3D","minX","Infinity","maxX","minY","maxY","minZ","maxZ","addPoint","min","max","addVector","addAABB","box","clear","center","extents","contains","transform","matrix","minV","maxV","intersectsRay","ray","v0","p0","intX0","p1","intersectRayWithPlane","intX1","intY0","intY1","intZ0","intZ1","currDist","Point3D","Line3D","n","u","D","sI","intersectTriangle","p2","res","v1","Camera","position","direction","up","_position","_direction","_up","changed","currentViewMatrix","setPosition","setDirection","setCenter","getPosition","getProjectionMatrix","width","height","makePerspective","getViewMatrix","makeLookAt","fovy","aspect","znear","zfar","ymax","tan","PI","ymin","xmin","xmax","makeFrustum","left","right","bottom","top","makeOrtho","eye","Vec2","insideTri","a","b","c","p","Polygon2D","vertices","Object","defineProperty","addVertex","push","addToAABB","forEach","length","getArea","i","snip","indices","Epsilon","triangulate","nv","count","t","AABB2D","Spherical","azimuth","polar","FromCartesian","asin","atan2","FromCartesianVector","ToCartesian","toCartesian","extendStatics","d","setPrototypeOf","__proto__","Array","hasOwnProperty","__extends","__","constructor","create","__assign","assign","arguments","call","apply","__read","o","Symbol","iterator","ar","next","done","value","error","modelstageweb","uuidv4","crypto","window","msCrypto","replace","getRandomValues","Uint8Array","toString","ToolsWebGL","stage","createShader","shaderType","shaderSource","shader","gl","compileShader","console","log","getShaderInfoLog","BlockStreamReaderStates","BlockStreamBlockDescriptor","blockType","majorVersion","minorVersion","flags","payloadBytes","BlockStreamReader","buffer","arrayBuffer","byteArray","currentPos","blockEnd","isComplete","fatalError","state","FILE_HEADER_EXPECTED","assureFileHeader","currentBlockDescriptor","remainingBytesInBlock","assureRemainingBytesInBlock","readBytes","tryReadInt16","lambda","tryReadFloat","buf","ArrayBuffer","view","DataView","setUint8","getFloat32","tryReadInt","tryReadInt64","tryReadString","_this","stringLength","String","fromCharCode","readString","readMatrix4","this_1","val","internalReadString","startPos","internalReadInt","byteLength","BLOCK_DESCRIPTOR_EXPECTED","enterBlock","success","descriptor","blockTypeLength","BlockType","MajorVersion","MinorVersion","Flags","PayloadBytes","PAYLOAD_EXPECTED","leaveBlock","ShaderInstance","shaderKey","references","figureID","getReference","key","construct","reader","addReference","MeshShaderInstance","_super","SIZE_OF_FLOAT","tslib_1.__extends","id","bufferID","priority","getStride","ShaderKey","TexturedMeshShaderInstance","textureID","Mesh3DLib","objectNamePrefix","setRootNode","rootNode","getNodeFromPath","path","Name","getChildNodeFromPath","substr","AssetFactoryWebGL","lastPercentage","createFigure","assetStore","currentFigure","FigureWebGL","currentSceneMesh3DLib","nodePath","Node","addFigure","createMesh","currentShaderInstance","ShaderInstanceFromReader","addShaderInstance","createMeshBuffer","bufferAsset","BufferAssetWebGL","currentID","BufferID","counter","getBufferAsset","addBufferAsset","initialize","createMeshIndicesBuffer","createTexture","deferreds","textureName","pixelDataSize","imageData","imageType","lastIndexOf","toLowerCase","blob","Blob","type","url","URL","createObjectURL","image_1","Image","deferred_1","$","Deferred","onload","AssetStore","addTextureAsset","TextureAssetWebGL","resolve","onerror","reject","src","createOctree","setIntersector","Octree","CreateFromBlockStream","createScene","createRootNode","NodeAsset","FromBlockStream","addRootNode","processBlock","loadFromArrayBuffer","JSON","stringify","when","getFromUrl","deferred","req","XMLHttpRequest","open","responseType","event","addEventListener","oEvent","lengthComputable","percentComplete","loaded","total","floor","notify","round","send","Intersector","BoundingBoxIntersector","boundingBox","getBoundingBox","x0","y0","z0","x1","y1","z1","octree","shaderInstances","node","intersector","AbsoluteTransformation","shaderInstance","render","context","Stage","FigureID","shaderProgram","getShaderProgram","ShaderProgram","NodeTransform","intersectsBoundingBox","at","intersectionPoint","AnimationTransformation","mesh3DLib","childNodes","name","absoluteTransformation","localTransformation","child","substring","parentNode","calculateAbsoluteTransformation","readChildNodes","readAnimationTransformations","childNameCount","addChildNode","numAnimationTransformations","addAnimationTransformation","animationTransformation","isElementBuffer","bufferSize","CurrentBlockDescriptor","bufferData","webGLBuffer","createBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","ARRAY_BUFFER","bind","bindInterleaved","attributeLocation","size","stride","offset","enableVertexAttribArray","vertexAttribPointer","FLOAT","OpaqueMeshBuilder","addTri","x2","y2","z2","g","doubleSided","addQuad","x3","y3","z3","addStroke","dir","radius","front","vertBuf","Float32Array","set","vertBufferAsset","BufferSize","indBuf","Int32Array","indBufferAsset","undefined","figure","TransparentMeshBuilder","twoSided","TexturedMeshBuilder","u0","u1","u2","v2","u3","v3","image","WebGLTexture","texture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","program","attributeName","activeTexture","TEXTURE0","uniform1i","getUniformLocation","Program","unbind","AssetStoreWebGL","figures","rootNodeAssets","bufferAssets","textureAssets","getFigure","bufferAssetID","textureAssetID","textureAsset","getTextureAsset","getRootNode","SceneItemFilterWebGL","GenericSceneItemFilterWebGL","passes","sceneItem","Phase","SceneItemWebGL","scene","sceneItemID","isVisible","testIntersection","childrenVisible","testChildrenIntersection","children","childrenByKey","data","filter","addChild","addedToSceneGraph","getChild","removeChild","insertChild","index","splice","beginRender","endRender","renderChildren","parentSceneItem","parent","isIntersectionCandidate","addIntersectionCandidates","candidates","IntersectionCandidate","ActorWebGL","actorID","RenderState","transformedRay","inverseModelTransform","figureIdx","lastModelTransform","pushState","modelTransform","ModelTransform","popState","compare","intersectionCandidate","entries","evaluate","entry","get","defaultValue","tryGet","SceneWebGL","isInitialized","sceneHierarchy","dirty","setDirty","isDirty","SceneCategory","getSceneCategory","addSceneItem","makeVisible","getSceneItem","removeSceneItem","insertSceneItem","getIntersectionCandidates","sort","beginFrame","update","endFrame","projectionMatrix","viewMatrix","createViewMatrix","createPerspectiveMatrix","createOrthographicMatrix","near","far","X","Y","A","B","C","ShadowCameraWebGL","shadowMapWidth","shadowMapHeight","resize","shadowFramebuffer","createFramebuffer","shadowDepthTexture","renderBuffer","createRenderbuffer","shadowTexture","bindFramebuffer","FRAMEBUFFER","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","updateShadowArea","bbox","pos","lookAt","viewport","clearColor","clearDepth","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","CULL_FACE","frontFace","CCW","cullFace","BACK","depthFunc","GEQUAL","CameraWebGL","clientWidth","clientHeight","realToCSSPixels","devicePixelRatio","canvas","displayWidth","displayHeight","inverseProjectionMatrix","currentCameraPos","inverseViewMatrix","LEQUAL","getViewRay","clientX","clientY","cursor","forward","ShaderProgramWebGL","applyState","internalRender","getAttribLocation","attribName","useProgram","vertexShader","Tools","VERTEX_SHADER","getVertexShaderSrc","fragmentShader","FRAGMENT_SHADER","getFragmentShaderSrc","createProgram","attachShader","linkProgram","detachShader","getProgramInfoLog","OpaqueMeshShaderProgramWebGL","bufferKey","triangleCount","drawElements","TRIANGLES","UNSIGNED_INT","TexturedMeshShaderProgramVariants","TransparentMeshShaderProgramWebGL","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","depthMask","disable","TexturedMeshShaderProgramWebGL","variant","Diffuse","textureKey","Matcap","ShadowTexturedMeshShaderProgramWebGL","MatCapShaderProgramWebGL","color","State","uColorLoc","uniform4fv","RenderStateStack","stack","Parent","Top","CurrentModelTransform","pop","RenderContextWebGL","sceneCategory","stateStack","nodeTransform","phase","camera","ConnectionState","StageWebGL","canvasElementId","phaseSpecificShaderPrograms","shaderPrograms","tools","assetFactory","document","getElementById","getContext","getExtension","alert","shadowCamera","resultingModelTransformation","mMatrixLoc","uniformMatrix4fv","vMatrixLoc","ViewMatrix","pMatrixLoc","ProjectionMatrix","registerShaderProgram","shaderProgramKey","registerPhaseSpecificShaderProgram","phaseKey","parentElement","offsetWidth","offsetHeight","ServerConnection","Ready","Connected","onMessage","callback","handleMessage","onConnected","handleConnected","SignalRServerConnection","connection","HubConnectionBuilder","withUrl","configureLogging","LogLevel","Trace","build","on","msg","MessageEvent","connect","Connecting","start","then","Event","catch","Error","disconnect","stop","invoke","WebSocketServerConnection","uri","location","host","websocket","WebSocket","binaryType","onopen","onclose","onmessage","close","Tool","enter","interfaceController","leave","handleKeyUp","handleMouseMove","handleMouseDown","handleMouseUp","handleDrag","startX","startY","dX","dY","handleMouseWheel","handleClick","InterfaceController","leftButton","leftButtonDown","NaN","lastX","lastY","onMove","onDrag","onMouseWheel","hasTool","bindEvents","target","mouseWheel","mouseDown","preventDefault","setCapture","mouseMove","mouseUp","keyUp","updateLastPosition","pushTool","tool","CurrentTool","popTool","button","ctrlKey","drag","updatePosition","releaseCapture","CameraController","dragDivisor","rotateDivisor","Canvas","move","updateCamera","shiftKey","getViewDir","deltaY","deltaX","getViewPlaneX","getViewPlaneY","getCameraPos","CommonMessageTypes","AppStateDelta","ServerHandshake","ClientHandshake","ClientConfirmation","AppStateInitialization","AnchorRequest","SharedAnchor","NetworkChannelMessage","messageType","content","FromBuffer","HeaderSize","modelstageappstate","AppStateBase","clusterManagers","localPeerID","getClusterManager","addCluster","cluster","beginTransaction","clusterManagerKey","endTransaction","applyChanges","serializeTransaction","deltaWriter","deserializeTransaction","deltaReader","isAtEnd","clusterID","readClusterID","clusterManager","AppState","GetInstance","Instance","BinaryWriter","flush","writeByte","writeInt16","writeUInt16","writeInt32","writeInt64","writeTimestamp","writeFloat32","setFloat32","byteBuf","Int8Array","writeString","writeCharArray","arrayLength","charCodeAt","writeWideCharArray","writeVec3","writeVec4","BinaryReader","assureRemainingBytes","readByte","readUInt16","readUInt64","readUInt32","readCharArray","readTimestamp","readFloat32","readVec3","readVec4","AppStateDeltaReader","isInitializing","AtEnd","AppStateDeltaWriter","writer","AppStateEntry","transactional","appState","register","reconcile","isTransactional","isLocked","IsLocked","CommonAppStateEntry","changedAt","beginChanging","Date","now","AppStateStringValue","changing","getPreviousValue","previousValue","deserializeDelta","Reader","serializeDelta","Writer","AppStateValue","readValue","writeValue","AppStateBoolValue","AppStateVector4Value","AppStateFloatValue","OperationType","StorageFlags","AppStateOperation","isLocal","AppStateValueOperation","newValue","isNewValueDefined","isPreviousValueDefined","AppStateCollectionOperation","operation","itemIndex","reconciledItemIndex","AppStateCollection","appStateCollectionOperationType","serializeOperationChangedAt","serializePreviousValues","container","operations","addOperation","op","Clear","append","item","Append","insert","beforeIndex","Insert","remove","Remove","Replace","GetItemAt","operationCount","storageFlags","Mask","opType","opChangedAt","prevValue","HasChangedDate","ItemIndex16Bit","HasNewValue","HasPreviousValue","ItemIndex","None","IsNewValueDefined","IsPreviousValueDefined","Operation","ChangedAt","NewValue","PreviousValue","IsLocal","ReconciledItemIndex","AppStateClusterManagerBase","allInstances","addInstance","instance","registerEntries","clusterKey","PeerID","InstanceID","serializeClusterInstanceData","dirtyClusters","GlobalAppStateClusterManager","clusterTypeID","clusterType","onlyInstance","getGlobalCluster","instanceCount","LocalAppStateClusterManager","peerClusters","getLocalCluster","getCluster","peerID","containsCluster","LocalPeerID","AppStateCluster","instanceID","lockCount","entryIdx","registerEntry","dirtyEntries","entryCount","entryKey","lock","unlock","Director","pendingUpdates","pendingMessages","commit","acquirePendingUpdates","updFunc","submitLocalUpdates","HasPayload","IsConnected","Content","applyRemoteUpdates","acquirePendingMessages","receivedMessage","message","synchronizeStateUpdate","func","DirectedSceneWebGL","director","MessageType","modelstage","Timer","animationFrame","requestAnimationFrame","SpaceModel","actor","floorLevel","initializeSquareRoom","transparentMeshBuilder","texturedMeshBuilder","initializeArbitraryRoom","toggle","poly","Vertices","end","updateSpace","spaceIndices","spaceVertices","floorIndices","floorVertices","floorShaderInstance","Figures","Filter","Scene","clearVertices","TheaterWebGL","canvasElementID","timer","processFrame","onVisibilityChange","IsInitialized","hidden","ActorManipulationTool","getSceneObj","objID","sceneObjIdx","sceneObj","SceneAppState","GlobalInstance","SceneObjects","Count","SceneObjectID","updateModelTransform","translationVec","Data","rotationVec","SceneItemID","translation","rotation","updateActorTranslation","updateActorRotation","SelectionTool","updateSelectionMarker","removeSelectionMarker","keyCode","selectedActor","_a","SelectionObjectID","box_1","fig","bottomCenterPoint","selectionMarker","_b","meshBuilder","figureBoundingBox","meshBuilder1","angle0","angle1","inner0","inner1","outer0","outer1","sceneObjTranslation","sceneObjRotation","viewRay","pickedObject","currentIdx","pickedActor","MoveActorTool","RotateActorTool","PlaceActorTool","SceneObject","AssetID","Location","Rotation","Scale","UserNames","Administrator","Arne","Ulrich","Tom","Zacharias","PeerColors","translatedSceneObj","lastZ","fac","abs","rotatedSceneObj","DemoSceneWebGL","spaceActor","spaceModel","AssetFactory","RoomAppState","vert","updatePeerInfo","peerColorIndex","userName","peerInfoID","peerInfoElement","find","text","removePeer","addClass","setTimeout","getColorIndexFromPeerID","parseInt","createPeer","obj","ShaderInstances","colorIndex","spherical","TestIntersection","TestChildrenIntersection","createSceneObject","objectID","assetID","suffix","rot","scale","FloorLevel","MasterView","ClusterTypeID","sc_1","Operations","PeerAppState","headPos","cursorPos","userID","active","providesInitializationData","sc","levelOfs","Note","NotesAppState","Notes","NoteID","NoteType","OwnerID","AzimuthalRotation","MessageChannel","extractPart","sep","indexOf","part","remainder","processMessage","SampleTheaterWebGL","peerAppState","sceneAppState","roomAppState","notesAppState","actorIndex","channels","networkMessage","channelKey","channel","warn","cameraController","draggable","containment","helper","opacity","scroll","droppable","over","ui","attr"],"mappings":"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","sourcesContent":["/// ModelStage Â© 2018 Plansysteme GmbH, Hamburg, Germany. All rights reserved.\r\n\r\nexport module psgeometry {\r\n\r\n    export class Matrix4 {\r\n    elements: number[];\r\n\r\n    static Identity = new Matrix4();\r\n\r\n    static FromTranslation(x: number, y: number, z: number) {\r\n      let result = new Matrix4();\r\n      result.elements[3] = x;\r\n      result.elements[7] = y;\r\n      result.elements[11] = z;\r\n      return result;\r\n    }\r\n\r\n    static FromScaling(x: number, y: number, z: number) {\r\n      let result = new Matrix4();\r\n      result.elements[0] = x;\r\n      result.elements[5] = y;\r\n      result.elements[10] = z;\r\n      return result;\r\n    }\r\n     \r\n    static FromRotationX(angle: number) {\r\n      let cosA = Math.cos(angle);\r\n      let sinA = Math.sin(angle);\r\n      let result = new Matrix4();\r\n      result.elements[5] = cosA;\r\n      result.elements[6] = -sinA;\r\n      result.elements[9] = sinA;\r\n      result.elements[10] = cosA;\r\n      return result;\r\n    }\r\n    \r\n    static FromRotationY(angle: number) {\r\n      let cosA = Math.cos(angle);\r\n      let sinA = Math.sin(angle);\r\n      let result = new Matrix4();\r\n      result.elements[0] = cosA;\r\n      result.elements[2] = sinA;\r\n      result.elements[8] = -sinA;\r\n      result.elements[10] = cosA;\r\n      return result;\r\n    }\r\n        \r\n    static FromRotationZ(angle: number) {\r\n      let cosA = Math.cos(angle);\r\n      let sinA = Math.sin(angle);\r\n      let result = new Matrix4();\r\n      result.elements[0] = cosA;\r\n      result.elements[1] = -sinA;\r\n      result.elements[4] = sinA;\r\n      result.elements[5] = cosA;\r\n      return result;\r\n    }\r\n\r\n    static FromRotation(pitch: number, yaw: number, roll: number) {\r\n      return new Matrix4([\r\n        Math.cos(yaw) * Math.cos(pitch), Math.sin(yaw) * Math.cos(pitch), -Math.sin(pitch), 0,\r\n        Math.cos(yaw) * Math.sin(pitch) * Math.sin(roll) - Math.sin(yaw) * Math.cos(roll), Math.sin(yaw) * Math.sin(pitch) * Math.sin(roll) + Math.cos(yaw) * Math.cos(roll), Math.cos(pitch) * Math.sin(roll), 0,\r\n        Math.cos(yaw) * Math.sin(pitch) * Math.cos(roll) + Math.sin(yaw) * Math.sin(roll), Math.sin(yaw) * Math.sin(pitch) * Math.cos(roll) - Math.cos(yaw) * Math.sin(roll), Math.cos(pitch) * Math.cos(roll), 0,\r\n        0, 0, 0, 1]\r\n      ).transpose();\r\n    }\r\n\r\n    constructor(elements?: number[]) {\r\n      this.elements = elements || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\n    }\r\n\r\n    e(colIdx: number, rowIdx: number): number {\r\n      let idx = colIdx + (rowIdx || 0) * 4;\r\n      return idx >= 0 && idx < 16 ? this.elements[idx] : null;\r\n    };\r\n\r\n    row(idx: number): Vec4 {\r\n      if (idx >= 0 && idx < 4) {\r\n        return new Vec4(this.elements[idx * 4], this.elements[idx * 4 + 1], this.elements[idx * 4 + 2], this.elements[idx * 4 + 3]);\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n\r\n    col(idx: number): Vec4 {\r\n      if (idx <= 0 && idx < 4) {\r\n        return new Vec4(this.elements[idx], this.elements[idx + 4], this.elements[idx + 8], this.elements[idx + 12]);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    equals(m: Matrix4) {\r\n      if (m) {\r\n        let l = this.elements;\r\n        let r = m.elements;\r\n\r\n        return l[0] == r[0] && l[1] == r[1] && l[2] == r[2] && l[3] == r[3] &&\r\n          l[4] == r[4] && l[5] == r[5] && l[6] == r[6] && l[7] == r[7] &&\r\n          l[8] == r[8] && l[9] == r[9] && l[10] == r[10] && l[11] == r[11] &&\r\n          l[12] == r[12] && l[13] == r[13] && l[14] == r[14] && l[15] == r[15];\r\n      } else {\r\n        return false;\r\n      }\r\n\r\n    }\r\n\r\n    multiply(m: Matrix4 | Vec4 | number): Matrix4 | Vec4 {\r\n      if (m instanceof Matrix4) {\r\n        let l = this.elements;\r\n        let r = m.elements;\r\n        return new Matrix4([\r\n          l[0] * r[0] + l[4] * r[1] + l[8] * r[2] + l[12] * r[3],\r\n          l[1] * r[0] + l[5] * r[1] + l[9] * r[2] + l[13] * r[3],\r\n          l[2] * r[0] + l[6] * r[1] + l[10] * r[2] + l[14] * r[3],\r\n          l[3] * r[0] + l[7] * r[1] + l[11] * r[2] + l[15] * r[3],\r\n\r\n          l[0] * r[4] + l[4] * r[5] + l[8] * r[6] + l[12] * r[7],\r\n          l[1] * r[4] + l[5] * r[5] + l[9] * r[6] + l[13] * r[7],\r\n          l[2] * r[4] + l[6] * r[5] + l[10] * r[6] + l[14] * r[7],\r\n          l[3] * r[4] + l[7] * r[5] + l[11] * r[6] + l[15] * r[7],\r\n\r\n          l[0] * r[8] + l[4] * r[9] + l[8] * r[10] + l[12] * r[11],\r\n          l[1] * r[8] + l[5] * r[9] + l[9] * r[10] + l[13] * r[11],\r\n          l[2] * r[8] + l[6] * r[9] + l[10] * r[10] + l[14] * r[11],\r\n          l[3] * r[8] + l[7] * r[9] + l[11] * r[10] + l[15] * r[11],\r\n\r\n          l[0] * r[12] + l[4] * r[13] + l[8] * r[14] + l[12] * r[15],\r\n          l[1] * r[12] + l[5] * r[13] + l[9] * r[14] + l[13] * r[15],\r\n          l[2] * r[12] + l[6] * r[13] + l[10] * r[14] + l[14] * r[15],\r\n          l[3] * r[12] + l[7] * r[13] + l[11] * r[14] + l[15] * r[15]\r\n        ]);\r\n      } else if (m instanceof Vec4) {\r\n        return new Vec4(\r\n          m.x * this.elements[0] + m.y * this.elements[1] + m.z * this.elements[2] + m.w * this.elements[3],\r\n          m.x * this.elements[4] + m.y * this.elements[5] + m.z * this.elements[6] + m.w * this.elements[7],\r\n          m.x * this.elements[8] + m.y * this.elements[9] + m.z * this.elements[10] + m.w * this.elements[11],\r\n          m.x * this.elements[12] + m.y * this.elements[13] + m.z * this.elements[14] + m.w * this.elements[15]);\r\n      } else {\r\n        return new Matrix4(this.elements.map(function (e) { return e * <number>m; }));\r\n      }\r\n    }\r\n\r\n    toRightTriangular(): Matrix4 {\r\n      return new Matrix4(Matrix.toRightTriangular(this.elements, 4, 4));\r\n    }\r\n\r\n    determinant(): number {\r\n      let m = this.toRightTriangular();\r\n      return m.elements[0] * m.elements[5] * m.elements[10] * m.elements[15];\r\n    }\r\n\r\n    isSingular(): boolean {\r\n      return this.determinant() === 0;\r\n    }\r\n\r\n    transpose(): Matrix4 {\r\n      let e = this.elements;\r\n      return new Matrix4([\r\n        e[0], e[4], e[8], e[12],\r\n        e[1], e[5], e[9], e[13],\r\n        e[2], e[6], e[10], e[14],\r\n        e[3], e[7], e[11], e[15]\r\n      ]);\r\n    }\r\n\r\n    inverse(): Matrix4 {\r\n      if (!this.isSingular()) {\r\n        let augmentedMatrix = [\r\n          this.elements[0], this.elements[1], this.elements[2], this.elements[3], 1, 0, 0, 0,\r\n          this.elements[4], this.elements[5], this.elements[6], this.elements[7], 0, 1, 0, 0,\r\n          this.elements[8], this.elements[9], this.elements[10], this.elements[11], 0, 0, 1, 0,\r\n          this.elements[12], this.elements[13], this.elements[14], this.elements[15], 0, 0, 0, 1\r\n        ];\r\n\r\n        let m = Matrix.toRightTriangular(augmentedMatrix, 4, 8);\r\n\r\n        for (let row = 3; row >= 0; row--) {\r\n          let divisor = m[row * 9];\r\n          for (let col = 0; col < 8; col++) {\r\n            m[row * 8 + col] = m[row * 8 + col] / divisor;\r\n          }\r\n\r\n          for (let altrow = row - 1; altrow >= 0; altrow--) {\r\n            let multiplier = m[altrow * 8 + row];\r\n            for (let col = 0; col < 8; col++) {\r\n              m[altrow * 8 + col] = m[altrow * 8 + col] - m[row * 8 + col] * multiplier;\r\n            }\r\n          }\r\n        }\r\n        return new Matrix4([\r\n          m[4], m[5], m[6], m[7],\r\n          m[12], m[13], m[14], m[15],\r\n          m[20], m[21], m[22], m[23],\r\n          m[28], m[29], m[30], m[31]\r\n        ]);\r\n      }\r\n      else {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  export class Matrix3 {\r\n    elements: number[];\r\n\r\n    constructor(elements?: number[]) {\r\n      this.elements = elements || [1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n    }\r\n\r\n    static Identity = new Matrix3();\r\n\r\n    e(colIdx: number, rowIdx: number): number {\r\n      let idx = colIdx + (rowIdx || 0) * 3;\r\n      return idx >= 0 && idx < 9 ? this.elements[idx] : null;\r\n    }\r\n\r\n    row(idx: number): Vec3 {\r\n      if (idx >= 0 && idx < 3) {\r\n        return new Vec3(this.elements[idx * 3], this.elements[idx * 3 + 1], this.elements[idx * 3 + 2]);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    col(idx: number): Vec3 {\r\n      if (idx <= 0 && idx < 3) {\r\n        return new Vec3(this.elements[idx], this.elements[idx + 3], this.elements[idx + 6]);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    multiply(m: Matrix3 | Vec3 | number): Matrix3 | Vec3 {\r\n      if (m instanceof Matrix3) {\r\n        let l = this.elements;\r\n        let r = m.elements;\r\n        return new Matrix3([\r\n          l[0] * r[0] + l[3] * r[1] + l[6] * r[2],\r\n          l[1] * r[0] + l[4] * r[1] + l[7] * r[2],\r\n          l[2] * r[0] + l[5] * r[1] + l[8] * r[2],\r\n\r\n          l[0] * r[3] + l[3] * r[4] + l[6] * r[5],\r\n          l[1] * r[3] + l[4] * r[4] + l[7] * r[5],\r\n          l[2] * r[3] + l[5] * r[4] + l[8] * r[5],\r\n\r\n          l[0] * r[6] + l[3] * r[7] + l[6] * r[8],\r\n          l[1] * r[6] + l[4] * r[7] + l[7] * r[8],\r\n          l[2] * r[6] + l[5] * r[7] + l[8] * r[8]\r\n        ]);\r\n      } else if (m instanceof Vec3) {\r\n        return new Vec3(\r\n          m.x * this.elements[0] + m.y * this.elements[1] + m.z * this.elements[2],\r\n          m.x * this.elements[3] + m.y * this.elements[4] + m.z * this.elements[5],\r\n          m.x * this.elements[6] + m.y * this.elements[7] + m.z * this.elements[8]);\r\n      } else {\r\n        return new Matrix3(this.elements.map(function (e) { return e * <number>m; }));\r\n      }\r\n    }\r\n\r\n    toRightTriangular(): Matrix3 {\r\n      return new Matrix3(Matrix.toRightTriangular(this.elements, 3, 3));\r\n    }\r\n\r\n    determinant(): number {\r\n      let m = this.toRightTriangular();\r\n      return m.elements[0] * m.elements[4] * m.elements[8];\r\n    }\r\n\r\n    isSingular(): boolean {\r\n      return this.determinant() === 0;\r\n    }\r\n\r\n    transpose(): Matrix3 {\r\n      let e = this.elements;\r\n      return new Matrix3([\r\n        e[0], e[3], e[6],\r\n        e[1], e[4], e[7],\r\n        e[2], e[5], e[8]\r\n      ]);\r\n    }\r\n\r\n    inverse(): Matrix3 {\r\n      if (!this.isSingular()) {\r\n        let augmentedMatrix = [\r\n          this.elements[0], this.elements[1], this.elements[2], 1, 0, 0,\r\n          this.elements[3], this.elements[4], this.elements[5], 0, 1, 0,\r\n          this.elements[6], this.elements[7], this.elements[8], 0, 0, 1,\r\n        ];\r\n\r\n        let m = Matrix.toRightTriangular(augmentedMatrix, 3, 6);\r\n\r\n        for (let row = 2; row >= 0; row--) {\r\n          let divisor = m[row * 7];\r\n          for (let col = 0; col < 6; col++) {\r\n            m[row * 7 + col] = m[row * 7 + col] / divisor;\r\n          }\r\n\r\n          for (let altrow = row - 1; altrow >= 0; altrow--) {\r\n            let multiplier = m[altrow * 6 + row];\r\n            for (let col = 0; col < 6; col++) {\r\n              m[altrow * 6 + col] = m[altrow * 6 + col] - m[row * 6 + col] * multiplier;\r\n            }\r\n          }\r\n        }\r\n        return new Matrix3([\r\n          m[3], m[4], m[5],\r\n          m[9], m[10], m[11],\r\n          m[15], m[16], m[17]\r\n        ]);\r\n      }\r\n      else {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  export class Matrix {\r\n    static toRightTriangular(elements, rows, cols) {\r\n      let m = elements.slice(0);\r\n\r\n      for (let row = 0; row < rows; row++) {\r\n        if (m[row * (cols + 1)] == 0) {\r\n          for (let altrow = row + 1; altrow < rows; altrow++) {\r\n            if (m[altrow * cols + row] != 0) {\r\n              for (let j = 0; j < cols; j++) {\r\n                m[row * cols + j] += m[altrow * cols + j];\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (m[row * (cols + 1)] != 0) {\r\n          for (let altrow = row + 1; altrow < rows; altrow++) {\r\n            let multiplier = m[altrow * cols + row] / m[row * (cols + 1)];\r\n            for (let j = 0; j < cols; j++) {\r\n              m[altrow * cols + j] = j < row ? 0 : m[altrow * cols + j] - m[row * cols + j] * multiplier;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return m;\r\n    }\r\n  }\r\n\r\n  export class Vec3 {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n\r\n    constructor(x?, y?, z?) {\r\n      this.x = x || 0.0;\r\n      this.y = y || 0.0;\r\n      this.z = z || 0.0;\r\n    }\r\n\r\n    asVec3() {\r\n      return this;\r\n    }\r\n\r\n    asVec4(w?: number): Vec4 {\r\n      return new Vec4(this.x, this.y, this.z, w || 1.0);\r\n    }\r\n\r\n    equals(v: Vec3): boolean {\r\n      return this.x == v.x && this.y == v.y && this.z == v.z;\r\n    }\r\n\r\n    assignPoint(x, y, z) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.z = z;\r\n    }\r\n\r\n    assignVec(v: Vec3 | Vec4) {\r\n      this.x = v.x;\r\n      this.y = v.y;\r\n      this.z = v.z;\r\n    }\r\n\r\n    add(vec: Vec3 | Vec4): Vec3 {\r\n      return new Vec3(this.x + vec.x, this.y + vec.y, this.z + vec.z);\r\n    }\r\n\r\n    sub(vec: Vec3 | Vec4): Vec3 {\r\n      return new Vec3(this.x - vec.x, this.y - vec.y, this.z - vec.z);\r\n    }\r\n\r\n    dot(vec: Vec3 | Vec4): number {\r\n      return this.x * vec.x + this.y * vec.y + this.z * vec.z;\r\n    }\r\n\r\n    cross(v: Vec3 | Vec4) {\r\n      return new Vec3(\r\n        (this.y * v.z) - (this.z * v.y),\r\n        (this.z * v.x) - (this.x * v.z),\r\n        (this.x * v.y) - (this.y * v.x)\r\n      );\r\n    }\r\n\r\n    multiply(s: number) {\r\n      return new Vec3(this.x * s, this.y * s, this.z * s);\r\n    }\r\n\r\n    applyQuaternion(q: Quaternion) {\r\n      let x = this.x;\r\n      let y = this.y;\r\n      let z = this.z;\r\n\r\n      let qx = q.x;\r\n      let qy = q.y;\r\n      let qz = q.z;\r\n      let qw = q.w;\r\n\r\n      // quaternion * vector\r\n      let px = qw * x + qy * z - qz * y;\r\n      let py = qw * y + qz * x - qx * z;\r\n      let pz = qw * z + qx * y - qy * x;\r\n      let pw = -qx * x - qy * y - qz * z;\r\n\r\n      // product * inverse quaternion\r\n      this.x = px * qw - pw * qx - py * qz + pz * qy;\r\n      this.y = py * qw - pw * qy - pz * qx + px * qz;\r\n      this.z = pz * qw - pw * qz - px * qy + py * qx;\r\n\r\n      return this;\r\n    }\r\n\r\n    norm() {\r\n      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    }\r\n\r\n    normalize() {\r\n      return this.multiply(1 / this.norm());\r\n    }\r\n\r\n    elements() {\r\n      return [this.x, this.y, this.z];\r\n    }\r\n\r\n    squaredDist(v: Vec3 | Vec4) {\r\n      return (this.x - v.x) * (this.x - v.x) +\r\n        (this.y - v.y) * (this.y - v.y) +\r\n        (this.z - v.z) * (this.z - v.z);\r\n    }\r\n  }\r\n\r\n  export class Vec4 {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    w: number;\r\n\r\n    public static Zero = new Vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n    public static One = new Vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n    constructor(x?, y?, z?, w?) {\r\n      this.x = x || 0.0;\r\n      this.y = y || 0.0;\r\n      this.z = z || 0.0;\r\n      this.w = w || 0.0;\r\n    }\r\n\r\n    equals(v: Vec4): boolean {\r\n      return this.x == v.x && this.y == v.y && this.z == v.z && this.w == v.w;\r\n    }\r\n\r\n    asVec3(): Vec3 {\r\n      return new Vec3(this.x, this.y, this.z);\r\n    }\r\n\r\n    asVec4(): Vec4 {\r\n      return this;\r\n    }\r\n\r\n    add(vec: Vec4): Vec4 {\r\n      return new Vec4(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\r\n    }\r\n\r\n    sub(vec: Vec4): Vec4 {\r\n      return new Vec4(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\r\n    }\r\n\r\n    dot(vec: Vec4): number {\r\n      return this.x * vec.x + this.y * vec.y + this.z * vec.z + this.w * vec.w;\r\n    }\r\n\r\n    cross(v: Vec4): Vec4 {\r\n      return new Vec4(\r\n        (this.y * v.z) - (this.z * v.y),\r\n        (this.z * v.x) - (this.x * v.z),\r\n        (this.x * v.y) - (this.y * v.x),\r\n        1.0\r\n      );\r\n    }\r\n\r\n    multiply(s: number): Vec4 {\r\n      return new Vec4(this.x * s, this.y * s, this.z * s, this.w * s);\r\n    }\r\n\r\n    norm(): number {\r\n      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n    }\r\n\r\n    normalize(): Vec4 {\r\n      return this.multiply(1 / this.norm());\r\n    }\r\n\r\n    elements(): number[] {\r\n      return [this.x, this.y, this.z, this.w];\r\n    }\r\n\r\n    squaredDist(v: Vec4) {\r\n      return (this.x - v.x) * (this.x - v.x) +\r\n        (this.y - v.y) * (this.y - v.y) +\r\n        (this.z - v.z) * (this.z - v.z) +\r\n        (this.w - v.w) * (this.w - v.w);\r\n    }\r\n  }\r\n\r\n  export class Quaternion {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    w: number;\r\n\r\n    constructor(x?: number, y?: number, z?: number, w?: number) {\r\n      this.x = x || 0.0;\r\n      this.y = y || 0.0;\r\n      this.z = z || 0.0;\r\n      this.w = typeof w == 'undefined' ? 1.0 : w;\r\n    }\r\n\r\n    setFromAxisAngle(axis: Vec3, angle: number): Quaternion {\r\n      let halfAngle = angle / 2;\r\n      let s = Math.sin(halfAngle);\r\n\r\n      this.x = axis.x * s;\r\n      this.y = axis.y * s;\r\n      this.z = axis.z * s;\r\n      this.w = Math.cos(halfAngle);\r\n\r\n      return this;\r\n    }\r\n\r\n    multiply(q: Quaternion) {\r\n      let x = this.x, y = this.y, z = this.z, w = this.w;\r\n      let qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n      this.x = x * qw + w * qx + y * qz - z * qy;\r\n      this.y = y * qw + w * qy + z * qx - x * qz;\r\n      this.z = z * qw + w * qz + x * qy - y * qx;\r\n      this.w = w * qw - x * qx - y * qy - z * qz;\r\n    }\r\n  }\r\n\r\n  export class AABB3D {\r\n    public minX: number = +Infinity;\r\n    public maxX: number = -Infinity;\r\n    public minY: number = +Infinity;\r\n    public maxY: number = -Infinity;\r\n    public minZ: number = +Infinity;\r\n    public maxZ: number = -Infinity;\r\n\r\n    public addPoint(x: number, y: number, z: number) {\r\n      this.minX = Math.min(this.minX, x);\r\n      this.maxX = Math.max(this.maxX, x);\r\n      this.minY = Math.min(this.minY, y);\r\n      this.maxY = Math.max(this.maxY, y);\r\n      this.minZ = Math.min(this.minZ, z);\r\n      this.maxZ = Math.max(this.maxZ, z);\r\n    }\r\n\r\n    public addVector(v: Vec3 | Vec4) {\r\n      this.addPoint(v.x, v.y, v.z);\r\n    }\r\n\r\n    public addAABB(box: AABB3D) {\r\n      this.addPoint(box.minX, box.minY, box.minZ);\r\n      this.addPoint(box.maxX, box.maxY, box.maxZ);\r\n    }\r\n\r\n    public clear() {\r\n      this.minX = +Infinity;\r\n      this.maxX = -Infinity;\r\n      this.minY = +Infinity;\r\n      this.maxY = -Infinity;\r\n      this.minZ = +Infinity;\r\n      this.maxZ = -Infinity;\r\n    }\r\n\r\n    public center(): Vec3 {\r\n      return new Vec3(\r\n        .5 * (this.minX + this.maxX),\r\n        .5 * (this.minY + this.maxY),\r\n        .5 * (this.minZ + this.maxZ)\r\n      );\r\n    }\r\n\r\n    public extents(): Vec3 {\r\n      return new Vec3(\r\n        (this.maxX - this.minX),\r\n        (this.maxY - this.minY),\r\n        (this.maxZ - this.minZ)\r\n      );\r\n    }\r\n\r\n    public min(): Vec3 {\r\n      return new Vec3(\r\n        this.minX,\r\n        this.minY,\r\n        this.minZ\r\n      );\r\n    }\r\n\r\n    public max(): Vec3 {\r\n      return new Vec3(\r\n        this.maxX,\r\n        this.maxY,\r\n        this.maxZ\r\n      );\r\n    }\r\n\r\n    public contains(v: Vec3 | Vec4) {\r\n      return v.x >= this.minX && v.x <= this.maxX &&\r\n        v.y >= this.minY && v.y <= this.maxY &&\r\n        v.z >= this.minZ && v.z <= this.maxZ;\r\n    }\r\n\r\n    public transform(matrix: Matrix4): AABB3D {\r\n      let result = new AABB3D();\r\n\r\n      let minV = <Vec4>matrix.multiply(new Vec4(this.minX, this.minY, this.minZ, 1));\r\n      let maxV = <Vec4>matrix.multiply(new Vec4(this.maxX, this.maxY, this.maxZ, 1));\r\n\r\n      result.minX = minV.x; result.minY = minV.y; result.minZ = minV.z;\r\n      result.maxX = maxV.x; result.maxY = maxV.y; result.maxZ = maxV.z;\r\n\r\n      return result;\r\n    }\r\n\r\n    public intersectsRay(ray: Line3D): Vec3 {\r\n      let result: Vec3 = null;\r\n\r\n      let v0 = ray.p0.asVec3();\r\n      let dir = ray.p1.asVec3().sub(ray.p0.asVec3());\r\n\r\n      let intX0 = ray.intersectRayWithPlane(new Vec3(this.minX, 0, 0), new Vec3(-1, 0, 0));\r\n      let intX1 = ray.intersectRayWithPlane(new Vec3(this.maxX, 0, 0), new Vec3(1, 0, 0));\r\n      let intY0 = ray.intersectRayWithPlane(new Vec3(0, this.minY, 0), new Vec3(0, -1, 0));\r\n      let intY1 = ray.intersectRayWithPlane(new Vec3(0, this.maxY, 0), new Vec3(0, 1, 0));\r\n      let intZ0 = ray.intersectRayWithPlane(new Vec3(0, 0, this.minZ), new Vec3(0, 0, -1));\r\n      let intZ1 = ray.intersectRayWithPlane(new Vec3(0, 0, this.maxZ), new Vec3(0, 0, 1));\r\n\r\n      let currDist = Infinity;\r\n      if (intX0 && this.contains(intX0)) { currDist = v0.squaredDist(intX0); result = intX0; }\r\n      if (intX1 && this.contains(intX1) && v0.squaredDist(intX1) < currDist) { currDist = v0.squaredDist(intX1); result = intX1; }\r\n      if (intY0 && this.contains(intY0) && v0.squaredDist(intY0) < currDist) { currDist = v0.squaredDist(intY0); result = intY0; }\r\n      if (intY1 && this.contains(intY1) && v0.squaredDist(intY1) < currDist) { currDist = v0.squaredDist(intY1); result = intY1; }\r\n      if (intZ0 && this.contains(intZ0) && v0.squaredDist(intZ0) < currDist) { currDist = v0.squaredDist(intZ0); result = intZ0; }\r\n      if (intZ1 && this.contains(intZ1) && v0.squaredDist(intZ1) < currDist) { currDist = v0.squaredDist(intZ1); result = intZ1; }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  export class Point3D {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n\r\n    constructor(x?, y?, z?) {\r\n      this.x = x || 0.0;\r\n      this.y = y || 0.0;\r\n      this.z = z || 0.0;\r\n    }\r\n\r\n    asVec3(): Vec3 {\r\n      return new Vec3(this.x, this.y, this.z);\r\n    }\r\n\r\n    asVec4(w?: number): Vec4 {\r\n      return new Vec4(this.x, this.y, this.z, w || 1.0);\r\n    }\r\n  }\r\n\r\n  export class Line3D {\r\n    p0: Point3D;\r\n    p1: Point3D;\r\n\r\n    constructor(p0, p1) {\r\n      this.p0 = p0 || new Point3D();\r\n      this.p1 = p1 || new Point3D();\r\n    }\r\n\r\n    public intersectRayWithPlane(v0: Vec3, n: Vec3): Vec3 {\r\n      let result: Vec3 = null;\r\n\r\n      let u = this.p1.asVec3().sub(this.p0.asVec3());\r\n\r\n      let D = n.dot(u);\r\n      if (D != 0) {\r\n        let w = this.p0.asVec3().sub(v0);\r\n        let N = -n.dot(w);\r\n        let sI = N / D;\r\n\r\n        if (sI >= 0) {\r\n          result = this.p0.asVec3().add(u.multiply(sI));\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    intersectTriangle(p0, p1, p2) {\r\n      let matrix = new Matrix3([\r\n        this.p0.x - this.p1.x, p1.x - p0.x, p2.x - p0.x,\r\n        this.p0.y - this.p1.y, p1.y - p0.y, p2.y - p0.y,\r\n        this.p0.z - this.p1.z, p1.z - p0.z, p2.z - p0.z\r\n      ]).inverse();\r\n\r\n      if (matrix) {\r\n        let res = matrix.multiply(this.p0.asVec3().sub(p0.asVec3()));\r\n        if (res && (<Vec3>res).y >= 0 && (<Vec3>res).y <= 1.0 && (<Vec3>res).z >= 0 && (<Vec3>res).z <= 1.0 && (<Vec3>res).y + (<Vec3>res).z <= 1.0) {\r\n          return p0.asVec3()\r\n            .add(p1.asVec3().sub(p0.asVec3()).multiply((<Vec3>res).y))\r\n            .add(p2.asVec3().sub(p0.asVec3()).multiply((<Vec3>res).z));\r\n        } else {\r\n          return null;\r\n        }\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    transform(matrix: Matrix4) {\r\n      let v0 = <Vec4>matrix.multiply(this.p0.asVec4());\r\n      let v1 = <Vec4>matrix.multiply(this.p1.asVec4());\r\n      return new Line3D(new Point3D(v0.x, v0.y, v0.z), new Point3D(v1.x, v1.y, v1.z));\r\n    }\r\n  }\r\n\r\n  export class Camera {\r\n    private _position: Vec3;\r\n    private _direction: Vec3;\r\n    private _up: Vec3;\r\n\r\n    private currentViewMatrix: Matrix4;\r\n\r\n    constructor(position?: Vec3, direction?: Vec3, up?: Vec3) {\r\n      this._position = position || new Vec3(0.0, 0.0, 20.0);\r\n      this._direction = direction || new Vec3(0.0, 0.0, -1.0);\r\n      this._up = up || new Vec3(0.0, 1.0, 0.0);\r\n    }\r\n\r\n    changed() {\r\n      this.currentViewMatrix = null;\r\n    }\r\n\r\n    setPosition(x?: number, y?: number, z?: number) {\r\n      this._position.x = x || 0.0;\r\n      this._position.y = y || 0.0;\r\n      this._position.z = z || 0.0;\r\n      this.changed();\r\n    }\r\n\r\n    setDirection(x: number, y: number, z: number) {\r\n      this._direction.x = x;\r\n      this._direction.y = y;\r\n      this._direction.z = z;\r\n      this.changed();\r\n    }\r\n\r\n    setCenter(x: number, y: number, z: number) {\r\n      this._direction.x = x - this._position.x;\r\n      this._direction.y = y - this._position.y;\r\n      this._direction.z = z - this._position.z;\r\n      this.changed();\r\n    }\r\n\r\n    getPosition(): Vec3 {\r\n      return this._position;\r\n    }\r\n\r\n    asVec3(): Vec3 {\r\n      return this._position;\r\n    }\r\n\r\n    asVec4(): Vec4 {\r\n      return this._position.asVec4();\r\n    }\r\n\r\n    getProjectionMatrix(width, height): Matrix4 {\r\n      return this.makePerspective(45, width / height, 0.1, 10000.0);\r\n    }\r\n\r\n    getViewMatrix(): Matrix4 {\r\n      return <psgeometry.Matrix4>this.makeLookAt();\r\n    }\r\n\r\n    private makePerspective(fovy, aspect, znear, zfar): Matrix4 {\r\n      let ymax = znear * Math.tan(fovy * Math.PI / 360.0);\r\n      let ymin = -ymax;\r\n      let xmin = ymin * aspect;\r\n      let xmax = ymax * aspect;\r\n\r\n      return this.makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);\r\n    }\r\n\r\n    private makeFrustum(left, right,\r\n      bottom, top,\r\n      znear, zfar): Matrix4 {\r\n      let x = 2 * znear / (right - left);\r\n      let y = 2 * znear / (top - bottom);\r\n      let a = (right + left) / (right - left);\r\n      let b = (top + bottom) / (top - bottom);\r\n      let c = -(zfar + znear) / (zfar - znear);\r\n      let d = -2 * zfar * znear / (zfar - znear);\r\n\r\n      return new Matrix4(\r\n        [x, 0, a, 0,\r\n          0, y, b, 0,\r\n          0, 0, c, d,\r\n          0, 0, -1, 0]);\r\n    }\r\n\r\n    private makeOrtho(left, right, bottom, top, znear, zfar): Matrix4 {\r\n      let tx = -(right + left) / (right - left);\r\n      let ty = -(top + bottom) / (top - bottom);\r\n      let tz = -(zfar + znear) / (zfar - znear);\r\n\r\n      return new Matrix4(\r\n        [2 / (right - left), 0, 0, tx,\r\n          0, 2 / (top - bottom), 0, ty,\r\n          0, 0, -2 / (zfar - znear), tz,\r\n          0, 0, 0, 1]);\r\n    }\r\n\r\n    private makeLookAt(): Matrix4 {\r\n      let eye = this._position;\r\n      let center = this._position.add(this._direction);\r\n      let up = this._up;\r\n\r\n      let z = eye.sub(center).normalize();\r\n      let x = up.cross(z).normalize();\r\n      let y = z.cross(x).normalize();\r\n\r\n      let m = new Matrix4([\r\n        x.x, x.y, x.z, 0,\r\n        y.x, y.y, y.z, 0,\r\n        z.x, z.y, z.z, 0,\r\n        0, 0, 0, 1]);\r\n\r\n      let t = new Matrix4([\r\n        1, 0, 0, -eye.x,\r\n        0, 1, 0, -eye.y,\r\n        0, 0, 1, -eye.z,\r\n        0, 0, 0, 1]);\r\n\r\n      return <Matrix4>t.multiply(m);\r\n    }\r\n  }\r\n\r\n  function pointInTriangle(p, a, b, c): boolean {\r\n    // Compute vectors        \r\n    let v0 = c.subtract(a);\r\n    let v1 = b.subtract(a);\r\n    let v2 = p.subtract(a);\r\n\r\n    // Compute dot products\r\n    let dot00 = v0.dot(v0)\r\n    let dot01 = v0.dot(v1)\r\n    let dot02 = v0.dot(v2)\r\n    let dot11 = v1.dot(v1)\r\n    let dot12 = v1.dot(v2)\r\n\r\n    // Compute barycentric coordinates\r\n    let invDenom = 1 / (dot00 * dot11 - dot01 * dot01)\r\n    let u = (dot11 * dot02 - dot01 * dot12) * invDenom\r\n    let v = (dot00 * dot12 - dot01 * dot02) * invDenom\r\n\r\n    // Check if point is in triangle\r\n    return (u >= 0) && (v >= 0) && (u + v < 1);\r\n  }\r\n\r\n\r\n  export class Vec2 {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x?: number, y?: number) {\r\n      this.x = x || 0.0;\r\n      this.y = y || 0.0;\r\n    }\r\n\r\n    public sub(v: Vec2) {\r\n      return new Vec2(this.x - v.x, this.y - v.y);\r\n    }\r\n\r\n    public static insideTri(a: Vec2, b: Vec2, c: Vec2, p: Vec2) {\r\n      return Vec2.cross(c.sub(b), p.sub(b)) >= .0 &&\r\n        Vec2.cross(a.sub(c), p.sub(c)) >= .0 &&\r\n        Vec2.cross(b.sub(a), p.sub(a)) >= .0;\r\n    };\r\n\r\n    public static cross(v0: Vec2, v1: Vec2): number {\r\n      return v0.x * v1.y - v0.y * v1.x;\r\n    }\r\n\r\n  }\r\n\r\n  export class Polygon2D {\r\n\r\n    private static Epsilon = 1e-10;\r\n\r\n    private vertices: Array<Vec2> = [];\r\n\r\n    public get Vertices() {\r\n      return this.vertices;\r\n    }\r\n\r\n    public addVertex(x: number, y: number) {\r\n      this.vertices.push(new Vec2(x, y));\r\n    }\r\n\r\n    public addVector(v: Vec2) {\r\n      this.vertices.push(v);\r\n    }\r\n\r\n    public addToAABB(box: AABB2D) {\r\n      this.vertices.forEach((p) => {\r\n        box.addVector(p);\r\n      });\r\n    }\r\n\r\n    public clear() {\r\n      this.vertices.length = 0;\r\n    }\r\n\r\n    public getArea(): number {\r\n      // see: https://stackoverflow.com/a/1165943\r\n      let result = 0;\r\n\r\n      let n = this.vertices.length;\r\n      for (let i = n - 1, q = 0; q < n; i = q++) {\r\n        result += this.vertices[i].x * this.vertices[q].y - this.vertices[q].x * this.vertices[i].y;\r\n      }\r\n\r\n      return result * 0.5;\r\n    }\r\n\r\n\r\n\r\n    private snip(u: number, v: number, w: number, n: number, indices: Array<number>) {\r\n      let result;\r\n\r\n      let a = this.vertices[indices[u]];\r\n      let b = this.vertices[indices[v]];\r\n      let c = this.vertices[indices[w]];\r\n      let p: Vec2;\r\n\r\n      result = (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x) > Polygon2D.Epsilon;\r\n\r\n      for (let i = 0; i < n && result; ++i) {\r\n        if ((i != u) && (i != v) && (i != w)) {\r\n          p = this.vertices[indices[i]];\r\n          result = !Vec2.insideTri(a, b, c, p);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    public triangulate(): Polygon2D {\r\n      let result = new Polygon2D();\r\n\r\n      let n = this.vertices.length;\r\n\r\n      if (n > 2) {\r\n        let indices: Array<number> = [];\r\n\r\n        if (this.getArea() > .0) {\r\n          for (let i = 0; i < n; ++i) indices[i] = i;\r\n        } else {\r\n          for (let i = 0; i < n; ++i) indices[i] = (n - 1) - i;\r\n        }\r\n\r\n        let nv = n;\r\n\r\n        /*  remove nv-2 Vertices, creating 1 triangle every time */\r\n        let count = 2 * nv;   /* error detection */\r\n\r\n        for (let m = 0, v = nv - 1; nv > 2;) {\r\n          /* if we loop, it is probably a non-simple polygon */\r\n          if (0 >= count--) {\r\n            return new Polygon2D();\r\n          }\r\n\r\n          /* three consecutive vertices in current polygon, <u,v,w> */\r\n          let u = v; if (nv <= u) u = 0;     /* previous */\r\n          v = u + 1; if (nv <= v) v = 0;     /* new v    */\r\n          let w = v + 1; if (nv <= w) w = 0;     /* next     */\r\n\r\n          if (this.snip(u, v, w, nv, indices)) {\r\n            let a, b, c, s, t;\r\n\r\n            /* true names of the vertices */\r\n            a = indices[u]; b = indices[v]; c = indices[w];\r\n\r\n            /* output Triangle */\r\n            result.addVector(this.vertices[c]);\r\n            result.addVector(this.vertices[b]);\r\n            result.addVector(this.vertices[a]);\r\n\r\n            ++m;\r\n\r\n            /* remove v from remaining polygon */\r\n            for (s = v, t = v + 1; t < nv; s++ , t++) {\r\n              indices[s] = indices[t];\r\n            }\r\n            --nv;\r\n\r\n            /* reset error detection counter */\r\n            count = 2 * nv;\r\n          }\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  export class AABB2D {\r\n    public minX: number = +Infinity;\r\n    public maxX: number = -Infinity;\r\n    public minY: number = +Infinity;\r\n    public maxY: number = -Infinity;\r\n\r\n    public addPoint(x: number, y: number) {\r\n      this.minX = Math.min(this.minX, x);\r\n      this.maxX = Math.max(this.maxX, x);\r\n      this.minY = Math.min(this.minY, y);\r\n      this.maxY = Math.max(this.maxY, y);\r\n    }\r\n\r\n    public addVector(v: Vec2 | Vec3 | Vec4) {\r\n      this.addPoint(v.x, v.y);\r\n    }\r\n\r\n    public addAABB(box: AABB2D) {\r\n      this.addPoint(box.minX, box.minY);\r\n      this.addPoint(box.maxX, box.maxY);\r\n    }\r\n\r\n    public clear() {\r\n      this.minX = +Infinity;\r\n      this.maxX = -Infinity;\r\n      this.minY = +Infinity;\r\n      this.maxY = -Infinity;\r\n    }\r\n\r\n    public center(): Vec2 {\r\n      return new Vec2(\r\n        .5 * (this.minX + this.maxX),\r\n        .5 * (this.minY + this.maxY)\r\n      );\r\n    }\r\n\r\n    public extents(): Vec2 {\r\n      return new Vec2(\r\n        (this.maxX - this.minX),\r\n        (this.maxY - this.minY)\r\n      );\r\n    }\r\n\r\n    public min(): Vec2 {\r\n      return new Vec2(\r\n        this.minX,\r\n        this.minY\r\n      );\r\n    }\r\n\r\n    public max(): Vec2 {\r\n      return new Vec2(\r\n        this.maxX,\r\n        this.maxY\r\n      );\r\n    }\r\n\r\n    public contains(v: Vec2 | Vec3 | Vec4) {\r\n      return v.x >= this.minX && v.x <= this.maxX &&\r\n        v.y >= this.minY && v.y <= this.maxY\r\n    }\r\n  }\r\n\r\n  /** Represents a point in 3D space using spherical coordinates.\r\n   */\r\n  export class Spherical {\r\n\r\n    public r = 0;\r\n    public azimuth = 0;\r\n    public polar = 0;\r\n\r\n    public constructor(r: number, azimuth: number, polar: number) {\r\n      this.r = r;\r\n      this.azimuth = azimuth;\r\n      this.polar = polar;\r\n    }\r\n\r\n    /** Converts cartesian coordinates x,y,z to spherical coordinates.\r\n      */\r\n    public static FromCartesian(x: number, y: number, z: number): Spherical {\r\n      let r = Math.sqrt(x * x + y * y + z * z);\r\n      return new Spherical(\r\n        r,\r\n        Math.asin(y / r),\r\n        Math.atan2(-x, z));\r\n    }\r\n\r\n    /** Converts cartesian vector to spherical coordinates.\r\n      */\r\n    public static FromCartesianVector(v: Vec4 | Vec3) {\r\n      return Spherical.FromCartesian(v.x, v.y, v.z);\r\n    }\r\n\r\n    /** Converts spherical coordinates to cartesian vector.\r\n      */\r\n    public static ToCartesian(r: number, polar: number, azimuth: number): Vec4 {\r\n      return new Vec4(r * Math.cos(polar) * Math.sin(azimuth),\r\n        -r * Math.sin(polar),\r\n        -r * Math.cos(polar) * Math.cos(azimuth));\r\n    }\r\n\r\n    /** Converts spherical coordinates to cartesian vector.\r\n      */\r\n    public toCartesian(): Vec4 {\r\n      return new Vec4(this.r * Math.cos(this.polar) * Math.sin(this.azimuth),\r\n        -this.r * Math.sin(this.polar),\r\n        -this.r * Math.cos(this.polar) * Math.cos(this.azimuth));\r\n    }\r\n\r\n    }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/// ModelStage Â© 2018 Plansysteme GmbH, Hamburg, Germany. All rights reserved.\r\n\r\nimport { psgeometry } from './ps-geometry';\r\nimport { HubConnectionBuilder, LogLevel, HubConnection } from '@aspnet/signalr';\r\n\r\nexport module modelstageweb {\r\n\r\n    export function uuidv4(): string {\r\n\r\n        let crypto = window.crypto || (<any>window).msCrypto;\r\n\r\n        return ('' + 1e7 + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c: any) =>\r\n            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));\r\n    }\r\n\r\n    export class ToolsWebGL {\r\n\r\n        private stage: StageWebGL;\r\n         \r\n        constructor(stage: StageWebGL) {\r\n            this.stage = stage;\r\n        }\r\n\r\n        public createShader(shaderType: GLenum, shaderSource: string): WebGLShader {\r\n            let shader = this.stage.gl.createShader(shaderType);\r\n\r\n            this.stage.gl.shaderSource(shader, shaderSource);\r\n            this.stage.gl.compileShader(shader);\r\n\r\n            console.log(this.stage.gl.getShaderInfoLog(shader));\r\n\r\n            return shader;\r\n        }\r\n    }\r\n\r\n    export class BlockStreamBlockDescriptor {\r\n\r\n        private blockType: string;\r\n\r\n        private majorVersion: number;\r\n\r\n        private minorVersion: number;\r\n\r\n        private flags: number;\r\n\r\n        private payloadBytes: number;\r\n\r\n        public get BlockType() {\r\n            return this.blockType;\r\n        }\r\n\r\n        public set BlockType(value: string) {\r\n            this.blockType = value;\r\n        }\r\n\r\n        public get MajorVersion() {\r\n            return this.majorVersion;\r\n        }\r\n\r\n        public set MajorVersion(value: number) {\r\n            this.majorVersion = value;\r\n        }\r\n\r\n        public get MinorVersion() {\r\n            return this.minorVersion;\r\n        }\r\n\r\n        public set MinorVersion(value: number) {\r\n            this.minorVersion = value;\r\n        }\r\n\r\n        public get Flags() {\r\n            return this.flags;\r\n        }\r\n\r\n        public set Flags(value: number) {\r\n            this.flags = value;\r\n        }\r\n\r\n        public get PayloadBytes() {\r\n            return this.payloadBytes;\r\n        }\r\n\r\n        public set PayloadBytes(value: number) {\r\n            this.payloadBytes = value;\r\n        }\r\n    }\r\n\r\n    export enum BlockStreamReaderStates {\r\n        FILE_HEADER_EXPECTED = 0,\r\n        BLOCK_DESCRIPTOR_EXPECTED = 1,\r\n        PAYLOAD_EXPECTED = 2\r\n    }\r\n\r\n    export class BlockStreamReader {\r\n\r\n        private arrayBuffer: ArrayBuffer = null;\r\n\r\n        private byteArray: Uint8Array = null;\r\n\r\n        private currentPos: number = 0;\r\n\r\n        private currentBlockDescriptor: BlockStreamBlockDescriptor;\r\n\r\n        private blockEnd: number = 0;\r\n\r\n        private isComplete: boolean = false;\r\n\r\n        private fatalError: boolean = false;\r\n\r\n        private state: BlockStreamReaderStates = BlockStreamReaderStates.FILE_HEADER_EXPECTED;\r\n\r\n        public get CurrentBlockDescriptor() {\r\n            return this.currentBlockDescriptor;\r\n        }\r\n\r\n        public get FatalError() {\r\n            return this.fatalError;\r\n        }\r\n\r\n        constructor(buffer: ArrayBuffer) {\r\n            this.arrayBuffer = buffer;\r\n            this.byteArray = new Uint8Array(buffer);\r\n\r\n            this.assureFileHeader();\r\n        }\r\n\r\n        public remainingBytesInBlock(): number {\r\n            return this.blockEnd - this.currentPos;\r\n        }\r\n\r\n        public assureRemainingBytesInBlock(count: number): boolean {\r\n            return this.currentPos + count <= this.blockEnd;\r\n        }\r\n\r\n        public readBytes(count: number): ArrayBuffer\r\n        {\r\n            return this.arrayBuffer.slice(this.currentPos, this.currentPos + count); \r\n        }\r\n\r\n        public tryReadInt16(lambda: (value: number) => void): boolean {\r\n            let result = this.assureRemainingBytesInBlock(2);\r\n\r\n            if (result) {\r\n                lambda(this.byteArray[this.currentPos++] +\r\n                    this.byteArray[this.currentPos++] * 256);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public tryReadFloat(lambda: (value: number) => void): boolean {\r\n            let result = this.assureRemainingBytesInBlock(4);\r\n\r\n            if (result) {\r\n                let buf = new ArrayBuffer(4);\r\n                let view = new DataView(buf);\r\n                view.setUint8(0, this.byteArray[this.currentPos++]);\r\n                view.setUint8(1, this.byteArray[this.currentPos++]);\r\n                view.setUint8(2, this.byteArray[this.currentPos++]);\r\n                view.setUint8(3, this.byteArray[this.currentPos++]);\r\n\r\n                //let view = new DataView(this.byteArray.buffer, this.currentPos, 4);\r\n                lambda(view.getFloat32(0, true));\r\n                //this.currentPos += 4;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public tryReadInt(lambda: (value: number) => void): boolean {\r\n            let result = this.assureRemainingBytesInBlock(4);\r\n\r\n            if (result) {\r\n                lambda(this.byteArray[this.currentPos++] +\r\n                    this.byteArray[this.currentPos++] * 256 +\r\n                    this.byteArray[this.currentPos++] * 65536 +\r\n                    this.byteArray[this.currentPos++] * 16777216);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public tryReadInt64(lambda: (value: number) => void): boolean {\r\n            let result = this.assureRemainingBytesInBlock(8);\r\n\r\n            if (result) {\r\n                lambda(this.byteArray[this.currentPos++] +\r\n                    this.byteArray[this.currentPos++] * 256 +\r\n                    this.byteArray[this.currentPos++] * 65536 +\r\n                    this.byteArray[this.currentPos++] * 16777216 +\r\n                    this.byteArray[this.currentPos++] * 4294967296 +\r\n                    this.byteArray[this.currentPos++] * 1099511627776 +\r\n                    this.byteArray[this.currentPos++] * 281474976710656 +\r\n                    this.byteArray[this.currentPos++] * 72057594037927936);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public tryReadString(lambda: (value: string) => void): boolean {\r\n            let result = false;\r\n\r\n\r\n            this.tryReadInt((stringLength) => {\r\n                let value: string = '';\r\n\r\n                if (this.assureRemainingBytesInBlock(stringLength)) {\r\n                    \r\n                    for (let i: number = 0; i < stringLength; ++i) {\r\n                        value += String.fromCharCode(this.byteArray[this.currentPos++]);\r\n                    }\r\n                }\r\n\r\n                lambda(value);\r\n\r\n                result = true;\r\n            });\r\n\r\n            return result;\r\n        }\r\n\r\n        public readString(): string {\r\n            let result: string = '';\r\n            this.tryReadString((value) => { result = value; });\r\n            return result;\r\n        }\r\n\r\n        public readMatrix4(): psgeometry.Matrix4 {\r\n            let result = new psgeometry.Matrix4();\r\n            for (let i = 0; i < 16; ++i) {\r\n                this.tryReadFloat((val) => { result.elements[i] = val; });\r\n            }\r\n            return result.transpose();\r\n        }\r\n\r\n        private internalReadString(startPos: number, length: number): string {\r\n            let result: string = '';\r\n            for (let i: number = 0; i < length; ++i) {\r\n                result += String.fromCharCode(this.byteArray[startPos + i]);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        private internalReadInt(startPos: number): number {\r\n            return this.byteArray[startPos] +\r\n                this.byteArray[startPos + 1] * 256 +\r\n                this.byteArray[startPos + 2] * 65536 +\r\n                this.byteArray[startPos + 3] * 16777216;\r\n        }\r\n\r\n        private assureFileHeader() {\r\n            if (this.byteArray.byteLength >= 8) {\r\n                if (this.byteArray[0] == 0x70 && // =\"psblstr1\"\r\n                    this.byteArray[1] == 0x73 &&\r\n                    this.byteArray[2] == 0x62 &&\r\n                    this.byteArray[3] == 0x6C &&\r\n                    this.byteArray[4] == 0x73 &&\r\n                    this.byteArray[5] == 0x74 &&\r\n                    this.byteArray[6] == 0x72 &&\r\n                    this.byteArray[7] == 0x31) {\r\n                    this.currentPos += 8;\r\n                    this.state = BlockStreamReaderStates.BLOCK_DESCRIPTOR_EXPECTED;\r\n                } else {\r\n                    this.fatalError = true;\r\n                }\r\n            } else {\r\n                this.fatalError = this.isComplete;\r\n            }\r\n        }\r\n\r\n        public enterBlock(): { success: boolean, descriptor: BlockStreamBlockDescriptor } {\r\n            let result: { success: boolean, descriptor: BlockStreamBlockDescriptor } = { success: false, descriptor: null };\r\n\r\n            if (this.byteArray.byteLength >= this.currentPos + 5) {\r\n                if (this.byteArray[this.currentPos] == 0x70 && // = \"psbl\"\r\n                    this.byteArray[this.currentPos + 1] == 0x73 &&\r\n                    this.byteArray[this.currentPos + 2] == 0x62 &&\r\n                    this.byteArray[this.currentPos + 3] == 0x6C) {\r\n                    let blockTypeLength = this.byteArray[this.currentPos + 4];\r\n                    if (this.byteArray.byteLength >= this.currentPos + 5 + blockTypeLength + 8) {\r\n                        // read the descriptor from stream\r\n                        result.descriptor = new BlockStreamBlockDescriptor();\r\n                        result.descriptor.BlockType = this.internalReadString(this.currentPos + 5, blockTypeLength);\r\n                        result.descriptor.MajorVersion = this.byteArray[this.currentPos + 5 + blockTypeLength];\r\n                        result.descriptor.MinorVersion = this.byteArray[this.currentPos + 5 + blockTypeLength + 1];\r\n                        result.descriptor.Flags = this.byteArray[this.currentPos + 5 + blockTypeLength + 2] * 256 + this.byteArray[this.currentPos + 5 + blockTypeLength + 3];\r\n                        result.descriptor.PayloadBytes = this.internalReadInt(this.currentPos + 5 + blockTypeLength + 4);\r\n                        this.state = BlockStreamReaderStates.PAYLOAD_EXPECTED;\r\n                        this.currentPos += 5 + blockTypeLength + 8;\r\n                        this.blockEnd = this.currentPos + result.descriptor.PayloadBytes;\r\n\r\n                        this.currentBlockDescriptor = result.descriptor;\r\n\r\n                        result.success = true;\r\n                    } else {\r\n                        // there are too few bytes to make a full block descriptor, but the stream is completely read\r\n                        this.fatalError = this.isComplete;\r\n                    }\r\n                } else {\r\n                    // no valid block header found\r\n                    this.fatalError = true;\r\n                }\r\n            } else {\r\n                // there are too few bytes to make a block header, but the stream is completely read \r\n                this.fatalError = this.isComplete && (this.byteArray.byteLength > this.currentPos);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public leaveBlock() {\r\n            this.currentPos = this.blockEnd;\r\n            this.state = BlockStreamReaderStates.BLOCK_DESCRIPTOR_EXPECTED;\r\n        }\r\n    }\r\n\r\n    export class ShaderInstance {\r\n\r\n        private shaderKey: string;\r\n\r\n        private references: { [index: string]: string } = {};\r\n\r\n        private figureID: string;\r\n\r\n        public get FigureID() {\r\n            return this.figureID;\r\n        }\r\n\r\n        public set FigureID(value: string) {\r\n            this.figureID = value;\r\n        }\r\n\r\n        public get ShaderKey() {\r\n            return this.shaderKey;\r\n        }\r\n\r\n        public set ShaderKey(value: string) {\r\n            this.shaderKey = value;\r\n        }\r\n\r\n        public getReference(key: string) {\r\n            return this.references[key];\r\n        }\r\n\r\n        constructor(shaderKey: string) {\r\n            this.shaderKey = shaderKey;\r\n        }\r\n\r\n        public construct(reader: BlockStreamReader) {\r\n        }\r\n\r\n        public addReference(key: string, value: string) {\r\n            this.references[key] = value;\r\n        }\r\n    }\r\n\r\n    export class MeshShaderInstance extends ShaderInstance {\r\n\r\n        SIZE_OF_FLOAT = 4;\r\n\r\n        protected bufferID: string;\r\n\r\n        protected priority: number;\r\n\r\n        constructor(shaderKey: string) {\r\n            super(shaderKey);\r\n        }\r\n\r\n        public construct(reader: BlockStreamReader) {\r\n            if (!reader.tryReadString((id) => { this.bufferID = id; })) {\r\n                this.bufferID = '_default';\r\n            }\r\n            if (!reader.tryReadInt16((priority) => { this.priority = priority; })) {\r\n                this.priority = 0;\r\n            }\r\n        }\r\n\r\n        public getStride(): number {\r\n            return this.ShaderKey == 'TransparentMeshShader' ? 10 * this.SIZE_OF_FLOAT : 9 * this.SIZE_OF_FLOAT;\r\n        }\r\n\r\n    }\r\n\r\n    export class TexturedMeshShaderInstance extends MeshShaderInstance {\r\n\r\n        protected textureID: string;\r\n\r\n        public get TextureID() {\r\n            return this.textureID;\r\n        }\r\n\r\n        constructor(shaderKey: string) {\r\n            super(shaderKey);\r\n        }\r\n\r\n        public construct(reader: BlockStreamReader) {\r\n            let result = reader.tryReadString((textureID) => { this.textureID = textureID; });\r\n\r\n            if (result) {\r\n                this.addReference('TextureBuffer', this.textureID);\r\n\r\n                super.construct(reader);\r\n            }\r\n        }\r\n\r\n        public getStride(): number {\r\n            return 11 * this.SIZE_OF_FLOAT;\r\n        }\r\n\r\n    }\r\n\r\n    function ShaderInstanceFromReader(reader: BlockStreamReader): ShaderInstance {\r\n        let result: ShaderInstance = null;\r\n\r\n        let shaderKey;\r\n        if (reader.tryReadString((key) => { shaderKey = key; })) {\r\n            if (shaderKey == 'OpaqueMeshShader' || shaderKey == 'TransparentMeshShader') {\r\n                result = new MeshShaderInstance(shaderKey);\r\n            }\r\n            else if (shaderKey == 'TexturedMeshShader') {\r\n                result = new TexturedMeshShaderInstance(shaderKey);\r\n            }\r\n\r\n            if (result) {\r\n                result.construct(reader);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    export class Mesh3DLib {\r\n        private rootNode: NodeAsset;\r\n\r\n        public constructor(private objectNamePrefix: string) {\r\n        }\r\n\r\n        public setRootNode(rootNode: NodeAsset) {\r\n            this.rootNode = rootNode;\r\n        }\r\n\r\n        public getNodeFromPath(path: string): NodeAsset {\r\n            if (path.length == 0 || !this.rootNode || this.rootNode.Name == path) {\r\n                return this.rootNode;\r\n            }\r\n            else {\r\n                return this.rootNode.getChildNodeFromPath(path.substr(this.rootNode.Name.length));\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    export class AssetFactoryWebGL {\r\n\r\n        private lastPercentage = -1;\r\n\r\n        private stage: StageWebGL;\r\n\r\n        private currentFigure: FigureWebGL;\r\n\r\n        private currentShaderInstance: ShaderInstance;\r\n\r\n        private currentSceneMesh3DLib: Mesh3DLib;\r\n\r\n        constructor(stage: StageWebGL) {\r\n            this.stage = stage;\r\n        }\r\n\r\n        protected createFigure(reader: BlockStreamReader, stage: StageWebGL, assetStore: AssetStoreWebGL) {\r\n            this.currentFigure = new FigureWebGL(reader.readString());\r\n\r\n            if (this.currentSceneMesh3DLib) {\r\n                reader.tryReadString((nodePath) => {\r\n                    this.currentFigure.Node = this.currentSceneMesh3DLib.getNodeFromPath(nodePath);\r\n                });\r\n            }\r\n\r\n\r\n            assetStore.addFigure(this.currentFigure);\r\n            return true;\r\n        }\r\n\r\n        protected createMesh(reader: BlockStreamReader, stage: StageWebGL, assetStore: AssetStoreWebGL) {\r\n            let result: boolean = false;\r\n\r\n            this.currentShaderInstance = ShaderInstanceFromReader(reader);\r\n\r\n            if (this.currentShaderInstance && this.currentFigure) {\r\n                this.currentFigure.addShaderInstance(this.currentShaderInstance);\r\n                result = true;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        protected createMeshBuffer(reader: BlockStreamReader, stage: StageWebGL, assetStore: AssetStoreWebGL) {\r\n            let bufferAsset = new BufferAssetWebGL(reader, 'VertexBuffer', false);\r\n            let currentID: string = bufferAsset.BufferID;\r\n            let counter = 1;\r\n            while (assetStore.getBufferAsset(currentID)) {\r\n                currentID = bufferAsset.BufferID + counter++;\r\n            }\r\n            bufferAsset.BufferID = currentID;\r\n            assetStore.addBufferAsset(currentID, bufferAsset);\r\n\r\n            if (this.currentShaderInstance && this.currentFigure) {\r\n                // extract triangles from vertex buffer, this information is used by Octree to determine triangle data from triangle indices stored in Octree data structure.\r\n                // this.currentShaderInstance.pushTriangles(this.currentFigure.getTriangles(), bufferAsset.getBufferData(), bufferAsset.getBufferSize());\r\n            }\r\n\r\n            bufferAsset.initialize(stage);\r\n\r\n            if (this.currentShaderInstance) {\r\n                this.currentShaderInstance.addReference('VertexBuffer', bufferAsset.BufferID);\r\n            }\r\n        }\r\n\r\n        protected createMeshIndicesBuffer(reader: BlockStreamReader, stage: StageWebGL, assetStore: AssetStoreWebGL) {\r\n            let bufferAsset = new BufferAssetWebGL(reader, 'IndexBuffer', true);\r\n            let currentID = bufferAsset.BufferID;\r\n            let counter = 1;\r\n            while (assetStore.getBufferAsset(currentID)) {\r\n                currentID = bufferAsset.BufferID + counter++;\r\n            }\r\n            bufferAsset.BufferID = currentID;\r\n            assetStore.addBufferAsset(currentID, bufferAsset);\r\n\r\n            bufferAsset.initialize(stage);\r\n\r\n            if (this.currentShaderInstance) {\r\n                this.currentShaderInstance.addReference('IndexBuffer', bufferAsset.BufferID);\r\n            }\r\n        }\r\n\r\n        protected createTexture(reader: BlockStreamReader, stage: StageWebGL, assetStore: AssetStoreWebGL, deferreds: Array<JQuery.Deferred<boolean>>) {\r\n            let textureName: string; \r\n            let pixelDataSize;\r\n            if (reader.tryReadString((value) => { textureName = value; }) && reader.tryReadInt64((value) => { pixelDataSize = value; })) {\r\n                let imageData = reader.readBytes(pixelDataSize);\r\n                let extension = textureName.substr(textureName.lastIndexOf('.')).toLowerCase();\r\n                let imageType = 'jpeg';\r\n                if (extension == '.png') {\r\n                    imageType = 'png';\r\n                }\r\n                let blob = new Blob([imageData], { 'type': 'image/' + imageType });\r\n                let url = URL.createObjectURL(blob);\r\n                let image = new Image();\r\n\r\n                let deferred = $.Deferred();\r\n                deferreds.push(deferred);\r\n                image.onload = () => {\r\n                    this.stage.AssetStore.addTextureAsset(textureName, new TextureAssetWebGL(this.stage, image));\r\n                    deferred.resolve();\r\n                }\r\n                image.onerror = () => {\r\n                    console.error('Error processing texture blob ' + textureName);\r\n                    deferred.reject();\r\n                }\r\n                image.src = url;\r\n            }\r\n        }\r\n\r\n        protected createOctree(reader: BlockStreamReader, stage: StageWebGL, assetStore: AssetStoreWebGL) {\r\n            this.currentFigure.setIntersector(Octree.CreateFromBlockStream(reader));\r\n        }\r\n\r\n        protected createScene(reader: BlockStreamReader, stage: StageWebGL, assetStore: AssetStoreWebGL) {\r\n            this.currentSceneMesh3DLib = new Mesh3DLib(reader.readString());\r\n        }\r\n\r\n        protected createRootNode(reader: BlockStreamReader, stage: StageWebGL, assetStore: AssetStoreWebGL) {\r\n            if (this.currentSceneMesh3DLib) {\r\n                let rootNode = NodeAsset.FromBlockStream(reader, this.currentSceneMesh3DLib);\r\n                this.currentSceneMesh3DLib.setRootNode(rootNode);\r\n                this.stage.AssetStore.addRootNode(rootNode);\r\n            }\r\n        }\r\n\r\n        private processBlock(blockType: string, reader: BlockStreamReader, stage: StageWebGL, assetStore: AssetStoreWebGL, deferreds: Array<JQuery.Deferred<boolean>>) {\r\n            if (blockType == 'PSScene') {\r\n                this.createScene(reader, stage, assetStore);\r\n            }\r\n            else if (blockType == 'PSFigure') {\r\n                this.createFigure(reader, stage, assetStore);\r\n            }\r\n            else if (blockType == 'PSMesh') {\r\n                this.createMesh(reader, stage, assetStore);\r\n            }\r\n            else if (blockType == 'PSMeshData') {\r\n                this.createMeshBuffer(reader, stage, assetStore);\r\n            }\r\n            else if (blockType == 'PSMeshIndices') {\r\n                this.createMeshIndicesBuffer(reader, stage, assetStore);\r\n            }\r\n            else if (blockType == 'PSTexture') {\r\n                this.createTexture(reader, stage, assetStore, deferreds);\r\n            }\r\n            else if (blockType == 'PSMeshOctree') {\r\n                this.createOctree(reader, stage, assetStore);\r\n            }\r\n            else if (blockType == 'PSRootNode') {\r\n                this.createRootNode(reader, stage, assetStore);\r\n            }\r\n\r\n        }\r\n\r\n        private loadFromArrayBuffer(buffer: ArrayBuffer): JQuery.Deferred<boolean> {\r\n            let deferreds: Array<JQuery.Deferred<boolean>> = [];\r\n\r\n            let assetStore = this.stage.AssetStore;\r\n\r\n            let reader: BlockStreamReader = new BlockStreamReader(buffer);\r\n            try {\r\n                let res = reader.enterBlock();\r\n                while (res.success) {\r\n                    this.processBlock(res.descriptor.BlockType, reader, this.stage, assetStore, deferreds);\r\n                    reader.leaveBlock();\r\n                    res = reader.enterBlock();\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.log(JSON.stringify(error));\r\n            }\r\n\r\n            return $.when.apply($, deferreds);\r\n        }\r\n\r\n        public getFromUrl(url: string): JQuery.Deferred<Boolean> {\r\n            let deferred: JQuery.Deferred<Boolean> = $.Deferred();\r\n\r\n            let req: XMLHttpRequest = new XMLHttpRequest();\r\n\r\n            req.open('GET', url, true);\r\n            req.responseType = 'arraybuffer';\r\n\r\n            req.onload = (event) => {\r\n                this.loadFromArrayBuffer(<ArrayBuffer>req.response).done(() => {\r\n                    deferred.resolve(true);\r\n                });\r\n            };\r\n\r\n            req.onerror = (event) => {\r\n                deferred.reject(event);\r\n            };\r\n\r\n            req.addEventListener('progress', (oEvent) => {\r\n                if (oEvent.lengthComputable) {\r\n                    let percentComplete = oEvent.loaded / oEvent.total;\r\n                    if (this.lastPercentage != Math.floor(percentComplete * 100)) {\r\n                        this.lastPercentage = Math.floor(percentComplete * 100);\r\n                        deferred.notify(Math.round(percentComplete * 100));\r\n                    }\r\n                } else {\r\n                    // Unable to compute progress information since the total size is unknown\r\n                }\r\n            });\r\n\r\n            req.send(null);\r\n\r\n            return deferred;\r\n        }\r\n\r\n    }\r\n\r\n    export interface Intersector {\r\n        getBoundingBox(): psgeometry.AABB3D;\r\n    }\r\n\r\n    export class BoundingBoxIntersector implements Intersector {\r\n        constructor(private boundingBox: psgeometry.AABB3D) {\r\n        }\r\n\r\n        public getBoundingBox(): psgeometry.AABB3D {\r\n            return this.boundingBox;\r\n        }\r\n    }\r\n\r\n    export class Octree implements Intersector {\r\n        private boundingBox = new psgeometry.AABB3D();\r\n\r\n        static CreateFromBlockStream(reader: BlockStreamReader): Octree {\r\n            let octree = new Octree();\r\n            let x0, y0, z0, x1, y1, z1;\r\n            let levels;\r\n             \r\n            if (reader.tryReadInt((val) => { levels = val; }) &&\r\n                reader.tryReadFloat((val) => x0 = val) &&\r\n                reader.tryReadFloat((val) => y0 = val) &&\r\n                reader.tryReadFloat((val) => z0 = val) &&\r\n                reader.tryReadFloat((val) => x1 = val) &&\r\n                reader.tryReadFloat((val) => y1 = val) &&\r\n                reader.tryReadFloat((val) => z1 = val)) {\r\n                octree.boundingBox.addPoint(x0, y0, z0);\r\n                octree.boundingBox.addPoint(x1, y1, z1);\r\n            }\r\n            \r\n            return octree;\r\n        }\r\n\r\n        public getBoundingBox(): psgeometry.AABB3D {\r\n            return this.boundingBox;\r\n        }\r\n\r\n    }\r\n\r\n    export class FigureWebGL {\r\n\r\n        private figureID: string;\r\n\r\n        private shaderInstances: ShaderInstance[] = [];\r\n\r\n        private intersector: Intersector;\r\n\r\n        private node: NodeAsset;\r\n\r\n        public get Node() {\r\n            return this.node;\r\n        }\r\n\r\n        public set Node(value: NodeAsset) {\r\n            this.node = value;\r\n        }\r\n\r\n        public get FigureID() {\r\n            return this.figureID;\r\n        }\r\n\r\n        public get ShaderInstances() {\r\n            return this.shaderInstances;\r\n        }\r\n\r\n        constructor(figureID: string) {\r\n            this.figureID = figureID;\r\n        }\r\n\r\n        public getBoundingBox(): psgeometry.AABB3D {\r\n            if (this.intersector) {\r\n                return this.Node ? this.intersector.getBoundingBox().transform(this.Node.AbsoluteTransformation) : this.intersector.getBoundingBox();\r\n            } else {\r\n                return new psgeometry.AABB3D();\r\n            }\r\n        }\r\n\r\n        public addShaderInstance(shaderInstance: ShaderInstance) {\r\n            this.shaderInstances.push(shaderInstance);\r\n        }\r\n\r\n        public render(context: RenderContextWebGL) {\r\n            let stage = context.Stage;\r\n\r\n            this.shaderInstances.forEach((shaderInstance) => {\r\n                shaderInstance.FigureID = this.figureID;\r\n                let shaderProgram = stage.getShaderProgram(context, shaderInstance.ShaderKey);\r\n                if (shaderProgram) {\r\n                    context.ShaderProgram = shaderProgram;\r\n                    context.NodeTransform = this.Node ? this.Node.AbsoluteTransformation : null;\r\n                    shaderProgram.render(context, shaderInstance);\r\n                }\r\n            });\r\n        }\r\n\r\n        public setIntersector(intersector: Intersector) {\r\n            this.intersector = intersector;\r\n        }\r\n\r\n        public intersectsBoundingBox(ray: psgeometry.Line3D, at: psgeometry.Vec3) {\r\n            let result = false;\r\n            if (this.intersector) {\r\n                let intersectionPoint = this.intersector.getBoundingBox().intersectsRay(ray);\r\n                if (intersectionPoint) {\r\n                    at.assignVec(intersectionPoint);\r\n                    result = true\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    export class AnimationTransformation {\r\n        public static FromBlockStream(reader: BlockStreamReader, mesh3DLib: Mesh3DLib): AnimationTransformation {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    export class NodeAsset {\r\n        private name: string;\r\n\r\n        private parentNode: NodeAsset;\r\n\r\n        private childNodes: { [index: string]: NodeAsset } = {};\r\n\r\n        private localTransformation: psgeometry.Matrix4;\r\n\r\n        private absoluteTransformation: psgeometry.Matrix4;\r\n\r\n        public get Name() {\r\n            return this.name;\r\n        }\r\n\r\n        public get AbsoluteTransformation() {\r\n            return this.absoluteTransformation;\r\n        }\r\n\r\n        public get LocalTransformation() {\r\n            return this.localTransformation;\r\n        }\r\n\r\n        public getChildNodeFromPath(path: string) {\r\n            for (let child in this.childNodes) {\r\n                if (path == this.childNodes[child].Name) {\r\n                    return this.childNodes[child];\r\n                }\r\n            }\r\n            for (let child in this.childNodes) {\r\n                if (path.substring(0, this.childNodes[child].Name.length) == this.childNodes[child].Name) {\r\n                    return this.childNodes[child].getChildNodeFromPath(path.substr(this.childNodes[child].Name.length));\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n\r\n        public static FromBlockStream(reader: BlockStreamReader, mesh3DLib: Mesh3DLib, parentNode?: NodeAsset): NodeAsset {\r\n            let result = new NodeAsset();\r\n\r\n            result.name = reader.readString();\r\n            result.localTransformation = reader.readMatrix4();\r\n            result.absoluteTransformation = NodeAsset.calculateAbsoluteTransformation(result.localTransformation, parentNode);\r\n            result.parentNode = parentNode;\r\n            result.readChildNodes(reader, mesh3DLib);\r\n            result.readAnimationTransformations(reader, mesh3DLib);\r\n\r\n            return result;\r\n        }\r\n\r\n        private static calculateAbsoluteTransformation(localTransformation: psgeometry.Matrix4, parentNode: NodeAsset): psgeometry.Matrix4 {\r\n            if (parentNode) {\r\n                return <psgeometry.Matrix4>localTransformation.multiply(parentNode.AbsoluteTransformation);\r\n            }\r\n            else {\r\n                return localTransformation;\r\n            }\r\n        }\r\n\r\n        private readChildNodes(reader: BlockStreamReader, mesh3DLib: Mesh3DLib) {\r\n            reader.tryReadInt((childNameCount) => {\r\n                for (let i = 0; i < childNameCount; ++i) {\r\n                    this.addChildNode(NodeAsset.FromBlockStream(reader, mesh3DLib, this));\r\n                }\r\n            });\r\n        }\r\n\r\n        private readAnimationTransformations(reader: BlockStreamReader, mesh3DLib: Mesh3DLib) {\r\n            reader.tryReadInt((numAnimationTransformations) => {\r\n                for (let i = 0; i < numAnimationTransformations; ++i) {\r\n                    this.addAnimationTransformation(AnimationTransformation.FromBlockStream(reader, mesh3DLib));\r\n                }\r\n            });\r\n        }\r\n\r\n        private addChildNode(node: NodeAsset) {\r\n            this.childNodes[node.Name] = node;\r\n        } \r\n\r\n        private addAnimationTransformation(animationTransformation: AnimationTransformation) {\r\n\r\n        }\r\n    }\r\n\r\n    export class BufferAssetWebGL {\r\n\r\n        private bufferID: string;\r\n\r\n        private bufferSize: number = 0;\r\n\r\n        public bufferData: ArrayBuffer | SharedArrayBuffer;\r\n\r\n        private webGLBuffer: WebGLBuffer;\r\n\r\n        private isElementBuffer: boolean = false;\r\n\r\n        public get BufferID() {\r\n            return this.bufferID;\r\n        }\r\n\r\n        public set BufferID(value: string) {\r\n            this.bufferID = value;\r\n        }\r\n\r\n        public get Buffer() {\r\n            return this.webGLBuffer;\r\n        }\r\n\r\n        public get BufferSize() {\r\n            return this.bufferSize;\r\n        }\r\n\r\n        public set BufferSize(value: number) {\r\n            this.bufferSize = value;\r\n        }\r\n\r\n        constructor(reader: BlockStreamReader, bufferID: string, isElementBuffer: boolean) {\r\n            this.bufferID = bufferID;\r\n            this.isElementBuffer = isElementBuffer;\r\n\r\n            if (reader) {\r\n                let descriptor = reader.CurrentBlockDescriptor;\r\n                if (descriptor) {\r\n\r\n                    // read additional meta data if available\r\n                    if (descriptor.MajorVersion > 1) {\r\n                        this.bufferID = reader.readString();\r\n                    }\r\n\r\n                    this.bufferSize = reader.remainingBytesInBlock();\r\n                    this.bufferData = reader.readBytes(this.bufferSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        public initialize(stage: StageWebGL) {\r\n            this.webGLBuffer = stage.gl.createBuffer();\r\n\r\n            if (this.isElementBuffer) {\r\n                stage.gl.bindBuffer(stage.gl.ELEMENT_ARRAY_BUFFER, this.webGLBuffer);\r\n                stage.gl.bufferData(stage.gl.ELEMENT_ARRAY_BUFFER, <ArrayBuffer>this.bufferData, stage.gl.STATIC_DRAW);\r\n            } else {\r\n                stage.gl.bindBuffer(stage.gl.ARRAY_BUFFER, this.webGLBuffer);\r\n                stage.gl.bufferData(stage.gl.ARRAY_BUFFER, <ArrayBuffer>this.bufferData, stage.gl.STATIC_DRAW);\r\n            }\r\n        }\r\n\r\n        public bind(stage: StageWebGL) {\r\n            if (this.isElementBuffer) {\r\n                stage.gl.bindBuffer(stage.gl.ELEMENT_ARRAY_BUFFER, this.webGLBuffer);\r\n            } else {\r\n                stage.gl.bindBuffer(stage.gl.ARRAY_BUFFER, this.webGLBuffer);\r\n            }\r\n        }\r\n\r\n        public bindInterleaved(stage: StageWebGL, attributeLocation: number, size: number, stride: number, offset: number) {\r\n            if (attributeLocation >= 0) {\r\n                stage.gl.bindBuffer(stage.gl.ARRAY_BUFFER, this.webGLBuffer);\r\n                stage.gl.enableVertexAttribArray(attributeLocation);\r\n                stage.gl.vertexAttribPointer(attributeLocation, size, stage.gl.FLOAT, false, stride, offset);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    export class OpaqueMeshBuilder {\r\n\r\n        private vertices: Array<number> = [];\r\n\r\n        private indices: Array<number> = [];\r\n\r\n        private vertBufferAsset: BufferAssetWebGL;\r\n\r\n        private indBufferAsset: BufferAssetWebGL;\r\n\r\n        constructor() {\r\n        }\r\n\r\n        public addTri(x0: number, y0: number, z0: number,\r\n            x1: number, y1: number, z1: number,\r\n            x2: number, y2: number, z2: number,\r\n            r: number, g: number, b: number, doubleSided?: boolean) {\r\n\r\n            this.vertices.push(\r\n                x0, y0, z0, 0, 0, 1, r, g, b,\r\n                x1, y1, z1, 0, 0, 1, r, g, b,\r\n                x2, y2, z2, 0, 0, 1, r, g, b);\r\n\r\n            let i = this.indices.length;\r\n            this.indices.push(i, i + 1, i + 2);\r\n\r\n            if (doubleSided) {\r\n                this.vertices.push(\r\n                    x1, y1, z1, 0, 0, 1, r, g, b,\r\n                    x0, y0, z0, 0, 0, 1, r, g, b,\r\n                    x2, y2, z2, 0, 0, 1, r, g, b);\r\n\r\n                i = this.indices.length;\r\n                this.indices.push(i, i + 1, i + 2);\r\n            }\r\n        }\r\n\r\n        public addQuad(x0: number, y0: number, z0: number,\r\n            x1: number, y1: number, z1: number,\r\n            x2: number, y2: number, z2: number,\r\n            x3: number, y3: number, z3: number,\r\n            r: number, g: number, b: number, doubleSided?: boolean) {\r\n\r\n            this.addTri(x0, y0, z0,\r\n                x1, y1, z1,\r\n                x2, y2, z2,\r\n                r, g, b, doubleSided);\r\n            this.addTri(x0, y0, z0,\r\n                x2, y2, z2,\r\n                x3, y3, z3,\r\n                r, g, b, doubleSided);\r\n        }\r\n\r\n        public addStroke(x0: number, y0: number, z0: number,\r\n            x1: number, y1: number, z1: number,\r\n            r: number, g: number, b: number) {\r\n\r\n            let dir = new psgeometry.Vec3(x1, y1, z1).sub(new psgeometry.Vec3(x0, y0, z0));\r\n            let radius = dir.norm();\r\n            let azimuth = Math.atan2(-dir.z, dir.x);\r\n            let polar = Math.asin(dir.y / radius);\r\n\r\n            let thickness = .01;\r\n            let up = <psgeometry.Vec4>psgeometry.Matrix4.FromRotation(azimuth, polar, 0).multiply(new psgeometry.Vec4(0, thickness, 0, 1));\r\n            let front = <psgeometry.Vec4>psgeometry.Matrix4.FromRotation(azimuth, polar, 0).multiply(new psgeometry.Vec4(0, 0, thickness, 1));\r\n\r\n            this.addQuad(x0 + up.x - front.x, y0 + up.y - front.y, z0 + up.z - front.z,\r\n                x1 + up.x - front.x, y1 + up.y - front.y, z1 + up.z - front.z,\r\n                x1 - up.x - front.x, y1 - up.y - front.y, z1 - up.z - front.z,\r\n                x0 - up.x - front.x, y0 - up.y - front.y, z0 - up.z - front.z,\r\n                r, g, b);\r\n\r\n            this.addQuad(x0 - up.x + front.x, y0 - up.y + front.y, z0 - up.z + front.z,\r\n                x1 - up.x + front.x, y1 - up.y + front.y, z1 - up.z + front.z,\r\n                x1 + up.x + front.x, y1 + up.y + front.y, z1 + up.z + front.z,\r\n                x0 + up.x + front.x, y0 + up.y + front.y, z0 + up.z + front.z,\r\n                r, g, b);\r\n\r\n            this.addQuad(x0 - up.x - front.x, y0 - up.y - front.y, z0 - up.z - front.z,\r\n                x1 - up.x - front.x, y1 - up.y - front.y, z1 - up.z - front.z,\r\n                x1 - up.x + front.x, y1 - up.y + front.y, z1 - up.z + front.z,\r\n                x0 - up.x + front.x, y0 - up.y + front.y, z0 - up.z + front.z,\r\n                r, g, b);\r\n\r\n            this.addQuad(x0 + up.x + front.x, y0 + up.y + front.y, z0 + up.z + front.z,\r\n                x1 + up.x + front.x, y1 + up.y + front.y, z1 + up.z + front.z,\r\n                x1 + up.x - front.x, y1 + up.y - front.y, z1 + up.z - front.z,\r\n                x0 + up.x - front.x, y0 + up.y - front.y, z0 + up.z - front.z,\r\n                r, g, b);\r\n\r\n        }\r\n\r\n        public initialize(stage: StageWebGL) {\r\n            let vertBuf = new Float32Array(this.vertices.length);\r\n            vertBuf.set(this.vertices);\r\n            this.vertBufferAsset.bufferData = vertBuf.buffer;\r\n            this.vertBufferAsset.BufferSize = this.indices.length * 9 * 4;\r\n\r\n            let indBuf = new Int32Array(this.indices.length);\r\n            indBuf.set(this.indices);\r\n            this.indBufferAsset.bufferData = indBuf.buffer;\r\n\r\n            this.vertBufferAsset.initialize(stage);\r\n            this.indBufferAsset.initialize(stage);\r\n        }\r\n\r\n        public createFigure(stage: StageWebGL, figureID: string): FigureWebGL {\r\n            this.indBufferAsset = new modelstageweb.BufferAssetWebGL(undefined, figureID + '_indices', true);\r\n            this.vertBufferAsset = new modelstageweb.BufferAssetWebGL(undefined, figureID + '_vertices', false);\r\n\r\n            this.initialize(stage);\r\n\r\n            stage.AssetStore.addBufferAsset(figureID + '_indices', this.indBufferAsset);\r\n            stage.AssetStore.addBufferAsset(figureID + '_vertices', this.vertBufferAsset);\r\n\r\n            let shaderInstance = new modelstageweb.MeshShaderInstance('OpaqueMeshShader');\r\n            shaderInstance.addReference('IndexBuffer', figureID + '_indices');\r\n            shaderInstance.addReference('VertexBuffer', figureID + '_vertices');\r\n\r\n            let figure = new modelstageweb.FigureWebGL(figureID);\r\n            figure.addShaderInstance(shaderInstance);\r\n\r\n            return figure;\r\n        }\r\n    }\r\n\r\n    export class TransparentMeshBuilder {\r\n\r\n        private vertices: Array<number> = [];\r\n\r\n        private indices: Array<number> = [];\r\n\r\n        constructor(protected vertBufferAsset: BufferAssetWebGL, protected indBufferAsset: BufferAssetWebGL) {\r\n        }\r\n\r\n        public addTri(x0: number, y0: number, z0: number,\r\n            x1: number, y1: number, z1: number,\r\n            x2: number, y2: number, z2: number,\r\n            r: number, g: number, b: number, a: number, twoSided?: boolean) {\r\n\r\n            this.vertices.push(\r\n                x0, y0, z0, 0, 0, 1, r, g, b, a,\r\n                x1, y1, z1, 0, 0, 1, r, g, b, a,\r\n                x2, y2, z2, 0, 0, 1, r, g, b, a);\r\n\r\n            let i = this.indices.length;\r\n            this.indices.push(i, i + 1, i + 2);\r\n\r\n            if (twoSided) {\r\n                this.addTri(x0, y0, z0,\r\n                    x2, y2, z2,\r\n                    x1, y1, z1,\r\n                    r, g, b, a);\r\n            }\r\n        }\r\n\r\n        public addQuad(x0: number, y0: number, z0: number,\r\n            x1: number, y1: number, z1: number,\r\n            x2: number, y2: number, z2: number,\r\n            x3: number, y3: number, z3: number,\r\n            r: number, g: number, b: number, a: number, twoSided?: boolean) {\r\n\r\n            this.addTri(x0, y0, z0,\r\n                x1, y1, z1,\r\n                x2, y2, z2,\r\n                r, g, b, a, twoSided);\r\n            this.addTri(x0, y0, z0,\r\n                x2, y2, z2,\r\n                x3, y3, z3,\r\n                r, g, b, a, twoSided);\r\n        }\r\n\r\n        public initialize(stage: StageWebGL) {\r\n            let vertBuf = new Float32Array(this.vertices.length);\r\n            vertBuf.set(this.vertices);\r\n            this.vertBufferAsset.bufferData = vertBuf.buffer;\r\n            this.vertBufferAsset.BufferSize = this.indices.length * 10 * 4;\r\n\r\n            let indBuf = new Int32Array(this.indices.length);\r\n            indBuf.set(this.indices);\r\n            this.indBufferAsset.bufferData = indBuf.buffer;\r\n\r\n            this.vertBufferAsset.initialize(stage);\r\n            this.indBufferAsset.initialize(stage);\r\n        }\r\n    }\r\n\r\n    export class TexturedMeshBuilder {\r\n\r\n        private vertices: Array<number> = [];\r\n\r\n        private indices: Array<number> = [];\r\n\r\n        constructor(protected vertBufferAsset: BufferAssetWebGL, protected indBufferAsset: BufferAssetWebGL) {\r\n        }\r\n\r\n        public addTri(x0: number, y0: number, z0: number, u0: number, v0: number,\r\n            x1: number, y1: number, z1: number, u1: number, v1: number,\r\n            x2: number, y2: number, z2: number, u2: number, v2: number,\r\n            r: number, g: number, b: number, twoSided?: boolean) {\r\n\r\n            this.vertices.push(\r\n                x0, y0, z0, 0, 0, 1, r, g, b, u0, v0,\r\n                x1, y1, z1, 0, 0, 1, r, g, b, u1, v1,\r\n                x2, y2, z2, 0, 0, 1, r, g, b, u2, v2);\r\n\r\n            let i = this.indices.length;\r\n            this.indices.push(i, i + 1, i + 2);\r\n\r\n            if (twoSided) {\r\n                this.addTri(x0, y0, z0, u0, v0,\r\n                    x2, y2, z2, u2, v2,\r\n                    x1, y1, z1, u1, v1,\r\n                    r, g, b);\r\n            }\r\n        }\r\n\r\n        public addQuad(x0: number, y0: number, z0: number, u0: number, v0: number,\r\n            x1: number, y1: number, z1: number, u1: number, v1: number,\r\n            x2: number, y2: number, z2: number, u2: number, v2: number,\r\n            x3: number, y3: number, z3: number, u3: number, v3: number,\r\n            r: number, g: number, b: number, twoSided?: boolean) {\r\n\r\n            this.addTri(x0, y0, z0, u0, v0,\r\n                x1, y1, z1, u1, v1,\r\n                x2, y2, z2, u2, v2,\r\n                r, g, b, twoSided);\r\n            this.addTri(x0, y0, z0, u0, v0,\r\n                x2, y2, z2, u2, v2, \r\n                x3, y3, z3, u3, v3,\r\n                r, g, b, twoSided);\r\n        }\r\n\r\n        public initialize(stage: StageWebGL) {\r\n            let vertBuf = new Float32Array(this.vertices.length);\r\n            vertBuf.set(this.vertices);\r\n            this.vertBufferAsset.bufferData = vertBuf.buffer;\r\n            this.vertBufferAsset.BufferSize = this.indices.length * 11 * 4;\r\n\r\n            let indBuf = new Int32Array(this.indices.length);\r\n            indBuf.set(this.indices);\r\n            this.indBufferAsset.bufferData = indBuf.buffer;\r\n\r\n            this.vertBufferAsset.initialize(stage);\r\n            this.indBufferAsset.initialize(stage);\r\n        }\r\n    }\r\n\r\n    export class TextureAssetWebGL {\r\n\r\n        private texture: WebGLTexture;\r\n\r\n        constructor(stage: StageWebGL, image: HTMLImageElement | WebGLTexture) {\r\n            if (image instanceof WebGLTexture) {\r\n                this.texture = image;\r\n            } else {\r\n                this.texture = stage.gl.createTexture();\r\n                stage.gl.bindTexture(stage.gl.TEXTURE_2D, this.texture);\r\n                stage.gl.texImage2D(stage.gl.TEXTURE_2D, 0, stage.gl.RGBA, stage.gl.RGBA, stage.gl.UNSIGNED_BYTE, image);\r\n                stage.gl.texParameteri(stage.gl.TEXTURE_2D, stage.gl.TEXTURE_MAG_FILTER, stage.gl.LINEAR);\r\n                stage.gl.texParameteri(stage.gl.TEXTURE_2D, stage.gl.TEXTURE_MIN_FILTER, stage.gl.LINEAR_MIPMAP_NEAREST);\r\n                stage.gl.generateMipmap(stage.gl.TEXTURE_2D);\r\n                stage.gl.bindTexture(stage.gl.TEXTURE_2D, null);\r\n            }\r\n        }\r\n\r\n        bind(stage: StageWebGL, program: ShaderProgramWebGL, attributeName: string) {\r\n            stage.gl.activeTexture(stage.gl.TEXTURE0);\r\n            stage.gl.uniform1i(stage.gl.getUniformLocation(program.Program, attributeName), 0);\r\n            stage.gl.bindTexture(stage.gl.TEXTURE_2D, this.texture);\r\n        }\r\n\r\n        unbind(stage: StageWebGL, program: ShaderProgramWebGL, attributeName: string) {\r\n            stage.gl.activeTexture(stage.gl.TEXTURE0);\r\n            stage.gl.bindTexture(stage.gl.TEXTURE_2D, null);\r\n        }\r\n\r\n    }\r\n\r\n    /// An asset store class for WebGL.\r\n    export class AssetStoreWebGL {\r\n\r\n        /// All aggregated figures.\r\n        private figures: { [index: string]: FigureWebGL } = {};\r\n\r\n        /// All aggregated nodes assets.\r\n        private rootNodeAssets: { [index: string]: NodeAsset } = {};\r\n\r\n        /// All aggregated buffer assets.\r\n        private bufferAssets: { [index: string]: BufferAssetWebGL } = {};\r\n\r\n        /// All aggregated texture assets.\r\n        private textureAssets: { [index: string]: TextureAssetWebGL } = {};\r\n\r\n\r\n        /// Adds the specified figure to the the store.\r\n        public addFigure(figure: FigureWebGL) {\r\n            this.figures[figure.FigureID] = figure;\r\n        }\r\n\r\n        /// Determines the figure with the the specified id.\r\n        public getFigure(figureID: string): FigureWebGL {\r\n            return this.figures[figureID];\r\n        }\r\n\r\n        /// Adds a buffer asset to the store.\r\n        public addBufferAsset(bufferAssetID: string, bufferAsset: BufferAssetWebGL) {\r\n            this.bufferAssets[bufferAssetID] = bufferAsset;\r\n        }\r\n\r\n        public addRootNode(node: NodeAsset) {\r\n            this.rootNodeAssets[node.Name] = node;\r\n        }\r\n\r\n        /// Determines the buffer asset with the specified id.\r\n        public getBufferAsset(bufferAssetID: string): BufferAssetWebGL {\r\n            return this.bufferAssets[bufferAssetID];\r\n        }\r\n\r\n        /// Adds a texture asset to the store.\r\n        public addTextureAsset(textureAssetID: string, textureAsset: TextureAssetWebGL) {\r\n            this.textureAssets[textureAssetID] = textureAsset;\r\n        }\r\n\r\n        /// Determines the texture asset with the specified id.\r\n        public getTextureAsset(textureAssetID: string): TextureAssetWebGL {\r\n            return this.textureAssets[textureAssetID];\r\n        }\r\n\r\n        /// Returns the map of aggregated figures.\r\n        public get Figures(): { [index: string]: FigureWebGL } {\r\n            return this.figures;\r\n        }\r\n\r\n        public getRootNode(name: string): NodeAsset {\r\n            return this.rootNodeAssets[name];\r\n        }\r\n\r\n    }\r\n\r\n    export interface SceneItemFilterWebGL {\r\n        passes(sceneItem: SceneItemWebGL, context: RenderContextWebGL);\r\n    }\r\n\r\n    export class GenericSceneItemFilterWebGL implements SceneItemFilterWebGL {\r\n        passes(sceneItem: SceneItemWebGL, context: RenderContextWebGL) {\r\n            return context.Phase != 'Shadow';\r\n        }\r\n\r\n    }\r\n\r\n    export class SceneItemWebGL {\r\n\r\n        protected scene: SceneWebGL;\r\n\r\n        protected parent: SceneItemWebGL;\r\n\r\n        protected sceneItemID: string;\r\n\r\n        protected children: Array<SceneItemWebGL> = []\r\n\r\n        protected childrenByKey: { [sceneItemID: string]: SceneItemWebGL } = {}\r\n\r\n        protected isVisible: boolean;\r\n\r\n        protected childrenVisible: boolean;\r\n\r\n        protected testIntersection: boolean;\r\n\r\n        protected testChildrenIntersection: boolean;\r\n\r\n        protected filter: SceneItemFilterWebGL;\r\n\r\n        private data: { [index: string]: any } = {};\r\n\r\n        public get Data(): { [index: string]: any } {\r\n            return this.data;\r\n        }\r\n\r\n        public get Scene() {\r\n            return this.scene;\r\n        }\r\n\r\n        public get SceneItemID() {\r\n            return this.sceneItemID;\r\n        }\r\n\r\n        public get Children() {\r\n            return this.children;\r\n        }\r\n\r\n        public get TestChildrenIntersection() {\r\n            return this.testChildrenIntersection;\r\n        }\r\n\r\n        public set TestChildrenIntersection(val: boolean) {\r\n            this.testChildrenIntersection = val;\r\n        }\r\n\r\n        public get TestIntersection() {\r\n            return this.testIntersection;\r\n        }\r\n\r\n        public set TestIntersection(val: boolean) {\r\n            this.testIntersection = val;\r\n        }\r\n\r\n        public get Filter() { return this.filter; }\r\n\r\n        public set Filter(value: SceneItemFilterWebGL) {\r\n            this.filter = value;\r\n        }\r\n\r\n        constructor(scene: SceneWebGL, sceneItemID: string, isVisible?: boolean, testIntersection?: boolean, childrenVisible?: boolean, testChildrenIntersection?: boolean) {\r\n            this.scene = scene;\r\n            this.sceneItemID = sceneItemID;\r\n            this.isVisible = isVisible || typeof isVisible === 'undefined';\r\n            this.childrenVisible = childrenVisible || typeof childrenVisible === 'undefined';\r\n            this.testIntersection = testIntersection || typeof testIntersection === 'undefined';\r\n            this.testChildrenIntersection = testChildrenIntersection || typeof testChildrenIntersection === 'undefined';\r\n        }\r\n\r\n        public addChild(sceneItem: SceneItemWebGL) {\r\n            this.childrenByKey[sceneItem.sceneItemID] = sceneItem;\r\n            this.children.push(sceneItem);\r\n            sceneItem.addedToSceneGraph(this);\r\n        }\r\n\r\n        public getChild(sceneItemID: string) {\r\n            return this.childrenByKey[sceneItemID];\r\n        }\r\n\r\n        public removeChild(sceneItemID: string) {\r\n            this.children = this.children.filter(sceneItem => sceneItem.sceneItemID != sceneItemID);\r\n            delete this.childrenByKey[sceneItemID];\r\n        }\r\n\r\n        public insertChild(sceneItem: SceneItemWebGL, index: number) {\r\n            this.childrenByKey[sceneItem.sceneItemID] = sceneItem;\r\n            this.children.splice(index, 0, sceneItem);\r\n            sceneItem.addedToSceneGraph(this);\r\n        }\r\n\r\n        protected beginRender(context: RenderContextWebGL) {\r\n        }\r\n\r\n        protected endRender(context: RenderContextWebGL) {\r\n        }\r\n\r\n        public render(context: RenderContextWebGL) {\r\n            if (!this.filter || this.filter.passes(this, context)) {\r\n                if (this.isVisible) {\r\n                    this.beginRender(context);\r\n                    this.renderChildren(context);\r\n                    this.endRender(context);\r\n                } else {\r\n                    this.renderChildren(context);\r\n                }\r\n            }\r\n        }\r\n\r\n        protected renderChildren(context: RenderContextWebGL) {\r\n            if (this.childrenVisible) {\r\n                this.children.forEach((child) => {\r\n                    child.render(context);\r\n                });\r\n            }\r\n        }\r\n\r\n        public addedToSceneGraph(parentSceneItem: SceneItemWebGL) {\r\n            this.scene = parentSceneItem.scene;\r\n            this.parent = parentSceneItem;\r\n        }\r\n\r\n        public intersectsBoundingBox(ray: psgeometry.Line3D, at: psgeometry.Vec3): Boolean {\r\n            return false;\r\n        } \r\n\r\n        protected isIntersectionCandidate(ray: psgeometry.Line3D, at: psgeometry.Vec3): Boolean {\r\n            return this.intersectsBoundingBox(ray, at);\r\n        }\r\n\r\n        public addIntersectionCandidates(ray: psgeometry.Line3D, candidates: Array<IntersectionCandidate>) {\r\n            if (this.testIntersection) {\r\n                let at = new psgeometry.Vec3();\r\n                if (this.isIntersectionCandidate(ray, at)) {\r\n                    candidates.push(new IntersectionCandidate(this, at.squaredDist(ray.p0.asVec3())));\r\n                }\r\n            }\r\n            if (this.testChildrenIntersection) {\r\n                for (let i in this.children) {\r\n                    this.children[i].addIntersectionCandidates(ray, candidates);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    export class ActorWebGL extends SceneItemWebGL {\r\n        private figures: FigureWebGL[] = [];\r\n\r\n        private lastModelTransform: psgeometry.Matrix4;\r\n\r\n        private inverseModelTransform: psgeometry.Matrix4;\r\n\r\n        private state: RenderState = new RenderState();\r\n\r\n        public get State() {\r\n            return this.state;\r\n        }\r\n\r\n        public get Figures() {\r\n            return this.figures;\r\n        }\r\n\r\n        constructor(scene: SceneWebGL, actorID: string) {\r\n            super(scene, actorID);\r\n        }\r\n\r\n        public addFigure(figure: FigureWebGL) {\r\n            this.figures.push(figure);\r\n        }\r\n\r\n        public beginRender(context: RenderContextWebGL) {\r\n            this.figures.forEach((figure) => {\r\n                figure.render(context);\r\n            });\r\n\r\n        }\r\n\r\n        public intersectsBoundingBox(ray: psgeometry.Line3D, at: psgeometry.Vec3): Boolean {\r\n            let transformedRay = this.inverseModelTransform ? ray.transform(this.inverseModelTransform) : ray;\r\n\r\n            let result = false;\r\n            for (let figureIdx in this.figures)\r\n            {\r\n                if (!result) {\r\n                    result = this.figures[figureIdx].intersectsBoundingBox(transformedRay, at);\r\n                    if (result) {\r\n                        at.assignVec(<psgeometry.Vec4>this.lastModelTransform.multiply(at.asVec4()));\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        public render(context: RenderContextWebGL) {\r\n            if (!this.filter || this.filter.passes(this, context)) {\r\n                if (this.isVisible || this.childrenVisible) {\r\n                    context.pushState(this.state);\r\n\r\n                    if (this.isVisible) {\r\n                        this.beginRender(context);\r\n                        this.renderChildren(context);\r\n                        this.endRender(context);\r\n                    } else {\r\n                        this.renderChildren(context);\r\n                    }\r\n\r\n                    let modelTransform = context.NodeTransform ? <psgeometry.Matrix4>context.NodeTransform.multiply(context.ModelTransform) : context.ModelTransform;\r\n                    if (!modelTransform.equals(this.lastModelTransform)) {\r\n                        this.inverseModelTransform = modelTransform.inverse();\r\n                        this.lastModelTransform = modelTransform;\r\n                    }\r\n\r\n                    context.popState();\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    export class IntersectionCandidate {\r\n        public sceneItem: SceneItemWebGL;\r\n\r\n        private squaredDist: number = Infinity;\r\n\r\n        constructor(sceneItem: SceneItemWebGL, squaredDist: number) {\r\n            this.sceneItem = sceneItem;\r\n            this.squaredDist = squaredDist;\r\n        }\r\n\r\n        public compare(intersectionCandidate: IntersectionCandidate) {\r\n            return this.squaredDist < intersectionCandidate.squaredDist ? -1 :\r\n                (this.squaredDist > intersectionCandidate.squaredDist ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    export class RenderState {\r\n        private parent: RenderState;\r\n\r\n        private entries: { [key: string]: any } = {};\r\n\r\n        public get Parent() {\r\n            return this.parent;\r\n        }\r\n\r\n        public set Parent(val: RenderState) {\r\n            this.parent = val;\r\n        }\r\n\r\n        private evaluate(entry: any): any {\r\n            return typeof entry == 'function' ? entry(this) : entry;\r\n        }\r\n\r\n        public contains(key: string) {\r\n            return this.entries[key] != undefined;\r\n        }\r\n\r\n        public get<T>(key: string, defaultValue: T): T {\r\n            let result = defaultValue;\r\n            this.tryGet(key, (val) => { result = val; });\r\n            return result;\r\n        }\r\n\r\n        public tryGet(key: string, lambda: (val: any) => void): boolean {\r\n            if (this.contains(key)) {\r\n                lambda(this.evaluate(this.entries[key]));\r\n                return true;\r\n            } else {\r\n                return this.parent == null ? false : this.parent.tryGet(key, lambda);\r\n            }\r\n        }\r\n\r\n        public set(key: string, value: any) {\r\n            this.entries[key] = value;\r\n        }\r\n    }\r\n\r\n    export class SceneWebGL {\r\n\r\n        private isInitialized: boolean = false;\r\n\r\n        private sceneHierarchy: SceneItemWebGL = new SceneItemWebGL(this, '');\r\n\r\n        private dirty = true;\r\n\r\n        private state = new RenderState();\r\n\r\n        public get SceneHierarchy() {\r\n            return this.sceneHierarchy;\r\n        }\r\n\r\n        public get IsInitialized() {\r\n            return this.isInitialized;\r\n        }\r\n\r\n        public set IsInitialized(value: boolean) {\r\n            this.isInitialized = value;\r\n        }\r\n\r\n        public get State() {\r\n            return this.state;\r\n        }\r\n\r\n        public initialize() {\r\n        }\r\n\r\n        public setDirty() {\r\n            this.dirty = true;\r\n        }\r\n\r\n        public isDirty() {\r\n            if (this.dirty) {\r\n                this.dirty = false;\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        public render(context: RenderContextWebGL) {\r\n            if (this.isInitialized) {\r\n\r\n                context.SceneCategory = this.getSceneCategory();\r\n\r\n                // updateRunningSequences(context);\r\n\r\n                context.pushState(this.state);\r\n\r\n                this.sceneHierarchy.render(context);\r\n\r\n                context.popState();\r\n            }\r\n        }\r\n\r\n        public addSceneItem(sceneItem: SceneItemWebGL, makeVisible: boolean) {\r\n            this.sceneHierarchy.addChild(sceneItem);\r\n            this.setDirty();\r\n        }\r\n\r\n        public getSceneItem(sceneItemID: string) {\r\n            return this.sceneHierarchy.getChild(sceneItemID);\r\n        }\r\n\r\n        public removeSceneItem(sceneItemID: string) {\r\n            this.sceneHierarchy.removeChild(sceneItemID);\r\n\r\n            this.setDirty();\r\n        }\r\n\r\n        public insertSceneItem(sceneItem: SceneItemWebGL, index: number, makeVisible: boolean) {\r\n            this.sceneHierarchy.insertChild(sceneItem, index);\r\n\r\n            this.setDirty();\r\n        }\r\n\r\n        protected getSceneCategory() {\r\n            return '';\r\n        }\r\n\r\n        public getIntersectionCandidates(ray: psgeometry.Line3D, candidates: Array<IntersectionCandidate>) {\r\n            this.sceneHierarchy.addIntersectionCandidates(ray, candidates);\r\n            candidates.sort((a, b) => { return a.compare(b); })\r\n        }\r\n\r\n        public beginFrame() {}\r\n\r\n        /** Update is called periodically (once per frame) to allow updating the state of the scene.\r\n          */\r\n        public update() {}\r\n\r\n        public endFrame() {}\r\n\r\n    }\r\n\r\n    export class Camera {\r\n        protected projectionMatrix: psgeometry.Matrix4;\r\n\r\n        protected inverseProjectionMatrix: psgeometry.Matrix4;\r\n\r\n        protected viewMatrix: psgeometry.Matrix4;\r\n\r\n        protected inverseViewMatrix: psgeometry.Matrix4;\r\n\r\n        private dirty = true;\r\n\r\n        public get ProjectionMatrix() { return this.projectionMatrix; }\r\n\r\n        public get ViewMatrix() { return this.viewMatrix; }\r\n\r\n        protected setDirty() {\r\n            this.dirty = true;\r\n        }\r\n\r\n        public isDirty() {\r\n            if (this.dirty) {\r\n                this.dirty = false;\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        public createViewMatrix(eye: psgeometry.Vec3, center: psgeometry.Vec3, up: psgeometry.Vec3): psgeometry.Matrix4 {\r\n            let z = eye.sub(center).normalize();\r\n            let x = up.cross(z).normalize();\r\n            let y = z.cross(x).normalize();\r\n\r\n            let m = new psgeometry.Matrix4([x.x, x.y, x.z, 0,\r\n            y.x, y.y, y.z, 0,\r\n            z.x, z.y, z.z, 0,\r\n                0, 0, 0, 1]);\r\n\r\n            let t = new psgeometry.Matrix4([1, 0, 0, -eye.x,\r\n                0, 1, 0, -eye.y,\r\n                0, 0, 1, -eye.z,\r\n                0, 0, 0, 1]);\r\n            return <psgeometry.Matrix4>t.multiply(m);\r\n        }\r\n\r\n        public createPerspectiveMatrix(fovy, aspect, znear, zfar): psgeometry.Matrix4 {\r\n            let ymax = znear * Math.tan(fovy * Math.PI / 360.0);\r\n            let ymin = -ymax;\r\n            let xmin = ymin * aspect;\r\n            let xmax = ymax * aspect;\r\n\r\n            return this.makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);\r\n        }\r\n\r\n        public createOrthographicMatrix(left, right, bottom, top, near, far): psgeometry.Matrix4 {\r\n            return new psgeometry.Matrix4([\r\n                2 / (right - left), 0, 0, 0,\r\n                0, 2 / (top - bottom), 0, 0,\r\n                0, 0, 2 / (near - far), 0,\r\n\r\n                (left + right) / (left - right),\r\n                (bottom + top) / (bottom - top),\r\n                (near + far) / (near - far),\r\n                1,\r\n            ]);\r\n        }\r\n\r\n        public makeFrustum(left, right, bottom, top, znear, zfar): psgeometry.Matrix4 {\r\n            let X: number = 2 * znear / (right - left);\r\n            let Y: number = 2 * znear / (top - bottom);\r\n            let A: number = (right + left) / (right - left);\r\n            let B: number = (top + bottom) / (top - bottom);\r\n            let C: number = -(zfar + znear) / (zfar - znear);\r\n            let D: number = -2 * zfar * znear / (zfar - znear);\r\n\r\n            return new psgeometry.Matrix4([\r\n                X, 0, A, 0,\r\n                0, Y, B, 0,\r\n                0, 0, C, D,\r\n                0, 0, -1, 0]);\r\n        }\r\n\r\n    }\r\n\r\n    export class ShadowCameraWebGL extends Camera {\r\n\r\n        private shadowMapWidth = 1024;\r\n\r\n        private shadowMapHeight = 1024;\r\n\r\n        private shadowFramebuffer;\r\n\r\n        private shadowDepthTexture; \r\n\r\n        private renderBuffer;\r\n\r\n\r\n        public resize(stage: StageWebGL) {\r\n\r\n            this.projectionMatrix = this.createOrthographicMatrix(-5, 5, -5, 5, -30, 30);\r\n            this.update(new psgeometry.Vec3(0, 10, 0), new psgeometry.Vec3(0, 0, 0), new psgeometry.Vec3(0, 0, -1));\r\n\r\n            this.shadowFramebuffer = stage.gl.createFramebuffer();\r\n            this.shadowDepthTexture = stage.gl.createTexture();\r\n            this.renderBuffer = stage.gl.createRenderbuffer();\r\n\r\n            let shadowTexture = new TextureAssetWebGL(stage, this.shadowDepthTexture);\r\n            stage.AssetStore.addTextureAsset('Shadow', shadowTexture);\r\n\r\n            stage.gl.bindFramebuffer(stage.gl.FRAMEBUFFER, this.shadowFramebuffer);\r\n            stage.gl.bindTexture(stage.gl.TEXTURE_2D, this.shadowDepthTexture);\r\n            stage.gl.texParameteri(stage.gl.TEXTURE_2D, stage.gl.TEXTURE_MAG_FILTER, stage.gl.LINEAR);\r\n            stage.gl.texParameteri(stage.gl.TEXTURE_2D, stage.gl.TEXTURE_MIN_FILTER, stage.gl.LINEAR);\r\n            stage.gl.texImage2D(stage.gl.TEXTURE_2D, 0, stage.gl.RGBA, this.shadowMapWidth, this.shadowMapHeight, 0, stage.gl.RGBA, stage.gl.UNSIGNED_BYTE, null);\r\n\r\n            stage.gl.bindRenderbuffer(stage.gl.RENDERBUFFER, this.renderBuffer);\r\n            stage.gl.renderbufferStorage(stage.gl.RENDERBUFFER, stage.gl.DEPTH_COMPONENT16, this.shadowMapWidth, this.shadowMapHeight);\r\n\r\n            stage.gl.framebufferTexture2D(stage.gl.FRAMEBUFFER, stage.gl.COLOR_ATTACHMENT0, stage.gl.TEXTURE_2D, this.shadowDepthTexture, 0);\r\n            stage.gl.framebufferRenderbuffer(stage.gl.FRAMEBUFFER, stage.gl.DEPTH_ATTACHMENT, stage.gl.RENDERBUFFER, this.renderBuffer);\r\n\r\n            stage.gl.bindTexture(stage.gl.TEXTURE_2D, null);\r\n            stage.gl.bindRenderbuffer(stage.gl.RENDERBUFFER, null); \r\n        }\r\n\r\n        public updateShadowArea(bbox: psgeometry.AABB2D) {\r\n            var center = bbox.center();\r\n            var extents = bbox.extents();\r\n            this.projectionMatrix = this.createOrthographicMatrix(-extents.x / 2, extents.x / 2, -extents.y / 2, extents.y / 2, -30, 30);\r\n            this.update(new psgeometry.Vec3(center.x, 10, center.y), new psgeometry.Vec3(center.x, 0, center.y), new psgeometry.Vec3(0, 0, -1));\r\n            this.setDirty();\r\n        }\r\n\r\n        public update(pos: psgeometry.Vec3, lookAt: psgeometry.Vec3, up: psgeometry.Vec3) {\r\n            this.viewMatrix = this.createViewMatrix(pos, lookAt, up);\r\n\r\n            this.setDirty();\r\n        }\r\n\r\n        public beginRender(stage: StageWebGL) {\r\n            stage.gl.bindFramebuffer(stage.gl.FRAMEBUFFER, this.shadowFramebuffer);\r\n\r\n            // Set the viewport to match\r\n            stage.gl.viewport(0, 0, this.shadowMapWidth, this.shadowMapHeight);\r\n\r\n            stage.gl.clearColor(0.2, 0.2, 0.2, 0.0);\r\n            stage.gl.clearDepth(0.0);\r\n            stage.gl.clear(stage.gl.COLOR_BUFFER_BIT | stage.gl.DEPTH_BUFFER_BIT);\r\n\r\n            stage.gl.enable(stage.gl.DEPTH_TEST);\r\n            stage.gl.enable(stage.gl.CULL_FACE);\r\n            stage.gl.frontFace(stage.gl.CCW);\r\n            stage.gl.cullFace(stage.gl.BACK);\r\n            stage.gl.depthFunc(stage.gl.GEQUAL);\r\n        }\r\n\r\n        public endRender(stage: StageWebGL) {\r\n        }\r\n\r\n    }\r\n\r\n    export class CameraWebGL extends Camera {\r\n\r\n        private currentCameraPos: psgeometry.Vec3;\r\n\r\n        private clientWidth: number = 1.0;\r\n\r\n        private clientHeight: number = 1.0;\r\n\r\n\r\n        public get ProjectionMatrix() {\r\n            return this.projectionMatrix;\r\n        }\r\n\r\n        public get ViewMatrix() {\r\n            return this.viewMatrix;\r\n        }\r\n\r\n        public resize(stage: StageWebGL) {\r\n            let realToCSSPixels = window.devicePixelRatio || 1;\r\n\r\n            this.clientWidth = stage.gl.canvas.clientWidth;\r\n            this.clientHeight = stage.gl.canvas.clientHeight;\r\n\r\n            // Lookup the size the browser is displaying the canvas in CSS pixels\r\n            // and compute a size needed to make our drawingbuffer match it in\r\n            // device pixels.\r\n            let displayWidth = Math.floor(stage.gl.canvas.clientWidth * realToCSSPixels);\r\n            let displayHeight = Math.floor(stage.gl.canvas.clientHeight * realToCSSPixels);\r\n\r\n            // Make the canvas the same size\r\n            stage.gl.canvas.width = displayWidth / realToCSSPixels;\r\n            stage.gl.canvas.height = displayHeight / realToCSSPixels;\r\n\r\n            this.projectionMatrix = this.createPerspectiveMatrix(45.0, stage.gl.canvas.clientWidth / stage.gl.canvas.clientHeight, 0.1, 200.0);\r\n            //this.projectionMatrix = this.createOrthographicMatrix(-5, 5, -5, 5, -30, 30);\r\n            this.inverseProjectionMatrix = this.projectionMatrix.inverse();\r\n            //this.viewMatrix = this.createViewMatrix(new psgeometry.Vec3(0.0, 1.8, 15.0), new psgeometry.Vec3(0.0, 0.0, 0.0), new psgeometry.Vec3(0.0, 1.0, 0.0));\r\n\r\n            this.setDirty();\r\n        }\r\n\r\n        public update(pos: psgeometry.Vec3, lookAt: psgeometry.Vec3, up: psgeometry.Vec3) {\r\n            this.currentCameraPos = pos;\r\n            this.viewMatrix = this.createViewMatrix(pos, lookAt, up);\r\n            this.inverseViewMatrix = this.viewMatrix.inverse();\r\n\r\n            this.setDirty();\r\n        }\r\n\r\n        public beginRender(stage: StageWebGL) {\r\n\r\n            // Set the viewport to match\r\n            stage.gl.viewport(0, 0, stage.gl.canvas.clientWidth, stage.gl.canvas.clientHeight);\r\n\r\n            stage.gl.bindFramebuffer(stage.gl.FRAMEBUFFER, null);\r\n\r\n            stage.gl.clearColor(0.3, 0.3, 0.3, 1.0);\r\n            stage.gl.clearDepth(1.0);\r\n            stage.gl.clear(stage.gl.DEPTH_BUFFER_BIT); // stage.gl.COLOR_BUFFER_BIT | \r\n\r\n            stage.gl.enable(stage.gl.DEPTH_TEST);\r\n            stage.gl.enable(stage.gl.CULL_FACE);\r\n            stage.gl.frontFace(stage.gl.CCW);\r\n            stage.gl.cullFace(stage.gl.BACK);\r\n            stage.gl.depthFunc(stage.gl.LEQUAL);       \r\n        }\r\n\r\n        public endRender(stage: StageWebGL) {\r\n        }\r\n\r\n        public getViewRay(clientX: number, clientY: number): psgeometry.Line3D {\r\n            let cursor = new psgeometry.Vec4(clientX / this.clientWidth * 2.0 - 1.0, 1.0 - clientY / this.clientHeight * 2.0, -1.0, 1.0);\r\n            let direction = <psgeometry.Vec4>this.inverseProjectionMatrix.multiply(cursor);\r\n            direction.w = 1.0;\r\n            let forward = this.inverseViewMatrix.multiply(direction);\r\n            return new psgeometry.Line3D(this.currentCameraPos, forward);\r\n        }\r\n\r\n    }\r\n\r\n    export class ShaderProgramWebGL {\r\n\r\n        protected isInitialized = false;\r\n\r\n        protected vertexShader: WebGLShader;\r\n\r\n        protected fragmentShader: WebGLShader;\r\n\r\n        protected program: WebGLProgram;\r\n\r\n        public get Program() {\r\n            return this.program;\r\n        }\r\n\r\n        public render(context: RenderContextWebGL, shaderInstance: ShaderInstance) {\r\n            if (this.isInitialized && this.beginRender(context, shaderInstance)) {\r\n                context.Stage.applyState(context);\r\n                this.internalRender(context, shaderInstance);\r\n                this.endRender(context, shaderInstance);\r\n            }\r\n        }\r\n\r\n        protected getAttribLocation(stage: StageWebGL, attribName: string): number {\r\n            return stage.gl.getAttribLocation(this.program, attribName);\r\n        }\r\n\r\n        protected beginRender(context: RenderContextWebGL, shaderInstance: ShaderInstance): boolean {\r\n            context.Stage.gl.useProgram(this.program);\r\n            return true;\r\n        }\r\n\r\n        protected SIZE_OF_FLOAT = 4;\r\n\r\n        protected internalRender(context: RenderContextWebGL, shaderInstance: ShaderInstance) {\r\n        }\r\n\r\n        protected endRender(context: RenderContextWebGL, shaderInstance: ShaderInstance) {\r\n        }\r\n\r\n        public initialize(stage: StageWebGL) {\r\n            this.vertexShader = stage.Tools.createShader(stage.gl.VERTEX_SHADER, this.getVertexShaderSrc());\r\n            this.fragmentShader = stage.Tools.createShader(stage.gl.FRAGMENT_SHADER, this.getFragmentShaderSrc());\r\n\r\n            this.program = stage.gl.createProgram();\r\n\r\n            stage.gl.attachShader(this.program, this.vertexShader);\r\n            stage.gl.attachShader(this.program, this.fragmentShader);\r\n\r\n            stage.gl.linkProgram(this.program);\r\n\r\n            stage.gl.detachShader(this.program, this.vertexShader);\r\n            stage.gl.detachShader(this.program, this.fragmentShader);\r\n\r\n            console.log(stage.gl.getProgramInfoLog(this.program));\r\n\r\n            this.isInitialized = true;\r\n        }\r\n\r\n        public getVertexShaderSrc(): string {\r\n            return '';\r\n        }\r\n\r\n        public getFragmentShaderSrc(): string {\r\n            return '';\r\n        }\r\n\r\n    }\r\n\r\n    export class OpaqueMeshShaderProgramWebGL extends ShaderProgramWebGL {\r\n\r\n        protected getStride() {\r\n            return this.SIZE_OF_FLOAT * 9;\r\n        }\r\n\r\n        protected internalRender(context: RenderContextWebGL, shaderInstance: ShaderInstance) {\r\n            let stage = context.Stage;\r\n\r\n            let bufferKey = shaderInstance.getReference('IndexBuffer');\r\n            if (bufferKey) {\r\n                let bufferAsset = stage.AssetStore.getBufferAsset(bufferKey);\r\n                bufferAsset.bind(stage);\r\n\r\n                bufferKey = shaderInstance.getReference('VertexBuffer');\r\n                bufferAsset = stage.AssetStore.getBufferAsset(bufferKey);\r\n\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aPosition'), 3, this.getStride(), 0);\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aNormal'), 3, this.getStride(), 3 * this.SIZE_OF_FLOAT);\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aColor'), 3, this.getStride(), 6 * this.SIZE_OF_FLOAT);\r\n\r\n                // draw triangles\r\n                let triangleCount = bufferAsset.BufferSize / this.getStride();\r\n                stage.gl.drawElements(stage.gl.TRIANGLES, triangleCount, stage.gl.UNSIGNED_INT, 0);\r\n\r\n                // bind with 0, so, switch back to normal pointer operation\r\n                //stage.gl.bindBuffer(stage.gl.ELEMENT_ARRAY_BUFFER, 0);\r\n                //stage.gl.bindBuffer(stage.gl.ARRAY_BUFFER, 0);\r\n            }\r\n        }\r\n\r\n\r\n        public getVertexShaderSrc(): string {\r\n            return `uniform mat4 uMMatrix;\r\n                uniform mat4 uVMatrix;\r\n                uniform mat4 uPMatrix;\r\n\r\n                attribute vec3 aPosition;\r\n                attribute vec3 aNormal;\r\n                attribute vec3 aColor;\r\n\r\n                varying mediump vec4 vColor;\r\n\r\n                void main()\r\n                {\r\n                   gl_Position = uPMatrix * uVMatrix * uMMatrix * vec4(aPosition, 1.0);\r\n                   vec3 normal = aNormal;\r\n                   vec4 diffuseColor = vec4(aColor, 1.0);\r\n                   vec4 ambientColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n                   vec3 lightDir = vec3(0.9, 0.7, 1.0);\r\n                   mediump float lightIntensity = clamp(dot(normalize(normal), normalize(lightDir)), 0.0, 1.0);\r\n\r\n                   vColor = vec4((aColor * 0.65 + ambientColor.rgb * 0.35)*(0.7 + lightIntensity * 0.3), 1.0);\r\n                }`;\r\n        }\r\n\r\n        public getFragmentShaderSrc(): string {\r\n            return `varying mediump vec4 vColor;\r\n\r\n                void main()\r\n                {\r\n                   gl_FragColor = vColor;\r\n                }`;\r\n        }\r\n\r\n    }\r\n\r\n    export class TransparentMeshShaderProgramWebGL extends ShaderProgramWebGL {\r\n\r\n        protected getStride() {\r\n            return this.SIZE_OF_FLOAT * 10;\r\n        }\r\n\r\n        protected internalRender(context: RenderContextWebGL, shaderInstance: ShaderInstance) {\r\n            let stage = context.Stage;\r\n\r\n            let bufferKey = shaderInstance.getReference('IndexBuffer');\r\n            if (bufferKey) {\r\n                let bufferAsset = stage.AssetStore.getBufferAsset(bufferKey);\r\n                bufferAsset.bind(stage);\r\n\r\n                bufferKey = shaderInstance.getReference('VertexBuffer');\r\n                bufferAsset = stage.AssetStore.getBufferAsset(bufferKey);\r\n\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aPosition'), 3, this.getStride(), 0);\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aNormal'), 3, this.getStride(), 3 * this.SIZE_OF_FLOAT);\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aColor'), 4, this.getStride(), 6 * this.SIZE_OF_FLOAT);\r\n\r\n                stage.gl.enable(stage.gl.BLEND);\r\n                stage.gl.blendFunc(stage.gl.SRC_ALPHA, stage.gl.ONE_MINUS_SRC_ALPHA);\r\n                stage.gl.depthMask(false);\r\n\r\n                // draw triangles\r\n                let triangleCount = bufferAsset.BufferSize / this.getStride();\r\n                stage.gl.drawElements(stage.gl.TRIANGLES, triangleCount, stage.gl.UNSIGNED_INT, 0);\r\n\r\n                stage.gl.depthMask(true);\r\n                stage.gl.disable(stage.gl.BLEND);\r\n\r\n                // bind with 0, so, switch back to normal pointer operation\r\n                //stage.gl.bindBuffer(stage.gl.ELEMENT_ARRAY_BUFFER, 0);\r\n                //stage.gl.bindBuffer(stage.gl.ARRAY_BUFFER, 0);\r\n            }\r\n        }\r\n\r\n\r\n        public getVertexShaderSrc(): string {\r\n            return `uniform mat4 uMMatrix;\r\n                uniform mat4 uVMatrix;\r\n                uniform mat4 uPMatrix;\r\n\r\n                attribute vec3 aPosition;\r\n                attribute vec3 aNormal;\r\n                attribute vec4 aColor;\r\n\r\n                varying mediump vec4 vColor;\r\n\r\n                void main()\r\n                {\r\n                   gl_Position = uPMatrix * uVMatrix * uMMatrix * vec4(aPosition, 1.0);\r\n                   vec3 normal = aNormal;\r\n                   vec4 diffuseColor = aColor;\r\n                   vec4 ambientColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n                   vec3 lightDir = vec3(0.9, 0.7, 1.0);\r\n                   mediump float lightIntensity = clamp(dot(normalize(normal), normalize(lightDir)), 0.0, 1.0);\r\n\r\n                   vColor = vec4((aColor.rgb * 0.65 + ambientColor.rgb * 0.35)*(0.7 + lightIntensity * 0.3), aColor.a);\r\n                }`;\r\n        }\r\n\r\n        public getFragmentShaderSrc(): string {\r\n            return `varying mediump vec4 vColor;\r\n\r\n                void main()\r\n                {\r\n                   gl_FragColor = vColor;\r\n                }`;\r\n        }\r\n\r\n    }\r\n\r\n    export enum TexturedMeshShaderProgramVariants {\r\n        Diffuse,\r\n        Matcap\r\n    }\r\n\r\n    export class TexturedMeshShaderProgramWebGL extends ShaderProgramWebGL {\r\n\r\n        public constructor(private variant: TexturedMeshShaderProgramVariants = TexturedMeshShaderProgramVariants.Diffuse) {\r\n            super();\r\n        }\r\n\r\n        protected getStride() {\r\n            return this.SIZE_OF_FLOAT * 11;\r\n        }\r\n\r\n        protected internalRender(context: RenderContextWebGL, shaderInstance: ShaderInstance) {\r\n            let stage = context.Stage;\r\n\r\n            let bufferKey = shaderInstance.getReference('IndexBuffer');\r\n            if (bufferKey) {\r\n                let bufferAsset = stage.AssetStore.getBufferAsset(bufferKey);\r\n                bufferAsset.bind(stage);\r\n\r\n                bufferKey = shaderInstance.getReference('VertexBuffer');\r\n                bufferAsset = stage.AssetStore.getBufferAsset(bufferKey);\r\n\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aPosition'), 3, this.getStride(), 0);\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aNormal'), 3, this.getStride(), 3 * this.SIZE_OF_FLOAT);\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aColor'), 3, this.getStride(), 6 * this.SIZE_OF_FLOAT);\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aTextureCoords'), 2, this.getStride(), 9 * this.SIZE_OF_FLOAT);\r\n\r\n                let textureKey = shaderInstance.getReference('TextureBuffer');\r\n                let textureAsset = stage.AssetStore.getTextureAsset(textureKey);\r\n                if (textureAsset) {\r\n                    textureAsset.bind(stage, this, 'uTexture0');\r\n\r\n                    // draw triangles\r\n                    let triangleCount = bufferAsset.BufferSize / this.getStride();\r\n                    stage.gl.drawElements(stage.gl.TRIANGLES, triangleCount, stage.gl.UNSIGNED_INT, 0);\r\n                }\r\n\r\n                // bind with 0, so, switch back to normal pointer operation\r\n                //stage.gl.bindBuffer(stage.gl.ELEMENT_ARRAY_BUFFER, 0);\r\n                //stage.gl.bindBuffer(stage.gl.ARRAY_BUFFER, 0);\r\n            }\r\n        }\r\n\r\n        public getVertexShaderSrc(): string {\r\n            let result = `uniform mat4 uMMatrix;\r\n                uniform mat4 uVMatrix;\r\n                uniform mat4 uPMatrix;\r\n\r\n                attribute vec3 aPosition;\r\n                attribute vec3 aNormal;\r\n                attribute vec3 aColor;\r\n                attribute vec2 aTextureCoords;\r\n\r\n                varying mediump vec4 vColor;\r\n                varying mediump vec2 vTextureCoords;\r\n                varying mediump float vLightIntensity;\r\n\r\n                void main()\r\n                {\r\n                   vec4 pos = uMMatrix * vec4(aPosition, 1.0);\r\n                   gl_Position = uPMatrix * uVMatrix * pos;\r\n                   vec3 normal = normalize(uMMatrix * vec4(aNormal, 0.0)).xyz;\r\n\r\n                   vec3 lightDir = vec3(0.9, 0.7, 1.0);\r\n                   vLightIntensity = clamp(dot(normalize(normal), normalize(lightDir)), 0.0, 1.0);\r\n\r\n                   vColor = vec4(aColor, 1.0);\r\n`;\r\n\r\n            switch (this.variant) {\r\n                case TexturedMeshShaderProgramVariants.Diffuse: result +=\r\n                    `vTextureCoords = aTextureCoords;\r\n`;\r\n                    break;\r\n                case TexturedMeshShaderProgramVariants.Matcap: result +=\r\n                    `vec3 e = normalize(pos.xyz);\r\n\t                 vec3 r = reflect(e, (uVMatrix * vec4(normal, 0.0)).xyz);\r\n\t                 mediump float m = 2. * length(vec3(r.x, r.y, r.z + 1.));\r\n\t                 vTextureCoords = r.xy / m + .5;\r\n`;\r\n                    break;\r\n            }\r\n            \r\n            result += `}`;\r\n\r\n            return result;\r\n        }\r\n\r\n        public getFragmentShaderSrc(): string {\r\n            let result = `uniform sampler2D uTexture0;\r\n\r\n                varying mediump vec4 vColor;\r\n                varying mediump vec2 vTextureCoords;\r\n                varying mediump float vLightIntensity;\r\n\r\n                void main()\r\n                {\r\n            \t    mediump vec4 texColor = texture2D(uTexture0, vec2(vTextureCoords.x, 1.0 - vTextureCoords.y));\r\n`;\r\n            switch (this.variant) {\r\n                case TexturedMeshShaderProgramVariants.Diffuse: result +=\r\n                    `gl_FragColor = vec4(clamp(texColor.xyz * (1.0 + .15 * vLightIntensity), 0.0, 1.0), texColor.a); \r\n            `;\r\n                    break;\r\n                case TexturedMeshShaderProgramVariants.Matcap: result += \r\n                    `gl_FragColor = texColor.a;   \r\n`;\r\n                    break;\r\n            }\r\n\r\n            result += `}`;\r\n\r\n            return result;\r\n        }\r\n        \r\n    }\r\n\r\n    export class ShadowTexturedMeshShaderProgramWebGL extends TexturedMeshShaderProgramWebGL {\r\n\r\n        public getVertexShaderSrc(): string {\r\n            return `uniform mat4 uMMatrix;\r\n                uniform mat4 uVMatrix;\r\n                uniform mat4 uPMatrix;\r\n\r\n                attribute vec3 aPosition;\r\n                attribute vec3 aNormal;\r\n                attribute vec3 aColor;\r\n                attribute vec2 aTextureCoords;\r\n\r\n                varying mediump float height;\r\n\r\n                void main()\r\n                {\r\n                   gl_Position = uPMatrix * uVMatrix * uMMatrix * vec4(aPosition, 1.0);\r\n                   height = (uMMatrix * vec4(aPosition, 1.0)).y;\r\n                }`;\r\n        }\r\n\r\n        public getFragmentShaderSrc(): string {\r\n            return `uniform sampler2D uTexture0;\r\n                varying mediump float height;\r\n\r\n\r\n                void main()\r\n                {\r\n                    gl_FragColor = vec4(.2, .2, .2, clamp(1.0 - (height / 3.0), 0.0, 1.0)); \r\n                }`;\r\n        }\r\n\r\n    }\r\n\r\n    export class MatCapShaderProgramWebGL extends ShaderProgramWebGL {\r\n\r\n        protected getStride() {\r\n            return this.SIZE_OF_FLOAT * 11;\r\n        }\r\n\r\n        protected internalRender(context: RenderContextWebGL, shaderInstance: ShaderInstance) {\r\n            let stage = context.Stage;\r\n\r\n            let bufferKey = shaderInstance.getReference('IndexBuffer');\r\n            if (bufferKey) {\r\n                let bufferAsset = stage.AssetStore.getBufferAsset(bufferKey);\r\n                bufferAsset.bind(stage);\r\n\r\n                bufferKey = shaderInstance.getReference('VertexBuffer');\r\n                bufferAsset = stage.AssetStore.getBufferAsset(bufferKey);\r\n\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aPosition'), 3, this.getStride(), 0);\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aNormal'), 3, this.getStride(), 3 * this.SIZE_OF_FLOAT);\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aColor'), 3, this.getStride(), 6 * this.SIZE_OF_FLOAT);\r\n                bufferAsset.bindInterleaved(stage, this.getAttribLocation(stage, 'aTextureCoords'), 2, this.getStride(), 9 * this.SIZE_OF_FLOAT);\r\n\r\n                let textureKey = shaderInstance.getReference('TextureBuffer');\r\n                let textureAsset = stage.AssetStore.getTextureAsset(textureKey);\r\n                if (textureAsset) {\r\n                    textureAsset.bind(stage, this, 'uTexture0');\r\n\r\n                    let color = context.State.get('Color', psgeometry.Vec4.One);\r\n                    let uColorLoc = stage.gl.getUniformLocation(this.program, 'uColor');\r\n                    stage.gl.uniform4fv(uColorLoc, color.elements()); \r\n\r\n                    // draw triangles\r\n                    let triangleCount = bufferAsset.BufferSize / this.getStride();\r\n                    stage.gl.drawElements(stage.gl.TRIANGLES, triangleCount, stage.gl.UNSIGNED_INT, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        public getVertexShaderSrc(): string {\r\n            let result = `uniform mat4 uMMatrix;\r\n                uniform mat4 uVMatrix;\r\n                uniform mat4 uPMatrix;\r\n\r\n                attribute vec3 aPosition;\r\n                attribute vec3 aNormal;\r\n                attribute vec3 aColor;\r\n                attribute vec2 aTextureCoords;\r\n\r\n                varying mediump vec4 vColor;\r\n                varying mediump vec2 vTextureCoords;\r\n\r\n                void main()\r\n                {\r\n                   vec4 pos = uMMatrix * vec4(aPosition, 1.0);\r\n                   gl_Position = uPMatrix * uVMatrix * pos;\r\n                   vec3 normal = normalize(uMMatrix * vec4(aNormal, 0.0)).xyz;\r\n\r\n                   vec3 e = normalize(pos.xyz);\r\n\t               vec3 r = reflect(e, (uVMatrix * vec4(normal, 0.0)).xyz);\r\n\t               mediump float m = 2. * length(vec3(r.x, r.y, r.z + 1.));\r\n\t               vTextureCoords = r.xy / m + .5;\r\n                }`;\r\n\r\n            return result;\r\n        }\r\n\r\n        public getFragmentShaderSrc(): string {\r\n            let result = `uniform sampler2D uTexture0;\r\n                uniform mediump vec4 uColor;\r\n\r\n                varying mediump vec4 vColor;\r\n                varying mediump vec2 vTextureCoords;\r\n\r\n                void main()\r\n                {\r\n            \t    mediump vec4 texColor = texture2D(uTexture0, vec2(vTextureCoords.x, 1.0 - vTextureCoords.y));\r\n                    //mediump vec3 green = vec3(0, 0.44, 0.09);\r\n                    //mediump vec3 green = vec3(0.69, 0.34, 0.00);  //or\r\n                    //mediump vec3 green = vec3(0.02, 0.31, 0.06);  // g\r\n                    //mediump vec3 green = vec3(0.31, 0.02, 0.06);  // r\r\n                    //mediump vec3 green = vec3(0.02, 0.17, 0.31);  // b\r\n                    mediump float colorFac = (texColor.x - texColor.y) / 0.65;\r\n                    mediump float whiteFac = (1.0 - colorFac) * 0.75;\r\n                    mediump vec3 color = vec3(whiteFac, whiteFac, whiteFac) + colorFac * uColor.rgb;\r\n\r\n                    gl_FragColor = vec4(color, texColor.a * uColor.a);   \r\n            }`;\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    class RenderStateStack {\r\n        private modelTransform: Array<psgeometry.Matrix4> = [psgeometry.Matrix4.Identity];\r\n\r\n        private stack: Array<RenderState> = [];\r\n\r\n        /** Top of the state stack.\r\n          */\r\n        public get Top() {\r\n            return this.stack[this.stack.length - 1];\r\n        }\r\n\r\n        /** Determines the current model transformation.\r\n          */\r\n        public get CurrentModelTransform() {\r\n            return this.modelTransform[this.modelTransform.length - 1];\r\n        }\r\n\r\n        /** Pushes the specified state on the state stack.\r\n          */\r\n        public pushState(state: RenderState) {\r\n            state.Parent = this.stack.length == 0 ? null : this.Top;\r\n            this.stack.push(state);\r\n            if (state.contains('ModelTransform')) {\r\n                let modelTransform = state.get('ModelTransform', psgeometry.Matrix4.Identity);\r\n                this.modelTransform.push(<psgeometry.Matrix4>this.CurrentModelTransform.multiply(modelTransform));\r\n            }\r\n            else {\r\n                this.modelTransform.push(this.CurrentModelTransform);\r\n            }\r\n        }\r\n\r\n        /** Removes the top element from the state stack.\r\n          */\r\n        public popState() {\r\n            this.Top.Parent = null;\r\n            this.stack.pop();\r\n            this.modelTransform.pop();\r\n        }\r\n    }\r\n\r\n    /** A RenderContext instance is used to pass environment data to SceneItems during the rendition process.\r\n\t  *\r\n\t  * Besides the Stage that the SceneItems are being rendered to, the render context is the owner of a state stack\r\n\t  * that may be updated by SceneItems and that is consequently used by ShaderPrograms to set shader data and resources (like model transformation\r\n\t  * and auxiliary data). As SceneItems are organized in a hierarchical way, the current state may be defined by the current SceneItem, but\r\n\t  * also by previously traversed SceneItems in the scene hierarchy.\r\n\t  */\r\n    export class RenderContextWebGL {\r\n        private stage: StageWebGL;\r\n\r\n        private camera: Camera;\r\n\r\n        private shaderProgram: ShaderProgramWebGL;\r\n\r\n        private sceneCategory: string = '';\r\n\r\n        private stateStack: RenderStateStack = new RenderStateStack();\r\n\r\n        private modelTransform: psgeometry.Matrix4 = null;\r\n\r\n        private nodeTransform: psgeometry.Matrix4 = null;\r\n\r\n        private phase: string = '';\r\n\r\n        public get Phase() { return this.phase; }\r\n\r\n        public set Phase(value: string) { this.phase = value; }\r\n\r\n        /** Returns the current state that is composed of previously set state values.\r\n          */\r\n        public get State() {\r\n            return this.stateStack.Top;\r\n        }\r\n\r\n        /** Pushes the specified state on the state stack.\r\n          */\r\n        public pushState(state: RenderState) {\r\n            this.stateStack.pushState(state);\r\n        }\r\n\r\n        /** Removes the top element from the state stack.\r\n          */\r\n        public popState() {\r\n            this.stateStack.popState();\r\n        }\r\n\r\n        public get ModelTransform() {\r\n            return this.stateStack.CurrentModelTransform;\r\n        }\r\n\r\n        /** The current scene's category.\r\n          */\r\n        public get SceneCategory() {\r\n            return this.sceneCategory;\r\n        }\r\n\r\n        /** The current scene's category.\r\n          */\r\n        public set SceneCategory(value: string) {\r\n            this.sceneCategory = value;\r\n        }\r\n\r\n        /** The stage the SceneItems are being rendered to.\r\n          */\r\n        public get Stage() {\r\n            return this.stage;\r\n        }\r\n\r\n        /** The stage the SceneItems are being rendered to.\r\n          */\r\n        public set Stage(value: StageWebGL) {\r\n            this.stage = value;\r\n        }\r\n\r\n        public get Camera() {\r\n            return this.camera;\r\n        }\r\n\r\n        public set Camera(value: Camera) {\r\n            this.camera = value;\r\n        }\r\n\r\n        /** The current shader program.\r\n          */\r\n        public get ShaderProgram() {\r\n            return this.shaderProgram;\r\n        }\r\n\r\n        /** The current shader program.\r\n          */\r\n        public set ShaderProgram(value: ShaderProgramWebGL) {\r\n            this.shaderProgram = value;\r\n        }\r\n\r\n        public get NodeTransform() {\r\n            return this.nodeTransform;\r\n        }\r\n\r\n        public set NodeTransform(value: psgeometry.Matrix4) {\r\n            this.nodeTransform = value;\r\n        }\r\n    }\r\n\r\n    export class StageWebGL {\r\n\r\n        public gl: WebGLRenderingContext;\r\n\r\n        private canvas: HTMLCanvasElement;\r\n\r\n        private camera: CameraWebGL;\r\n\r\n        private shadowCamera: ShadowCameraWebGL;\r\n\r\n        private context: RenderContextWebGL;\r\n\r\n        private assetFactory: AssetFactoryWebGL;\r\n\r\n        private assetStore: AssetStoreWebGL;\r\n\r\n        private phaseSpecificShaderPrograms: { [index: string]: { [index: string]: ShaderProgramWebGL } } = {};\r\n\r\n        private shaderPrograms: { [index: string]: ShaderProgramWebGL } = {};\r\n\r\n        private tools: ToolsWebGL = new ToolsWebGL(this);\r\n\r\n        public get Canvas() {\r\n            return this.canvas;\r\n        }\r\n\r\n        public get Camera() {\r\n            return this.camera;\r\n        }\r\n\r\n        public get Tools() {\r\n            return this.tools;\r\n        }\r\n\r\n        public get AssetFactory() {\r\n            return this.assetFactory;\r\n        }\r\n\r\n        public get AssetStore() {\r\n            return this.assetStore;\r\n        }\r\n\r\n        constructor(canvasElementId: string) {\r\n            try {\r\n                this.context = new RenderContextWebGL();\r\n                this.context.Stage = this;\r\n\r\n                this.assetStore = new AssetStoreWebGL();\r\n                this.assetFactory = new AssetFactoryWebGL(this);\r\n\r\n                this.canvas = <HTMLCanvasElement>document.getElementById(canvasElementId);\r\n\r\n                if (this.canvas) {\r\n                    this.gl = <WebGLRenderingContext>(this.canvas.getContext('webgl') || (this.canvas.getContext('experimental-webgl')));\r\n                    let ext = this.gl.getExtension('OES_element_index_uint');\r\n\r\n                    window.addEventListener('resize', () => {\r\n                        this.resize();\r\n                    });\r\n                }\r\n\r\n                if (!this.gl) {\r\n                    alert('Unable to initialize WebGL. Your browser may not support it.');\r\n                }\r\n            }\r\n            catch (e) {\r\n                alert('Unable to initialize WebGL. Your browser may not support it. Error: ' + e);\r\n            }\r\n        }\r\n\r\n        public initialize() {\r\n            this.shadowCamera = new ShadowCameraWebGL();\r\n            this.shadowCamera.resize(this);\r\n            this.camera = new CameraWebGL();\r\n            this.camera.resize(this);\r\n            this.resize();\r\n        }\r\n\r\n        public updateShadowArea(box: psgeometry.AABB2D) {\r\n            this.shadowCamera.updateShadowArea(box);\r\n        }\r\n\r\n        public applyState(context: RenderContextWebGL) {\r\n            let program = context.ShaderProgram.Program;\r\n\r\n            let resultingModelTransformation = psgeometry.Matrix4.Identity;\r\n            if (context.ModelTransform && context.NodeTransform) {\r\n                resultingModelTransformation = <psgeometry.Matrix4>context.NodeTransform.multiply(context.ModelTransform);\r\n            } else if (context.ModelTransform) {\r\n                resultingModelTransformation = context.ModelTransform;\r\n            } else if (context.NodeTransform) {\r\n                resultingModelTransformation = context.NodeTransform;\r\n            }\r\n\r\n            let mMatrixLoc = this.gl.getUniformLocation(program, 'uMMatrix');\r\n            this.gl.uniformMatrix4fv(mMatrixLoc, false, resultingModelTransformation.transpose().elements);\r\n            let vMatrixLoc = this.gl.getUniformLocation(program, 'uVMatrix');\r\n            this.gl.uniformMatrix4fv(vMatrixLoc, false, context.Camera.ViewMatrix.transpose().elements);\r\n            let pMatrixLoc = this.gl.getUniformLocation(program, 'uPMatrix');\r\n            this.gl.uniformMatrix4fv(pMatrixLoc, false, context.Camera.ProjectionMatrix.transpose().elements); \r\n        }\r\n\r\n        public render(scene: SceneWebGL) {\r\n            if (scene.isDirty() || this.camera.isDirty() || this.shadowCamera.isDirty()) {\r\n\r\n                this.context.Phase = 'Shadow';\r\n                this.context.Camera = this.shadowCamera;\r\n                this.shadowCamera.beginRender(this);\r\n                scene.render(this.context);\r\n                this.shadowCamera.endRender(this);\r\n\r\n                this.context.Phase = '';\r\n                this.context.Camera = this.camera;\r\n                this.camera.beginRender(this);\r\n                scene.render(this.context);\r\n                this.camera.endRender(this);\r\n            }\r\n        }\r\n\r\n        public registerShaderProgram(shaderProgramKey: string, shaderProgram: ShaderProgramWebGL) {\r\n            this.shaderPrograms[shaderProgramKey] = shaderProgram;\r\n        }\r\n\r\n        public registerPhaseSpecificShaderProgram(phaseKey: string, shaderProgramKey: string, shaderProgram: ShaderProgramWebGL) {\r\n            let phase = this.phaseSpecificShaderPrograms[phaseKey];\r\n            if (!phase) {\r\n                phase = {};\r\n                this.phaseSpecificShaderPrograms[phaseKey] = phase;\r\n            }\r\n\r\n            phase[shaderProgramKey] = shaderProgram;\r\n        }\r\n\r\n        public getShaderProgram(context, shaderProgramKey: string) {\r\n            let result;\r\n\r\n            if (context.phase) {\r\n                let phase = this.phaseSpecificShaderPrograms[context.phase];\r\n                if (phase) {\r\n                    result = phase[shaderProgramKey];\r\n                }\r\n            } \r\n\r\n            return result || this.shaderPrograms[shaderProgramKey];\r\n        }\r\n\r\n        private resize() {\r\n            this.canvas.width = this.canvas.parentElement.offsetWidth;\r\n            this.canvas.height = this.canvas.parentElement.offsetHeight;\r\n            this.camera.resize(this);\r\n        }\r\n\r\n    }\r\n\r\n    export enum ConnectionState {\r\n        Ready,\r\n        Connecting,\r\n        Connected,\r\n        Error\r\n    };\r\n\r\n    export abstract class ServerConnection {\r\n\r\n        protected state: ConnectionState;\r\n\r\n        protected handleConnected: (event: Event) => void;\r\n\r\n        protected handleMessage: (Event: MessageEvent) => void;\r\n\r\n        public get IsConnected() {\r\n            return this.state == ConnectionState.Connected;\r\n        }\r\n\r\n        public constructor() {\r\n            this.state = ConnectionState.Ready;\r\n        }\r\n\r\n        public abstract connect();\r\n\r\n        public abstract disconnect();\r\n\r\n        public abstract send(data: any);\r\n\r\n        public onMessage(callback: (event: MessageEvent) => void) {\r\n            this.handleMessage = callback;\r\n        }\r\n\r\n        public onConnected(callback: (event: Event) => void) {\r\n            this.handleConnected = callback;\r\n        }\r\n\r\n    }\r\n\r\n    export class SignalRServerConnection extends ServerConnection {\r\n\r\n        private connection: HubConnection;\r\n\r\n        public constructor() {\r\n            super();\r\n\r\n            this.connection = new HubConnectionBuilder()\r\n                .withUrl('/api/state')\r\n                .configureLogging(LogLevel.Trace)\r\n                //.withHubProtocol(<any>(new MessagePackHubProtocol()))\r\n                .build();\r\n\r\n            this.connection.on('msg', (data) => {\r\n                if (this.handleMessage) {\r\n                    let msg = new MessageEvent('binary', { data: data });\r\n                    this.handleMessage(msg);\r\n                }\r\n            });\r\n        }\r\n\r\n        public connect() {\r\n            this.state = ConnectionState.Connecting;\r\n            this.connection.start()\r\n                .then(() => {\r\n                    if (this.handleConnected) {\r\n                        this.state = ConnectionState.Connected;\r\n                        this.handleConnected(new Event('connected'));\r\n                    }\r\n                })\r\n                .catch((e) => {\r\n                    this.state = ConnectionState.Error;\r\n                });\r\n        }\r\n\r\n        public disconnect() {\r\n            this.connection.stop()\r\n                .then(() => {\r\n                    this.state = ConnectionState.Ready;\r\n                })\r\n                .catch(() => {\r\n                    this.state = ConnectionState.Error;\r\n                });\r\n        }\r\n\r\n        public send(data: any) {\r\n            this.connection.invoke('Msg', data);\r\n        }\r\n\r\n    }\r\n\r\n    export class WebSocketServerConnection extends ServerConnection {\r\n        \r\n        private websocket: WebSocket;\r\n\r\n        public connect(url?: string) {\r\n            if (this.state == ConnectionState.Ready || this.state == ConnectionState.Error) {\r\n                let uri = url ? url : 'ws://' + window.location.host + '/api/scene';\r\n                this.state = ConnectionState.Connecting;\r\n                this.websocket = new WebSocket(uri);\r\n                this.websocket.binaryType = 'arraybuffer';\r\n                this.websocket.onopen = (event: Event) => {\r\n                    this.state = ConnectionState.Connected;\r\n                    console.log('websocket connected.')\r\n                    if (this.handleConnected) {\r\n                        this.handleConnected(event);\r\n                    }\r\n                };\r\n                this.websocket.onclose = (event) => {\r\n                    console.log('websocket closed.');\r\n                    this.state = ConnectionState.Ready;\r\n                };\r\n                this.websocket.onerror = (event) => {\r\n                    this.state = ConnectionState.Error;\r\n                    console.log('websocket error.')\r\n                };\r\n                this.websocket.onmessage = (event) => {\r\n                    if (this.handleMessage) {\r\n                        this.handleMessage(event);\r\n                    }\r\n                };\r\n            } else {\r\n            }\r\n        }\r\n\r\n        public disconnect() {\r\n            this.websocket.close();\r\n        }\r\n\r\n        public send(data: any) {\r\n            this.websocket.send(data);\r\n        }\r\n    }\r\n\r\n    export class Tool {\r\n\r\n        protected interfaceController: InterfaceController;\r\n\r\n        public enter(interfaceController: InterfaceController) {\r\n            this.interfaceController = interfaceController;\r\n        }\r\n\r\n        public leave() { }\r\n\r\n        public handleKeyUp(e: JQuery.Event): boolean { return false; }\r\n\r\n        public handleMouseMove(e: JQuery.Event, x: number, y: number) { }\r\n\r\n        public handleMouseDown(e: JQuery.Event) { }\r\n\r\n        public handleMouseUp(e: JQuery.Event) { }\r\n\r\n        public handleDrag(e: JQuery.Event, startX: number, startY: number, dX: number, dY: number) { }\r\n\r\n        public handleMouseWheel(e: JQuery.Event) { }\r\n\r\n        public handleClick(e: JQuery.Event, x: number, y: number) { }\r\n\r\n    }\r\n\r\n    export class InterfaceController {\r\n\r\n        private tools: Array<Tool> = [];\r\n\r\n        private hasTool() {\r\n            return this.tools.length > 0;\r\n        }\r\n\r\n        public get CurrentTool(): Tool {\r\n            return this.hasTool() ? this.tools[this.tools.length - 1] : null;\r\n        }\r\n\r\n        private leftButton = 0;\r\n\r\n        private leftButtonDown: boolean = false;\r\n\r\n        private startX: number = NaN;\r\n\r\n        private startY: number = NaN;\r\n\r\n        private lastX: number = NaN;\r\n\r\n        private lastY: number = NaN;\r\n\r\n        private target: JQuery;\r\n\r\n        public onMove: (e: JQuery.Event, x: number, y: number) => void = null;\r\n\r\n        public onDrag: (e: JQuery.Event, dX: number, dY: number) => void = null;\r\n\r\n        public onMouseWheel: (e: JQuery.Event) => void = null;\r\n\r\n        constructor() {\r\n        }\r\n\r\n        public bindEvents(target: JQuery) {\r\n            this.target = target;\r\n\r\n            $(target).on('mousewheel', (e) => {\r\n                this.mouseWheel(e);\r\n            });\r\n\r\n            $(target).on('mousedown touchstart', (e) => {\r\n                this.mouseDown(e);\r\n                e.preventDefault();\r\n            });\r\n\r\n            if (!(<any>target).setCapture) {\r\n                $(document).on('mousemove touchmove', (e) => {\r\n                    this.mouseMove(e);\r\n                });\r\n            } else {\r\n                $(target).on('mousemove touchmove', (e) => {\r\n                    this.mouseMove(e);\r\n                });\r\n            }\r\n\r\n            $(document).on('mouseup touchend touchcancel', (e) => {\r\n                this.mouseUp(e);\r\n                e.preventDefault();\r\n            });\r\n\r\n            $(target).on('losecapture', (e) => {\r\n                this.mouseUp(e);\r\n                e.preventDefault();\r\n            });\r\n\r\n            $(document).on('keyup', (e) => {\r\n                if (this.keyUp(e)) {\r\n                    e.preventDefault();\r\n                }\r\n            });\r\n        }\r\n\r\n        private updateLastPosition(e: JQuery.Event) {\r\n            this.lastX = e.clientX;\r\n            this.lastY = e.clientY;\r\n        }\r\n\r\n        public pushTool(tool: Tool) {\r\n            if (this.CurrentTool) {\r\n                this.CurrentTool.leave();\r\n            }\r\n\r\n            this.tools.push(tool);\r\n\r\n            tool.enter(this);\r\n        }\r\n\r\n        public popTool() {\r\n            if (this.tools.length > 0) {\r\n                this.tools[this.tools.length - 1].leave();\r\n                this.tools.pop();\r\n            }\r\n            if (this.tools.length > 0) {\r\n                this.tools[this.tools.length - 1].enter(this);\r\n            }\r\n        }\r\n\r\n        private keyUp(e: JQuery.Event): boolean {\r\n            if (this.hasTool()) {\r\n                return this.CurrentTool.handleKeyUp(e);\r\n            } else {\r\n                return false;\r\n            }\r\n\r\n        }\r\n\r\n        private mouseDown(e: JQuery.TriggeredEvent) {\r\n            if (e.button == this.leftButton) {\r\n                this.leftButtonDown = true;\r\n                this.startX = e.clientX;\r\n                this.startY = e.clientY;\r\n                this.updateLastPosition(e);\r\n                if (e.target.setCapture) e.target.setCapture();\r\n            }\r\n\r\n            if (this.hasTool() && !e.ctrlKey) {\r\n                this.CurrentTool.handleMouseDown(e);\r\n            } \r\n        }\r\n\r\n        private mouseMove(e: JQuery.Event) {\r\n            if (this.hasTool() && !e.ctrlKey) {\r\n                if (this.leftButtonDown) {\r\n                    this.CurrentTool.handleDrag(e, this.startX, this.startY, e.clientX - this.lastX, e.clientY - this.lastY);\r\n                } \r\n                this.CurrentTool.handleMouseMove(e, e.clientX, e.clientY);\r\n                \r\n            } else {\r\n                if (this.leftButtonDown) {\r\n                    this.drag(e, e.clientX - this.lastX, e.clientY - this.lastY);\r\n                } else {\r\n                    this.onMove(e, e.clientX, e.clientY);\r\n                }\r\n            }\r\n\r\n            if (this.leftButtonDown) {\r\n                this.updateLastPosition(e);\r\n            }\r\n        }\r\n\r\n        private mouseUp(e: JQuery.TriggeredEvent) {\r\n            let updatePosition = false;\r\n            if (e.button == this.leftButton) {\r\n                this.leftButtonDown = false;\r\n                updatePosition = true;\r\n\r\n                if (e.target.releaseCapture) e.target.releaseCapture();\r\n            }\r\n\r\n            if (this.hasTool() && !e.ctrlKey) {\r\n                this.CurrentTool.handleMouseUp(e);\r\n            } else {\r\n                if (updatePosition) {\r\n                    this.updateLastPosition(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        private drag(e: JQuery.Event, dX: number, dY: number) {\r\n            if (this.onDrag) {\r\n                this.onDrag(e, dX, dY);\r\n            }\r\n        }\r\n\r\n        private mouseWheel(e: JQuery.Event) {\r\n            if (this.hasTool() && !e.ctrlKey) {\r\n                this.CurrentTool.handleMouseWheel(e);\r\n            } else {\r\n                if (this.onMouseWheel) {\r\n                    this.onMouseWheel(e);\r\n                }\r\n                e.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    export class CameraController {\r\n        private stage: StageWebGL;\r\n        private camera: CameraWebGL;\r\n        private connection: ServerConnection;\r\n        private radius: number = 20.0;\r\n        private yaw: number = 0.0;\r\n        private pitch: number = 0.0;\r\n        private center: psgeometry.Vec3;\r\n\r\n        private dragDivisor = 100.0;\r\n        private rotateDivisor = 200.0;\r\n\r\n        public get Yaw() {\r\n            return this.yaw;\r\n        }\r\n\r\n        public set Yaw(value: number) {\r\n            this.yaw = value;\r\n            this.updateCamera();\r\n        }\r\n\r\n        constructor(stage: StageWebGL, camera: CameraWebGL, interfaceController: InterfaceController, connection: ServerConnection) {\r\n            this.stage = stage;\r\n            this.camera = camera;\r\n            this.connection = connection;\r\n\r\n            interfaceController.bindEvents($(stage.Canvas));\r\n            interfaceController.onDrag = (e, dX, dY) => {\r\n                this.drag(e, dX, dY);\r\n            };\r\n\r\n            interfaceController.onMouseWheel = (e) => {\r\n                this.mouseWheel(e);\r\n            };\r\n\r\n            interfaceController.onMove = (e, x, y) => {\r\n                this.move(e, x, y);\r\n            };\r\n\r\n            this.center = new psgeometry.Vec3(0.0, 0.0, 0.0);\r\n\r\n            this.updateCamera();\r\n        }\r\n\r\n        public construct(radius: number, pitch: number, yaw: number) {\r\n            this.radius = radius;\r\n            this.pitch = pitch;\r\n            this.yaw = yaw;\r\n\r\n            this.updateCamera();\r\n        }\r\n\r\n        private mouseWheel(e: JQuery.Event) {\r\n            if (e.shiftKey) {\r\n                let d = this.getViewDir().multiply((<any>e).deltaY || (<any>e).deltaX);\r\n                this.center = this.center.sub(d);\r\n            } else {\r\n                this.radius += (<any>e).deltaY * Math.log(this.radius + 1) / 2;\r\n                this.radius = Math.max(0.01, this.radius);\r\n            }\r\n            this.updateCamera();\r\n        }\r\n\r\n        private move(e: JQuery.Event, x: number, y: number) {\r\n        }\r\n\r\n        private drag(e: JQuery.Event, dX: number, dY: number) {\r\n\r\n            if (e.shiftKey) {\r\n                let x = this.getViewPlaneX();\r\n                let y = this.getViewPlaneY();\r\n                this.center = this.center\r\n                    .add(x.multiply(dX / this.dragDivisor))\r\n                    .add(y.multiply(dY / this.dragDivisor));\r\n            } else {\r\n                this.yaw -= dX / this.rotateDivisor;\r\n                this.pitch = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, this.pitch - dY / this.rotateDivisor));\r\n            }\r\n\r\n            this.updateCamera();\r\n        }\r\n\r\n        private getViewPlaneX() {\r\n            let q, r, v;\r\n\r\n            v = new psgeometry.Vec3(-1.0, 0.0, 0.0);\r\n            q = new psgeometry.Quaternion();\r\n            r = new psgeometry.Quaternion();\r\n            q.setFromAxisAngle(new psgeometry.Vec3(0.0, 1.0, 0.0), this.yaw);\r\n            r.setFromAxisAngle(new psgeometry.Vec3(1.0, 0.0, 0.0), this.pitch);\r\n            v = v.applyQuaternion(r);\r\n            v = v.applyQuaternion(q);\r\n\r\n            return v; //.add(this.center);\r\n        }\r\n\r\n        private getViewPlaneY() {\r\n            let q, r, v;\r\n\r\n            v = new psgeometry.Vec3(0.0, 1.0, 0.0);\r\n            q = new psgeometry.Quaternion();\r\n            r = new psgeometry.Quaternion();\r\n            q.setFromAxisAngle(new psgeometry.Vec3(0.0, 1.0, 0.0), this.yaw);\r\n            r.setFromAxisAngle(new psgeometry.Vec3(1.0, 0.0, 0.0), this.pitch);\r\n            v = v.applyQuaternion(r);\r\n            v = v.applyQuaternion(q);\r\n\r\n            return v; //.add(this.center);\r\n        }\r\n\r\n        private getViewDir(): psgeometry.Vec3 {\r\n            let q, r, v;\r\n\r\n            v = new psgeometry.Vec3(0.0, 0.0, -1.0);\r\n            q = new psgeometry.Quaternion();\r\n            r = new psgeometry.Quaternion();\r\n            q.setFromAxisAngle(new psgeometry.Vec3(0.0, 1.0, 0.0), this.yaw);\r\n            r.setFromAxisAngle(new psgeometry.Vec3(1.0, 0.0, 0.0), this.pitch);\r\n            v = v.applyQuaternion(r);\r\n            v = v.applyQuaternion(q);\r\n\r\n            return v; //.add(this.center);\r\n        }\r\n\r\n        private getCameraPos() {\r\n            let q, r, v;\r\n\r\n            v = new psgeometry.Vec3(0.0, 0.0, this.radius);\r\n            q = new psgeometry.Quaternion();\r\n            r = new psgeometry.Quaternion();\r\n            q.setFromAxisAngle(new psgeometry.Vec3(0.0, 1.0, 0.0), this.yaw);\r\n            r.setFromAxisAngle(new psgeometry.Vec3(1.0, 0.0, 0.0), this.pitch);\r\n            v = v.applyQuaternion(r);\r\n            v = v.applyQuaternion(q);\r\n\r\n            return v.add(this.center);\r\n        }\r\n\r\n        private updateCamera() {\r\n            this.camera.update(this.getCameraPos(), this.center, new psgeometry.Vec3(0.0, 1.0, 0.0));\r\n        }\r\n    }\r\n\r\n    export class CommonMessageTypes {\r\n        public static AppStateDelta = 0x0100;\r\n        public static ServerHandshake = 0x0101;\r\n        public static ClientHandshake = 0x0102;\r\n        public static ClientConfirmation = 0x0103;\r\n        public static AppStateInitialization = 0x104;\r\n        public static AnchorRequest = 0x01fe;\r\n        public static SharedAnchor = 0x01ff;\r\n    }\r\n\r\n    export class NetworkChannelMessage {\r\n\r\n        public static HeaderSize = 8;\r\n\r\n        private messageType: number = CommonMessageTypes.AppStateDelta;\r\n\r\n        private content: Uint8Array;\r\n\r\n        public get Content() {\r\n            return this.content;\r\n        }\r\n\r\n        public get MessageType() {\r\n            return this.messageType;\r\n        }\r\n\r\n        public static FromBuffer(buffer: Uint8Array) {\r\n            let result = new NetworkChannelMessage();\r\n            result.content = buffer;\r\n            return result;\r\n        }\r\n\r\n        public get HasPayload() {\r\n            return this.content.byteLength > NetworkChannelMessage.HeaderSize;\r\n        }\r\n\r\n        public get PayloadSize() {\r\n            return this.content.byteLength - NetworkChannelMessage.HeaderSize;\r\n        }\r\n    \r\n    }\r\n\r\n}\r\n","/// ModelStage Â© 2018 Plansysteme GmbH, Hamburg, Germany. All rights reserved.\r\n\r\nimport { psgeometry } from './ps-geometry';\r\nimport { modelstageweb } from './mx-common';\r\n\r\nexport module modelstageappstate {\r\n\r\n    /** The base class for local app state storage.\r\n      *\r\n      * App state data is organized in clusters. Each cluster has a distinct data layout comparable to a struct data type.\r\n      * A cluster can store and manage multiple values (AppStateEntry). Depending on the nature of the data, it can be global\r\n      * (shared among all peers) or local (each peer has its own copy of the cluster and is aware of the remote peer's instances).\r\n      * Besides that, global as well as local clusters can be single-instance or multi-instance. Global, single-instance data exists\r\n      * only once. Global, multi-instance data is shared among all peers, but can consist of multiple instances of the same \r\n      * \"record\". Each instance has a peer ID and an instance ID both ID fields together build a \"globally\" unique ID. For\r\n      * local, single-instance clusters, each peer may or may not have a single instance of the cluster, for local, multi-instance\r\n      * clusters, each peer may have zero or more instances of the cluster, again identified by a combination of a peer ID and an\r\n      * instance ID.\r\n      */\r\n    export class AppStateBase {\r\n        private clusterManagers: { [key: string]: AppStateClusterManagerBase } = {};\r\n\r\n        private localPeerID: string;\r\n\r\n        public get LocalPeerID(): string {\r\n            return this.localPeerID;\r\n        }\r\n\r\n        public set LocalPeerID(value: string) {\r\n            this.localPeerID = value;\r\n        }\r\n\r\n        public getClusterManager(key: string) {\r\n            return this.clusterManagers[key];\r\n        }\r\n\r\n        /** Adds a certain cluster type (global/local, single/multi) to the app state.\r\n          */\r\n        public addCluster(key: string, cluster: AppStateClusterManagerBase) {\r\n            this.clusterManagers[key] = cluster;\r\n\r\n        }\r\n\r\n        /** Starts the transactional phase of the app state. Changes to entries and their values may only be carried out\r\n          * during the transactional phase of the app state.\r\n          */\r\n        public beginTransaction() {\r\n            for (let clusterManagerKey in this.clusterManagers) {\r\n                this.clusterManagers[clusterManagerKey].beginTransaction();\r\n            }\r\n        }\r\n\r\n        /** Ends the transactional phase of the app state. Afterwards, the synchronisation takes place. To ensure that local state\r\n          * changes aren't missed, an exception is thrown if the state is not transactional when entries or their values are being changed.\r\n          */\r\n        public endTransaction() {\r\n            for (let clusterManagerKey in this.clusterManagers) {\r\n                this.clusterManagers[clusterManagerKey].endTransaction();\r\n            }\r\n        }\r\n\r\n        /** Applies app state changes to the view state of the application. This method is being called after all local changes have\r\n          * been carried out (the \"transactional phase\") and after the synchronisation took place. Therefore, all changes for the current\r\n          * update cycle have been carried out and will be reflected in the view state. This method will be used in client-type applications that\r\n          * need to maintain a view state. For server-type applications, where this is not the case, use \\ref ProcessChanges() instead.\r\n          */\r\n        public applyChanges(scene: modelstageweb.SceneWebGL) {\r\n            for (let clusterManagerKey in this.clusterManagers) {\r\n                this.clusterManagers[clusterManagerKey].applyChanges(scene);\r\n            }\r\n        }\r\n\r\n        /** Writes all local operations that have been carried out during the transactional phase of this update cycle (\"Delta\"). \r\n          */\r\n        public serializeTransaction(deltaWriter: AppStateDeltaWriter) {\r\n            for (let clusterManagerKey in this.clusterManagers) {\r\n                this.clusterManagers[clusterManagerKey].serializeTransaction(deltaWriter, clusterManagerKey, this);\r\n            }\r\n        }\r\n\r\n        /** Retrieves all remote operations that have been received from remote peers.\r\n          */\r\n        public deserializeTransaction(deltaReader: AppStateDeltaReader, scene: modelstageweb.SceneWebGL) {\r\n            let success = true;\r\n\r\n            while (!deltaReader.isAtEnd() && success) {\r\n                let clusterID = deltaReader.readClusterID();\r\n\r\n                if (clusterID) {\r\n                    let clusterManager = this.clusterManagers[clusterID];\r\n                    if (clusterManager) {\r\n                        success = clusterManager.deserializeTransaction(deltaReader, this, scene);\r\n                    }\r\n                    else {\r\n                        success = false;\r\n                    }\r\n                }\r\n                else {\r\n                    success = false;\r\n                }\r\n            }\r\n\r\n            return success;\r\n        }\r\n    }\r\n\r\n    export class AppState extends AppStateBase {\r\n        private static Instance = null;\r\n        public static GetInstance(): AppState {\r\n            if (!AppState.Instance) {\r\n                AppState.Instance = new AppState();\r\n            }\r\n            return AppState.Instance;\r\n        }\r\n    }\r\n\r\n    export class BinaryWriter {\r\n        private buf: Array<number> = [];\r\n\r\n        public flush(): Uint8Array {\r\n            let result = new Uint8Array(this.buf.length);\r\n            result.set(this.buf);\r\n            return result;\r\n        }\r\n\r\n        public writeByte(val: number) {\r\n            this.buf.push(val);\r\n        }\r\n\r\n        public writeInt16(val: number) {\r\n            this.buf.push(val & 0xff,\r\n                (val >> 8) & 0xff);\r\n        }\r\n\r\n        public writeUInt16(val: number) {\r\n            this.buf.push(val & 0xff,\r\n                (val >> 8) & 0xff);\r\n        }\r\n\r\n        public writeInt32(val: number) {\r\n            this.buf.push(val & 0xff,\r\n                (val >> 8) & 0xff,\r\n                (val >> 16) & 0xff,\r\n                (val >> 24) & 0xff);\r\n        }\r\n\r\n        public writeInt64(val: number) {\r\n            this.buf.push(val & 0xff,\r\n                (val >> 8) & 0xff,\r\n                (val >> 16) & 0xff,\r\n                (val >> 24) & 0xff,\r\n                (val >> 32) & 0xff,\r\n                (val >> 40) & 0xff,\r\n                (val >> 48) & 0xff,\r\n                (val >> 56) & 0xff);\r\n        }\r\n\r\n        public writeTimestamp(val: number) {\r\n            this.writeInt64(val);\r\n        }\r\n\r\n        public writeFloat32(val: number) {\r\n            let buf = new ArrayBuffer(4);\r\n            let view = new DataView(buf);\r\n            view.setFloat32(0, val, true);\r\n            let byteBuf = new Int8Array(buf);\r\n            this.buf.push.apply(byteBuf);\r\n        }\r\n\r\n        public writeString(val: string) {\r\n            this.writeInt32(val.length);\r\n            this.writeCharArray(val, val.length);\r\n        }\r\n\r\n        public writeCharArray(val: string, arrayLength: number) {\r\n            for (let idx = 0; idx < arrayLength; ++idx) {\r\n                this.buf.push(idx < val.length ? val.charCodeAt(idx) : 0x00);\r\n            }\r\n        }\r\n\r\n        public writeWideCharArray(val: string, arrayLength: number) {\r\n            for (let idx = 0; idx < arrayLength; ++idx) {\r\n                this.buf.push(idx < val.length ? val.charCodeAt(idx) & 0xff : 0x00,\r\n                    idx < val.length ? (val.charCodeAt(idx) >> 8) & 0xff : 0x00);\r\n            }\r\n        }\r\n\r\n        public writeVec3(val: psgeometry.Vec4) {\r\n            let buf = new ArrayBuffer(12);\r\n            let view = new DataView(buf);\r\n            view.setFloat32(0, val.x, true);\r\n            view.setFloat32(4, val.y, true);\r\n            view.setFloat32(8, val.z, true);\r\n            let byteBuf = new Uint8Array(buf);\r\n            this.buf.push.apply(byteBuf);\r\n        }\r\n\r\n        public writeVec4(val: psgeometry.Vec4) {\r\n            let buf = new ArrayBuffer(16);\r\n            let view = new DataView(buf);\r\n            view.setFloat32(0, val.x, true);\r\n            view.setFloat32(4, val.y, true);\r\n            view.setFloat32(8, val.z, true);\r\n            view.setFloat32(12, val.w, true);\r\n            let byteBuf = new Uint8Array(buf);\r\n            this.buf.push(byteBuf[0], byteBuf[1], byteBuf[2], byteBuf[3],\r\n                byteBuf[4], byteBuf[5], byteBuf[6], byteBuf[7],\r\n                byteBuf[8], byteBuf[9], byteBuf[10], byteBuf[11],\r\n                byteBuf[12], byteBuf[13], byteBuf[14], byteBuf[15]\r\n            );\r\n        }\r\n    }\r\n\r\n    export class BinaryReader {\r\n        private buf: Uint8Array;\r\n\r\n        private currentPos: number = 8;\r\n\r\n        private error: boolean = false;\r\n\r\n        public get Error() {\r\n            return this.error;\r\n        }\r\n\r\n        public get AtEnd() {\r\n            return this.currentPos >= this.buf.byteLength;\r\n        }\r\n\r\n        constructor(buf: Uint8Array) {\r\n            this.buf = buf;\r\n        }\r\n\r\n        public assureRemainingBytes(count: number): boolean {\r\n            return this.currentPos + count <= this.buf.byteLength;\r\n        }\r\n\r\n        public readByte(): number {\r\n            if (this.assureRemainingBytes(1)) {\r\n                return this.buf[this.currentPos++];\r\n            } else {\r\n                this.error = true;\r\n                return NaN;\r\n            }\r\n        }\r\n\r\n        public readUInt16(): number {\r\n            if (this.assureRemainingBytes(2)) {\r\n                return this.buf[this.currentPos++] +\r\n                    this.buf[this.currentPos++] * 256;\r\n            } else {\r\n                this.error = true;\r\n                return NaN;\r\n            }\r\n        }\r\n\r\n        public readUInt64(): number {\r\n            if (this.assureRemainingBytes(8)) {\r\n                return this.buf[this.currentPos++] +\r\n                    this.buf[this.currentPos++] * 256 +\r\n                    this.buf[this.currentPos++] * 65536 +\r\n                    this.buf[this.currentPos++] * 16777216 +\r\n                    this.buf[this.currentPos++] * 4294967296 +\r\n                    this.buf[this.currentPos++] * 1099511627776 +\r\n                    this.buf[this.currentPos++] * 281474976710656 +\r\n                    this.buf[this.currentPos++] * 72057594037927936;\r\n            } else {\r\n                this.error = true;\r\n                return NaN;\r\n            }\r\n        }\r\n\r\n        public readUInt32(): number {\r\n            if (this.assureRemainingBytes(4)) {\r\n                return this.buf[this.currentPos++] +\r\n                    this.buf[this.currentPos++] * 256 +\r\n                    this.buf[this.currentPos++] * 65536 +\r\n                    this.buf[this.currentPos++] * 16777216;\r\n            } else {\r\n                this.error = true;\r\n                return NaN;\r\n            }\r\n        }\r\n\r\n        public readString(): string {\r\n            let result = null;\r\n            let length = this.readUInt32();\r\n            if (!this.error) {\r\n                if (this.assureRemainingBytes(length)) {\r\n                    result = this.readCharArray(length);\r\n                } else {\r\n                    this.error = true;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        public readTimestamp(): number {\r\n            return this.readUInt64();\r\n        }\r\n\r\n        public readCharArray(arrayLength: number): string {\r\n            let result = [];\r\n            let idx = 0;\r\n            while (idx < arrayLength && this.buf[this.currentPos + idx] != 0x00 && !this.error) {\r\n                if (this.currentPos < this.buf.byteLength) {\r\n                    result.push(this.buf[this.currentPos + idx++]);\r\n                } else {\r\n                    this.error = true;\r\n                }\r\n            }\r\n            this.currentPos += arrayLength;\r\n            return String.fromCharCode.apply(null, result);\r\n        }\r\n\r\n        public readFloat32(): number {\r\n            let result = NaN;\r\n\r\n            if (this.assureRemainingBytes(4)) {\r\n                let buf = new ArrayBuffer(4);\r\n                let view = new DataView(buf);\r\n                view.setUint8(0, this.buf[this.currentPos++]);\r\n                view.setUint8(1, this.buf[this.currentPos++]);\r\n                view.setUint8(2, this.buf[this.currentPos++]);\r\n                view.setUint8(3, this.buf[this.currentPos++]);\r\n\r\n                result = view.getFloat32(0, true);\r\n            } else {\r\n                this.error = true;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public readVec3(): psgeometry.Vec3 {\r\n            let result = null;\r\n\r\n            if (this.assureRemainingBytes(12)) {\r\n                let buf = new ArrayBuffer(12);\r\n                let view = new DataView(buf);\r\n                for (let i = 0; i < 12; ++i) {\r\n                    view.setUint8(i, this.buf[this.currentPos++]);\r\n                }\r\n                result = new psgeometry.Vec3(view.getFloat32(0, true), view.getFloat32(4, true), view.getFloat32(8, true));\r\n            } else {\r\n                this.error = true;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public readVec4(): psgeometry.Vec4 {\r\n            let result = null;\r\n\r\n            if (this.assureRemainingBytes(16)) {\r\n                let buf = new ArrayBuffer(16);\r\n                let view = new DataView(buf);\r\n                for (let i = 0; i < 16; ++i) {\r\n                    view.setUint8(i, this.buf[this.currentPos++]);\r\n                }\r\n                result = new psgeometry.Vec4(view.getFloat32(0, true), view.getFloat32(4, true), view.getFloat32(8, true), view.getFloat32(12, true));\r\n            } else {\r\n                this.error = true;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    export class AppStateDeltaReader {\r\n        private reader: BinaryReader;\r\n\r\n        private isInitializing: boolean = false;\r\n\r\n        public get Reader() {\r\n            return this.reader;\r\n        }\r\n\r\n        constructor(reader: BinaryReader) {\r\n            this.reader = reader;\r\n        }\r\n\r\n        /** Indicates if there is data left to process.\r\n          */\r\n        public isAtEnd() { return this.reader.AtEnd; }\r\n\r\n        /** Reads the cluster ID from the data.\r\n          */\r\n        public readClusterID(): string {\r\n            return this.reader.readString();\r\n        }\r\n\r\n        /** Indicates if the message is an initialization message rather than a \"normal\" delta package. \r\n          * This can be evaluated by the cluster to handle initialization different from updating.\r\n          */\r\n        public get IsInitializing() {\r\n            return this.isInitializing;\r\n        }\r\n    }\r\n\r\n    export class AppStateDeltaWriter {\r\n        private writer: BinaryWriter;\r\n\r\n        public get Writer() {\r\n            return this.writer;\r\n        }\r\n\r\n        constructor(writer: BinaryWriter) {\r\n            this.writer = writer;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    export abstract class AppStateEntry {\r\n        private key: string;\r\n\r\n        private appState: AppState;\r\n\r\n        private transactional: boolean = false;\r\n\r\n        protected cluster: AppStateCluster;\r\n\r\n        public get AppState() {\r\n            return this.appState;\r\n        }\r\n\r\n        public set AppState(val: AppState) {\r\n            this.appState = val;\r\n        }\r\n\r\n        public register(key: string, cluster: AppStateCluster) {\r\n            this.key = key;\r\n            this.cluster = cluster;\r\n        }\r\n\r\n        public abstract deserializeDelta(reader: AppStateDeltaReader, key: string): boolean;\r\n\r\n        public abstract serializeDelta(writer: AppStateDeltaWriter, key: string);\r\n\r\n        public reconcile() {\r\n        }\r\n\r\n        public abstract isDirty();\r\n\r\n        public setDirty() {\r\n            this.cluster.setDirty();\r\n        }\r\n\r\n        public beginTransaction() {\r\n            //assert(!m_isTransactional);\r\n            this.transactional = true;\r\n        }\r\n\r\n        public endTransaction() {\r\n            //assert(m_isTransactional);\r\n            this.transactional = false;\r\n        }\r\n\r\n        public isTransactional(): boolean {\r\n            return this.transactional;\r\n        }\r\n\r\n        public isLocked(): boolean {\r\n            return this.cluster.IsLocked;\r\n        }\r\n\r\n    }\r\n\r\n    export abstract class CommonAppStateEntry extends AppStateEntry {\r\n        protected changedAt: number = 0;\r\n\r\n        public beginChanging() {\r\n            this.changedAt = Date.now();\r\n            this.setDirty();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    export class AppStateStringValue extends CommonAppStateEntry {\r\n        private dirty: boolean = false;\r\n\r\n        private value: string;\r\n\r\n        private previousValue: string;\r\n\r\n        public set(value: string) {\r\n            if (value != this.value) {\r\n                this.changing();\r\n                this.value = value;\r\n            }\r\n        }\r\n\r\n        public get(): string {\r\n            return this.value;\r\n        }\r\n\r\n        public getPreviousValue(): string {\r\n            return this.previousValue;\r\n        }\r\n\r\n        public changing() {\r\n            //assert(IsTransactional());\r\n            if (!this.dirty && !this.isLocked()) {\r\n                this.beginChanging();\r\n                this.previousValue = this.value;\r\n                this.dirty = true;\r\n            }\r\n        }\r\n\r\n        public isDirty() {\r\n            return this.dirty;\r\n        }\r\n\r\n        public beginTransaction() {\r\n            super.beginTransaction();\r\n            this.dirty = false;\r\n        }\r\n\r\n        public deserializeDelta(reader: AppStateDeltaReader, key: string) {\r\n            let result = false;\r\n\r\n            // key was read by cluster\r\n            let changedAt = reader.Reader.readTimestamp();\r\n            if (changedAt != null) {\r\n                let prevValue = reader.Reader.readString();\r\n                if (prevValue != null) {\r\n                    this.value = reader.Reader.readString();\r\n                    this.dirty = true;\r\n                    this.setDirty();\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public serializeDelta(writer: AppStateDeltaWriter, key: string) {\r\n            writer.Writer.writeString(key);\r\n            writer.Writer.writeTimestamp(this.changedAt);\r\n            writer.Writer.writeString(this.previousValue);\r\n            writer.Writer.writeString(this.value);\r\n        }\r\n\r\n    }\r\n\r\n    export abstract class AppStateValue<T> extends CommonAppStateEntry {\r\n        private dirty: boolean = false;\r\n\r\n        private value: T;\r\n\r\n        private previousValue: T;\r\n\r\n        public set(value: T) {\r\n            this.value = value;\r\n        }\r\n\r\n        public get(): T {\r\n            return this.value;\r\n        }\r\n\r\n        public isDirty() {\r\n            return this.dirty;\r\n        }\r\n\r\n        public beginTransaction() {\r\n            super.beginTransaction();\r\n            this.dirty = false;\r\n        }\r\n\r\n        protected abstract readValue(reader: AppStateDeltaReader): T;\r\n\r\n        protected abstract writeValue(writer: AppStateDeltaWriter, value: T);\r\n\r\n        public deserializeDelta(reader: AppStateDeltaReader, key: string) {\r\n            let result = false;\r\n\r\n            // key was read by cluster\r\n            let changedAt = reader.Reader.readTimestamp();\r\n            if (changedAt != null) {\r\n                let prevValue = this.readValue(reader);\r\n                if (prevValue != null) {\r\n                    this.value = this.readValue(reader);\r\n                    this.dirty = true;\r\n                    this.setDirty();\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public serializeDelta(writer: AppStateDeltaWriter, key: string) {\r\n            writer.Writer.writeString(key);\r\n            writer.Writer.writeTimestamp(this.changedAt);\r\n            this.writeValue(writer, this.previousValue);\r\n            this.writeValue(writer, this.value);\r\n        }\r\n    }\r\n\r\n    export class AppStateBoolValue extends AppStateValue<boolean> {\r\n        protected readValue(reader: AppStateDeltaReader): boolean {\r\n            let result: boolean = false;\r\n\r\n            if (reader.Reader.assureRemainingBytes(1)) {\r\n                result = reader.Reader.readByte() != 0;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        protected writeValue(writer: AppStateDeltaWriter, value: boolean) {\r\n            writer.Writer.writeByte(value ? 0xff : 0);\r\n        }\r\n\r\n    }\r\n\r\n    export class AppStateVector4Value extends AppStateValue<psgeometry.Vec4> {\r\n        protected readValue(reader: AppStateDeltaReader): psgeometry.Vec4 {\r\n            let result: psgeometry.Vec4 = null;\r\n\r\n            // sizeof(float) * (x,y,z,w)\r\n            if (reader.Reader.assureRemainingBytes(4 * 4)) {\r\n                result = new psgeometry.Vec4();\r\n                result.x = reader.Reader.readFloat32();\r\n                result.y = reader.Reader.readFloat32();\r\n                result.z = reader.Reader.readFloat32();\r\n                result.w = reader.Reader.readFloat32();\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        protected writeValue(writer: AppStateDeltaWriter, value: psgeometry.Vec4) {\r\n            writer.Writer.writeFloat32(value.x);\r\n            writer.Writer.writeFloat32(value.y);\r\n            writer.Writer.writeFloat32(value.z);\r\n            writer.Writer.writeFloat32(value.w);\r\n        }\r\n\r\n    }\r\n\r\n    export class AppStateFloatValue extends AppStateValue<number> {\r\n        protected readValue(reader: AppStateDeltaReader): number {\r\n            let result = NaN;\r\n\r\n            if (reader.Reader.assureRemainingBytes(4)) {\r\n                result = reader.Reader.readFloat32();\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        protected writeValue(writer: AppStateDeltaWriter, value: number) {\r\n            writer.Writer.writeFloat32(value);\r\n        }\r\n\r\n    }\r\n\r\n    export class AppStateOperation {\r\n        protected changedAt: number;\r\n\r\n        protected isLocal: boolean;\r\n\r\n        public get ChangedAt() {\r\n            return this.changedAt;\r\n        }\r\n\r\n        public get IsLocal() {\r\n            return this.isLocal;\r\n        }\r\n\r\n        constructor(changedAt: number, isLocal: boolean = true) {\r\n            this.changedAt = changedAt;\r\n            this.isLocal = isLocal;\r\n        }\r\n    }\r\n\r\n    export class AppStateValueOperation<T> extends AppStateOperation {\r\n\r\n        protected isNewValueDefined = false;\r\n\r\n        protected isPreviousValueDefined = false;\r\n\r\n        protected newValue: T;\r\n\r\n        protected previousValue: T;\r\n\r\n        public get IsNewValueDefined() {\r\n            return this.isNewValueDefined;\r\n        }\r\n\r\n        public get IsPreviousValueDefined() {\r\n            return this.isPreviousValueDefined;\r\n        }\r\n\r\n        public get NewValue() {\r\n            return this.newValue;\r\n        }\r\n\r\n        public get PreviousValue() {\r\n            return this.previousValue;\r\n        }\r\n\r\n        constructor(changedAt: number, newValue: T = null, previousValue: T = null, isLocal: boolean = true) {\r\n            super(changedAt, isLocal);\r\n            if (newValue != null) {\r\n                this.isNewValueDefined = true;\r\n                this.newValue = newValue;\r\n            }\r\n            if (previousValue) {\r\n                this.isPreviousValueDefined = true;\r\n                this.previousValue = previousValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    export enum OperationType {\r\n        Clear,\r\n        Append,\r\n        Insert,\r\n        Remove,\r\n        Replace\r\n    }\r\n\r\n    enum StorageFlags {\r\n        HasPreviousValue = 0x80,\r\n        HasNewValue = 0x40,\r\n        HasChangedDate = 0x20,\r\n        ItemIndex16Bit = 0x10,\r\n\r\n        None = 0x00,\r\n\r\n        Mask = 0xf0\r\n    };\r\n\r\n    export class AppStateCollectionOperation<T> extends AppStateValueOperation<T> {\r\n\r\n        protected operation: OperationType;\r\n\r\n        protected itemIndex: number;\r\n\r\n        protected reconciledItemIndex: number;\r\n\r\n        public get Operation() {\r\n            return this.operation;\r\n        }\r\n\r\n        public get ItemIndex() {\r\n            return this.itemIndex;\r\n        }\r\n\r\n        public get ReconciledItemIndex() {\r\n            return this.reconciledItemIndex;\r\n        }\r\n\r\n        public set ReconciledItemIndex(value: number) {\r\n            this.reconciledItemIndex = value;\r\n        }\r\n\r\n        constructor(changedAt: number, operation: OperationType, itemIndex: number = 0, newValue: T = null, previousValue: T = null, isLocal: boolean = true) {\r\n            super(changedAt, newValue, previousValue, isLocal);\r\n            this.operation = operation;\r\n            this.itemIndex = itemIndex;\r\n            this.reconciledItemIndex = itemIndex;\r\n        }\r\n\r\n    }\r\n\r\n    export class AppStateCollection<T> extends CommonAppStateEntry {\r\n        protected container: Array<T> = [];\r\n\r\n        protected serializeOperationChangedAt: boolean;\r\n\r\n        protected serializePreviousValues: boolean;\r\n\r\n        protected operations: Array<AppStateCollectionOperation<T>> = [];\r\n\r\n        public get Operations() {\r\n            return this.operations;\r\n        }\r\n\r\n        public constructor(private appStateCollectionOperationType: new (changedAt: number, operation: OperationType, itemIndex?: number, newValue?: T, previousValue?: T, isLocal?: boolean) => AppStateCollectionOperation<T>, serializeOperationChangedAt: boolean = true, serializePreviousValues: boolean = true) {\r\n            super();\r\n            this.serializeOperationChangedAt = serializeOperationChangedAt;\r\n            this.serializePreviousValues = serializePreviousValues;\r\n        }\r\n\r\n        protected addOperation(op: AppStateCollectionOperation<T>) {\r\n            if (this.isTransactional()) {\r\n                if (this.operations.length == 0) {\r\n                    this.beginChanging();\r\n                }\r\n                this.operations.push(op);\r\n            } else {\r\n                console.error('AppState not transactional while adding operation to AppStateCollection');\r\n            }\r\n        }\r\n\r\n        public clear() {\r\n            if (!this.isLocked()) {\r\n                this.addOperation(new this.appStateCollectionOperationType(this.changedAt, OperationType.Clear));\r\n            }\r\n            this.container.length = 0;\r\n        }\r\n\r\n        public append(item: T) {\r\n            if (!this.isLocked()) {\r\n                this.addOperation(new this.appStateCollectionOperationType(this.changedAt, OperationType.Append, this.container.length, item));\r\n            }\r\n            this.container.push(item);\r\n        }\r\n\r\n        public insert(item: T, beforeIndex: number) {\r\n            if (beforeIndex <= this.container.length) {\r\n                if (!this.isLocked()) {\r\n                    this.addOperation(new this.appStateCollectionOperationType(this.changedAt, OperationType.Insert, beforeIndex, item));\r\n                }\r\n                this.container.splice(beforeIndex, 0, item);\r\n            } else {\r\n                console.error('Index out of range while inserting into AppStateCollection');\r\n            }\r\n        }\r\n\r\n        public remove(index: number) {\r\n            if (index < this.container.length) {\r\n                if (!this.isLocked()) {\r\n                    this.addOperation(new this.appStateCollectionOperationType(this.changedAt, OperationType.Remove, index, null, this.container[index]));\r\n                }\r\n                this.container.splice(index, 1);\r\n            } else {\r\n                console.error('Index out of range while removing from AppStateCollection');\r\n            }\r\n        }\r\n\r\n        public replace(item: T, index: number) {\r\n            if (index < this.container.length) {\r\n                if (!this.isLocked()) {\r\n                    this.addOperation(new this.appStateCollectionOperationType(this.changedAt, OperationType.Replace, index, item, this.container[index]));\r\n                }\r\n                this.container[index] = item;\r\n            } else {\r\n                console.error('Index out of range while replacing item in AppStateCollection');\r\n            }\r\n        }\r\n\r\n        public GetItemAt(index: number) {\r\n            return this.container[index];\r\n        }\r\n\r\n        public get Count() {\r\n            return this.container.length;\r\n        }\r\n\r\n        public isDirty() {\r\n            return this.operations.length > 0;\r\n        }\r\n\r\n        public deserializeDelta(reader: AppStateDeltaReader, key: string) {\r\n            // key was read by cluster\r\n            let changedAt = reader.Reader.readTimestamp();\r\n            let operationCount = reader.Reader.readUInt32();\r\n            let success = !reader.Reader.Error;\r\n\r\n            if (success) {\r\n\r\n                if (operationCount > 0) {\r\n                    this.setDirty();\r\n                }\r\n\r\n                for (let i = 0; i < operationCount; ++i) {\r\n                    let flags = reader.Reader.readByte();\r\n                    if (!reader.Reader.Error) {\r\n                        let storageFlags: StorageFlags = flags & StorageFlags.Mask;\r\n                        let opType: OperationType = flags & ~StorageFlags.Mask;\r\n\r\n                        let opChangedAt = changedAt;\r\n                        let itemIndex = 0;\r\n                        let newValue: T;\r\n                        let prevValue: T;\r\n\r\n                        if (storageFlags & StorageFlags.HasChangedDate) {\r\n                            opChangedAt = reader.Reader.readTimestamp();\r\n                            success = success && !reader.Reader.Error;\r\n                        }\r\n                        if (storageFlags & StorageFlags.ItemIndex16Bit) {\r\n                            itemIndex = reader.Reader.readUInt16();\r\n                            success = success && !reader.Reader.Error;\r\n                        }\r\n                        else {\r\n                            itemIndex = reader.Reader.readUInt32();\r\n                            success = success && !reader.Reader.Error;\r\n                        }\r\n                        if (storageFlags & StorageFlags.HasNewValue) {\r\n                            newValue = <T>this.cluster.readValue(key, reader);\r\n                            success = success && !reader.Reader.Error;\r\n                        }\r\n                        if (storageFlags & StorageFlags.HasPreviousValue) {\r\n                            prevValue = <T>this.cluster.readValue(key, reader);\r\n                            success = success && !reader.Reader.Error;\r\n                        }\r\n\r\n                        this.operations.push(new this.appStateCollectionOperationType(opChangedAt, opType, itemIndex, newValue, prevValue, false /* IsLocal */));\r\n\r\n                    }\r\n                    else {\r\n                        success = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return success;\r\n\r\n        }\r\n\r\n        public serializeDelta(writer: AppStateDeltaWriter, key: string) {\r\n            writer.Writer.writeString(key);\r\n            writer.Writer.writeTimestamp(this.changedAt);\r\n\r\n            writer.Writer.writeInt32(this.operations.length);\r\n\r\n            this.operations.forEach((op) => {\r\n\r\n                let storageFlags: StorageFlags =\r\n                    (op.ItemIndex < 0x10000 ? StorageFlags.ItemIndex16Bit : StorageFlags.None) |\r\n                    (op.IsNewValueDefined ? StorageFlags.HasNewValue : StorageFlags.None) |\r\n                    (op.IsPreviousValueDefined && this.serializePreviousValues ? StorageFlags.HasPreviousValue : StorageFlags.None) |\r\n                    (this.serializeOperationChangedAt ? StorageFlags.HasChangedDate : StorageFlags.None);\r\n\r\n                writer.Writer.writeByte(op.Operation | storageFlags);\r\n\r\n                if (storageFlags & StorageFlags.HasChangedDate) {\r\n                    writer.Writer.writeTimestamp(op.ChangedAt);\r\n                }\r\n\r\n                if (storageFlags & StorageFlags.ItemIndex16Bit) {\r\n                    writer.Writer.writeUInt16(op.ItemIndex);\r\n                }\r\n                else {\r\n                    writer.Writer.writeInt32(op.ItemIndex);\r\n                }\r\n\r\n                if (storageFlags & StorageFlags.HasNewValue) {\r\n                    this.cluster.writeValue(key, writer, op.NewValue);\r\n                }\r\n\r\n                if (storageFlags & StorageFlags.HasPreviousValue) {\r\n                    this.cluster.writeValue(key, writer, op.PreviousValue);\r\n                }\r\n            });\r\n        }\r\n\r\n        public reconcile() {\r\n            this.operations.forEach((operation) => {\r\n                if (!operation.IsLocal) {\r\n                    switch (operation.Operation) {\r\n                        case OperationType.Clear:\r\n                            this.container.length = 0;\r\n                            operation.ReconciledItemIndex = -1;\r\n                            break;\r\n                        case OperationType.Append:\r\n                            if (operation.IsNewValueDefined) {\r\n                                this.container.push(operation.NewValue);\r\n                                operation.ReconciledItemIndex = this.container.length - 1;\r\n                            } else {\r\n                                console.error('Expected new value during AppStateCollection.Append reconciliation');\r\n                            }\r\n                            break;\r\n                        case OperationType.Insert:\r\n                            if (operation.IsNewValueDefined) {\r\n                                if (operation.ItemIndex < this.container.length) {\r\n                                    this.container.splice(operation.ItemIndex, 0, operation.NewValue);\r\n                                    operation.ReconciledItemIndex = operation.ItemIndex;\r\n                                }\r\n                                else {\r\n                                    this.container.push(operation.NewValue);\r\n                                    operation.ReconciledItemIndex = this.container.length - 1;\r\n                                }\r\n                            } else {\r\n                                console.error('Expected new value during AppStateCollection.Insert reconciliation');\r\n                            }\r\n                            break;\r\n                        case OperationType.Remove:\r\n                            if (operation.IsPreviousValueDefined) {\r\n                                if (operation.ItemIndex < this.container.length) { // && operation.PreviousValue == this.container[operation.ItemIndex]) {\r\n                                    this.container.splice(operation.ItemIndex, 1);\r\n                                    operation.ReconciledItemIndex = operation.ItemIndex;\r\n                                }\r\n                                else {\r\n                                    operation.ReconciledItemIndex = -1;\r\n                                    /// \\todo: @UB: Locate entry and remove it depending on previous value or fail reconcile if not found.\r\n                                }\r\n                            } else {\r\n                                console.error('Expected previous value during AppStateCollection.Remove reconciliation');\r\n                            }\r\n                            break;\r\n                        case OperationType.Replace:\r\n                            if (operation.IsNewValueDefined) {\r\n                                if (operation.ItemIndex < this.container.length) {\r\n                                    this.container[operation.ItemIndex] = operation.NewValue;\r\n                                    operation.ReconciledItemIndex = operation.ItemIndex;\r\n                                }\r\n                                else {\r\n                                    operation.ReconciledItemIndex = -1;\r\n                                    /// \\todo: @UB: Locate entry and replace it depending on previous value or fail reconcile if not found.\r\n                                }\r\n                            } else {\r\n                                console.error('Expected new value during AppStateCollection.Replace reconciliation');\r\n                            }\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        public beginTransaction() {\r\n            super.beginTransaction();\r\n            this.operations.length = 0;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    export class AppStateClusterManagerBase {\r\n        /** A vector managing pointers to all instances of the corresponding cluster type.\r\n          */\r\n        protected allInstances: Array<AppStateCluster> = [];\r\n\r\n        /** Adds a new instance of the corresponding cluster type to this.\r\n          */\r\n        protected addInstance(instance: AppStateCluster) {\r\n            instance.registerEntries();\r\n            this.allInstances.push(instance);\r\n        }\r\n\r\n        /** Starts the transactional phase. Changes to entries and their values may only be carried out\r\n          * during the transactional phase.\r\n          */\r\n        public beginTransaction() {\r\n            for (let clusterKey in this.allInstances) {\r\n                this.allInstances[clusterKey].beginTransaction();\r\n            }\r\n        }\r\n\r\n        /** Ends the transactional phase. Afterwards, the synchronisation takes place. To ensure that local state\r\n          * changes aren't missed, an exception is thrown if the state is not transactional when entries or their values are being changed.\r\n          */\r\n        public endTransaction() {\r\n            for (let clusterKey in this.allInstances) {\r\n                this.allInstances[clusterKey].endTransaction();\r\n            }\r\n        }\r\n\r\n        /** Applies app state changes to the view state of the application. This method is being called after all local changes have\r\n          * been carried out (the \"transactional phase\") and after the synchronisation took place. Therefore, all changes for the current\r\n          * update cycle have been carried out and will be reflected in the view state.\r\n          */\r\n        public applyChanges(scene: modelstageweb.SceneWebGL) {\r\n            for (let clusterKey in this.allInstances) {\r\n                let cluster = this.allInstances[clusterKey];\r\n                if (cluster.isDirty()) {\r\n                    cluster.applyChanges(scene, cluster.PeerID, cluster.InstanceID);\r\n                    scene.setDirty();\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Serializes peer ID and/or instance ID based on the nature of the concrete cluster type. Must\r\n          * be overriden by concrete subclasses of AppStateClusterManagerBase.\r\n          */\r\n        public serializeClusterInstanceData(cluster: AppStateCluster, deltaWriter: AppStateDeltaWriter, appState: AppStateBase) {\r\n        }\r\n\r\n        /** Serializes all changes that have been carried out on clusters of the corresponding type.\r\n          */\r\n        public serializeTransaction(deltaWriter: AppStateDeltaWriter, clusterID: string, appState: AppStateBase) {\r\n            let dirtyClusters: Array<AppStateCluster> = [];\r\n\r\n            for (let clusterKey in this.allInstances) {\r\n                let cluster = this.allInstances[clusterKey];\r\n                if (cluster.isDirty()) {\r\n                    dirtyClusters.push(cluster);\r\n                }\r\n            }\r\n\r\n            if (dirtyClusters.length > 0) {\r\n                deltaWriter.Writer.writeString(clusterID);\r\n                deltaWriter.Writer.writeUInt16(dirtyClusters.length);\r\n\r\n                dirtyClusters.forEach((cluster) => {\r\n                    this.serializeClusterInstanceData(cluster, deltaWriter, appState);\r\n\r\n                    cluster.serializeTransaction(deltaWriter, appState);\r\n                });\r\n            }\r\n        }\r\n\r\n        /** Deserializes remote changes that have been carried out on clusters of the corresponding type. Must\r\n          * be overriden by concrete subclasses of AppStateClusterManagerBase.\r\n          */\r\n        public deserializeTransaction(deltaReader: AppStateDeltaReader, appState: AppStateBase, scene: modelstageweb.SceneWebGL): boolean {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /** Concrete subclass of AppStateClusterManagerBase that provides a single, global instance of the specified cluster type.\r\n      */\r\n    export class GlobalAppStateClusterManager<TAppStateCluster extends AppStateCluster> extends AppStateClusterManagerBase {\r\n\r\n        private onlyInstance: TAppStateCluster;\r\n\r\n        constructor(clusterTypeID: string, private clusterType: new () => TAppStateCluster) {\r\n            super();\r\n            this.onlyInstance = new clusterType();\r\n\r\n            AppState.GetInstance().addCluster(clusterTypeID, this);\r\n            this.addInstance(this.onlyInstance);\r\n        }\r\n\r\n        /** Gets the only instance of this cluster type.\r\n          */\r\n        public getGlobalCluster(): TAppStateCluster {\r\n            return this.onlyInstance;\r\n        }\r\n\r\n        /** As global clusters don't need a peer ID or instance ID to identify, this implementation doesn't write anything.\r\n          */\r\n        public serializeClusterInstanceData(cluster: AppStateCluster, deltaWriter: AppStateDeltaWriter, appState: AppStateBase) {\r\n        }\r\n\r\n        /** As global clusters don't need a peer ID or instance ID to identify, this implementation doesn't retreive\r\n          * additional data from the reader.\r\n          */\r\n        public deserializeTransaction(deltaReader: AppStateDeltaReader, appState: AppStateBase, scene: modelstageweb.SceneWebGL): boolean {\r\n            let success = false;\r\n            let instanceCount = deltaReader.Reader.readUInt16();\r\n            if (!deltaReader.Reader.Error) {\r\n                for (let i = 0; i < instanceCount; ++i) {\r\n                    let cluster = this.getGlobalCluster();\r\n                    success = cluster.deserializeTransaction(deltaReader, appState, scene);\r\n                }\r\n            }\r\n\r\n            return success;\r\n        }\r\n    }\r\n\r\n    /** Concrete subclass of AppStateClusterManagerBase that distinguishes local and remote instances of the \r\n      * corresponding cluster type (derived from AppStateCluster). Each peer may have zero or one instances of the cluster type.\r\n      */\r\n    export class LocalAppStateClusterManager<TAppStateCluster extends AppStateCluster> extends AppStateClusterManagerBase {\r\n\r\n        /** The map of cluster per peer.\r\n          */\r\n        private peerClusters: { [key: string]: AppStateCluster } = {};\r\n\r\n        constructor(clusterTypeID: string, private clusterType: new () => TAppStateCluster) {\r\n            super();\r\n            this.peerClusters[''] = new clusterType();\r\n\r\n            AppState.GetInstance().addCluster(clusterTypeID, this);\r\n            this.addInstance(this.peerClusters['']);\r\n        }\r\n\r\n        /** Gets the local peer's instance of this cluster type.\r\n          */\r\n        public getLocalCluster(): TAppStateCluster {\r\n            return <TAppStateCluster>this.allInstances[''];\r\n        }\r\n\r\n        /** \\brief Gets the instance of this cluster type that belongs to the peer with the specified ID. If it doesn't exist,\r\n          * it's created.\r\n          */\r\n        public getCluster(peerID: string): TAppStateCluster {\r\n            let result: TAppStateCluster = null;\r\n\r\n            if (!this.containsCluster(peerID)) {\r\n                result = new this.clusterType();\r\n                this.peerClusters[peerID] = result;\r\n                result.PeerID = peerID;\r\n                this.addInstance(result);\r\n            }\r\n            else {\r\n                result = <TAppStateCluster>this.peerClusters[peerID];\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        /** Determines if the peer with the specified ID already has an instance of the corresponding cluster type.\r\n          */\r\n        public containsCluster(peerID: string) {\r\n            return this.peerClusters[peerID] != null;\r\n        }\r\n\r\n        /** As local clusters with a single instance only need a peer ID to identify, this implementation only writes the peerID.\r\n          * For the local peer's instance, an empty peer ID will be replaced by the actual ID of the peer.\r\n          */\r\n        public serializeClusterInstanceData(cluster: AppStateCluster, deltaWriter: AppStateDeltaWriter, appState: AppStateBase) {\r\n            let peerID = cluster.PeerID;\r\n            // Use local peerID if the cluster's peer ID is empty.\r\n            deltaWriter.Writer.writeString(peerID.length == 0 ? appState.LocalPeerID : peerID);\r\n        }\r\n\r\n        /** As local clusters with a single instance only need a peer ID to identify, this implementation retrieves a peer ID,\r\n          * but no instanceID from the delta. If the peerID is identical to the local peer's ID, it is replaced by the internal\r\n          * key (empty string) that is used to identify local peer data.\r\n          */\r\n        public deserializeTransaction(deltaReader: AppStateDeltaReader, appState: AppStateBase, scene: modelstageweb.SceneWebGL) {\r\n            let success = false;\r\n\r\n            let instanceCount = deltaReader.Reader.readUInt16();\r\n            if (!deltaReader.Reader.Error) {\r\n                for (let i = 0; i < instanceCount; ++i) {\r\n                    let peerID = deltaReader.Reader.readString();\r\n                    if (!deltaReader.Reader.Error) {\r\n\r\n                        if (peerID == appState.LocalPeerID) {\r\n                            peerID = '';\r\n                        }\r\n\r\n                        let cluster = this.getCluster(peerID);\r\n                        success = cluster.deserializeTransaction(deltaReader, appState, scene);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return success;\r\n        }\r\n    }\r\n\r\n    /** AppStateCluster instances store information about the application state. Based on application state, changes\r\n\t  * to the view state are carried out. In order to be able to synchronize application state, operations on the entries that\r\n\t  * are aggregated by AppStateCluster,  are stored during a \"transactional phase\". Immediately afterwards, all changes are\r\n\t  * collected and sync'ed with remote peers. Similarly, when remote changes are received, they are processed after the local \r\n\t  * collection took place, causing app state changes. Finally, all cluster's entry's changes are processed to update the\r\n\t  * application's view state.\r\n\t  */\r\n    export abstract class AppStateCluster {\r\n        private peerID: string;\r\n\r\n        private instanceID: string;\r\n\r\n        private appState: AppStateBase;\r\n\r\n        private entries: { [index: string]: AppStateEntry } = {};\r\n\r\n        private dirty: boolean = false;\r\n\r\n        private lockCount: number = 0;\r\n\r\n        public get PeerID() {\r\n            return this.peerID;\r\n        }\r\n\r\n        public set PeerID(value: string) {\r\n            this.peerID = value;\r\n        }\r\n\r\n        public get InstanceID() {\r\n            return this.instanceID;\r\n        }\r\n\r\n        /** Constructor\r\n          * @param peerID\t\tThe peer ID this cluster instance belongs to. If it's left empty, the local peer's ID will be used.\r\n          * @param instanceID\tThe peer-unique instance ID. This ID is only necessary, if multi-instances are used (per peer). This depends on the AppStateClusterManager used to manage instances.\r\n          * @param appState\t\tThe app state container this cluster belongs to.\r\n          */\r\n        constructor(peerID?: string, instanceID?: string, appState?: AppStateBase) {\r\n            this.peerID = peerID || '';\r\n            this.instanceID = instanceID || '';\r\n            this.appState = appState || AppState.GetInstance();\r\n        }\r\n\r\n        /** Registers all entries on creation of a new cluster instance. Must be overriden by concrete clusters.\r\n          */\r\n        public abstract registerEntries();\r\n\r\n        public beginTransaction() {\r\n            this.dirty = false;\r\n            for (let entryIdx in this.entries) {\r\n                this.entries[entryIdx].beginTransaction();\r\n            }\r\n        }\r\n\r\n        public endTransaction() {\r\n            for (let entryIdx in this.entries) {\r\n                this.entries[entryIdx].endTransaction();\r\n            }\r\n        }\r\n\r\n        private reconcile(scene: modelstageweb.SceneWebGL) {\r\n            for (let entryIdx in this.entries) {\r\n                this.entries[entryIdx].reconcile();\r\n            }\r\n        }\r\n\r\n        public setDirty() {\r\n            this.dirty = true;\r\n        }\r\n\r\n        public isDirty() {\r\n            return this.dirty;\r\n        }\r\n\r\n        public registerEntry(key: string, entry: AppStateEntry) {\r\n            this.entries[key] = entry;\r\n            entry.register(key, this);\r\n        }\r\n\r\n        /** ApplyChanges is being called in each update cycle with local or remote changes. Concrete clusters should\r\n          * override ApplyChanges to update the view state based on the app state changes that occured.\r\n          */\r\n        public applyChanges(scene: modelstageweb.SceneWebGL, peerID: string, instanceID: string) {\r\n        }\r\n\r\n        /** Writes all local operations that have been carried out during the transactional phase of this update cycle (\"Delta\").\r\n          */\r\n        public serializeTransaction(deltaWriter: AppStateDeltaWriter, appState: AppStateBase) {\r\n            // setIsInitializing(deltaWriter.IsInitialization());\r\n\r\n            let dirtyEntries: Array<{ key: string, entry: AppStateEntry }> = [];\r\n\r\n            for (let idx in this.entries) {\r\n                if (this.entries[idx].isDirty()) {\r\n                    dirtyEntries.push({ key: idx, entry: this.entries[idx] });\r\n                }\r\n            }\r\n\r\n            deltaWriter.Writer.writeUInt16(dirtyEntries.length);\r\n\r\n            dirtyEntries.forEach((e) => {\r\n                e.entry.serializeDelta(deltaWriter, e.key);\r\n            });\r\n        }\r\n\r\n        /** Retrieves all remote operations that have been received from remote peers.\r\n          */\r\n        public deserializeTransaction(deltaReader: AppStateDeltaReader, appState: AppStateBase, scene: modelstageweb.SceneWebGL) {\r\n            let success = true;\r\n\r\n            let entryCount = deltaReader.Reader.readUInt16();\r\n\r\n            // setIsInitializing(deltaReader.IsInitializing());\r\n            if (!deltaReader.Reader.Error) {\r\n                for (let i = 0; i < entryCount && success; ++i) {\r\n                    let entryKey: string = deltaReader.Reader.readString();\r\n                    if (!deltaReader.Reader.Error) {\r\n                        let entry = this.entries[entryKey];\r\n                        if (entry) {\r\n                            success = entry.deserializeDelta(deltaReader, entryKey);\r\n                        }\r\n                        else {\r\n                            success = false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        success = false;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                success = false;\r\n            }\r\n\r\n            if (success) {\r\n                this.reconcile(scene);\r\n            }\r\n\r\n            return success;\r\n        }\r\n\r\n        public lock() {\r\n            ++this.lockCount;\r\n        }\r\n\r\n        public unlock() {\r\n            --this.lockCount;\r\n        }\r\n\r\n        public get IsLocked(): boolean {\r\n            return this.lockCount > 0;\r\n        }\r\n\r\n        public readValue(key: string, reader: AppStateDeltaReader): any {\r\n            console.error('readValue not implemented for ' + key);\r\n        }\r\n\r\n        public writeValue(key: string, writer: AppStateDeltaWriter, value: any) {\r\n            console.error('writeValue not implemented for ' + key);\r\n        }\r\n    }\r\n\r\n    export class Director {\r\n        protected scene: modelstageweb.SceneWebGL;\r\n\r\n        protected appState: AppStateBase;\r\n\r\n        private pendingUpdates: (() => void)[] = [];\r\n\r\n        private pendingMessages: modelstageweb.NetworkChannelMessage[] = [];\r\n\r\n        public set Scene(scene: DirectedSceneWebGL) {\r\n            this.scene = scene;\r\n        } \r\n\r\n        constructor(appState: AppStateBase) {\r\n            this.appState = appState;\r\n        }\r\n\r\n        /** Initializes an AppState transaction. Any changes applied to the AppState will be monitored.\r\n          * BeginUpdate is called at the very beginning of each render cycle.\r\n          */\r\n        public beginFrame() {\r\n            this.appState.beginTransaction();\r\n        }\r\n\r\n        public commit() {\r\n            this.acquirePendingUpdates().forEach((updFunc) => {\r\n                updFunc();\r\n            });\r\n            this.appState.endTransaction();\r\n        }\r\n\r\n        /** Determines and submits local AppState transitions. Creates a local AppState delta that is transferred to upstream peers.\r\n          * SubmitLocalUpdates is called after the scene has been rendered and all interactions with the view are processed.\r\n          */\r\n        public submitLocalUpdates(connection: modelstageweb.ServerConnection) {\r\n            const AppStateDelta = 0x0100;\r\n\r\n            let writer = new AppStateDeltaWriter(new BinaryWriter());\r\n            writer.Writer.writeInt32(1);\r\n            writer.Writer.writeInt32(AppStateDelta); \r\n            this.appState.serializeTransaction(writer);\r\n            let buf = writer.Writer.flush();\r\n            let msg = modelstageweb.NetworkChannelMessage.FromBuffer(buf);\r\n            if (msg.HasPayload && connection.IsConnected) {\r\n                connection.send(msg.Content);\r\n            }\r\n        }\r\n\r\n        /** Applies remote AppState transitions received from upstream peers. ApplyRemoteUpdates is called after \r\n          * SubmitLocalUpdates. After applying remote updates, all AppState transitions for this render cycle have been applied.\r\n          */\r\n        public applyRemoteUpdates() {\r\n            let pendingMessages = this.acquirePendingMessages();\r\n            pendingMessages.forEach((msg) => {\r\n                this.appState.deserializeTransaction(new AppStateDeltaReader(new BinaryReader(msg.Content)), this.scene);\r\n            });\r\n        }\r\n\r\n        private acquirePendingUpdates(): Array<() => void> {\r\n            let result = this.pendingUpdates;\r\n            this.pendingUpdates = [];\r\n            return result;\r\n        }\r\n\r\n        private acquirePendingMessages() {\r\n            let result = this.pendingMessages;\r\n            this.pendingMessages = [];\r\n            return result;\r\n        }\r\n\r\n        /** Updates ViewState according to resulting AppState. AppState transition is committed by clearing AppState delta.\r\n          */\r\n        public endFrame() {\r\n            this.appState.applyChanges(this.scene);\r\n        }\r\n\r\n        public receivedMessage(message: modelstageweb.NetworkChannelMessage) {\r\n            this.pendingMessages.push(message);\r\n        }\r\n\r\n        public synchronizeStateUpdate(func: () => void) {\r\n            this.pendingUpdates.push(func);\r\n        }\r\n    }\r\n\r\n    export class DirectedSceneWebGL extends modelstageweb.SceneWebGL {\r\n\r\n        protected director: Director;\r\n\r\n        private connection: modelstageweb.ServerConnection;\r\n\r\n        public constructor(director: Director, connection: modelstageweb.ServerConnection) {\r\n            super();\r\n            this.director = director;\r\n            this.connection = connection;\r\n        }\r\n\r\n        public beginFrame() {\r\n            this.director.beginFrame();\r\n        }\r\n\r\n        public update() {\r\n            this.director.commit();\r\n\r\n            if (this.connection && this.connection.IsConnected) {\r\n                this.director.submitLocalUpdates(this.connection);\r\n                this.director.applyRemoteUpdates();\r\n            }\r\n        }\r\n\r\n        public endFrame() {\r\n            this.director.endFrame();\r\n        }\r\n\r\n        public receivedMessage(message: modelstageweb.NetworkChannelMessage) {\r\n            if (message.MessageType == modelstageweb.CommonMessageTypes.AppStateDelta || message.MessageType == modelstageweb.CommonMessageTypes.AppStateInitialization) {\r\n                this.director.receivedMessage(message);\r\n            }\r\n        }\r\n\r\n        public synchronizeStateUpdate(func: () => void) {\r\n            this.director.synchronizeStateUpdate(func);\r\n        }\r\n\r\n    }\r\n\r\n}","/// ModelStage Â© 2018 Plansysteme GmbH, Hamburg, Germany. All rights reserved.\r\n\r\nimport { modelstageweb } from './mx-common';\r\nimport { modelstageappstate } from './mx-appstate';\r\nimport { psgeometry } from './ps-geometry';\r\n\r\nexport module modelstage {\r\n\r\n    class Timer {\r\n        public animationFrame(callback: FrameRequestCallback): number {\r\n            return window.requestAnimationFrame(callback);\r\n        }\r\n\r\n        constructor() {\r\n        }\r\n    }\r\n\r\n    export class SpaceModel {\r\n \r\n        private vertices: Array<psgeometry.Vec2> = [];\r\n\r\n        private floorLevel: number = 0;\r\n\r\n        public get FloorLevel() { return this.floorLevel; }\r\n\r\n        public set FloorLevel(floorLevel) { this.floorLevel = floorLevel; }\r\n\r\n        constructor(private scene: DemoSceneWebGL, private stage: modelstageweb.StageWebGL, private actor: modelstageweb.ActorWebGL) {\r\n        }\r\n\r\n        private initializeSquareRoom(transparentMeshBuilder: modelstageweb.TransparentMeshBuilder, texturedMeshBuilder: modelstageweb.TexturedMeshBuilder) {\r\n            texturedMeshBuilder.addQuad(\r\n                -5.0, 0.0, -5.0, 0, 0,\r\n                5.0, 0.0, -5.0, 1, 0,\r\n                5.0, 0.0, 5.0, 1, 1,\r\n                -5.0, 0.0, 5.0, 0, 1,\r\n                0.3, 0.3, 0.3, true);\r\n\r\n            transparentMeshBuilder.addQuad(\r\n                -5.0, 0.0, -5.0,\r\n                5.0, 0.0, -5.0,\r\n                5.0, 2.6, -5.0,\r\n                -5.0, 2.6, -5.0,\r\n                0.1, 0.1, 0.1, .4, true);\r\n\r\n            transparentMeshBuilder.addQuad(\r\n                -5.0, 0.0, 5.0,\r\n                -5.0, 2.6, 5.0,\r\n                5.0, 2.6, 5.0,\r\n                5.0, 0.0, 5.0,\r\n                0.1, 0.1, 0.1, .4, true);\r\n\r\n            transparentMeshBuilder.addQuad(\r\n                -5.0, 0.0, -5.0,\r\n                -5.0, 2.6, -5.0,\r\n                -5.0, 2.6, 5.0,\r\n                -5.0, 0.0, 5.0,\r\n                0.15, 0.15, 0.15, .4, true);\r\n\r\n            transparentMeshBuilder.addQuad(\r\n                5.0, 0.0, -5.0,\r\n                5.0, 0.0, 5.0,\r\n                5.0, 2.6, 5.0,\r\n                5.0, 2.6, -5.0,\r\n                0.15, 0.15, 0.15, .4, true);\r\n        }\r\n\r\n        private initializeArbitraryRoom(transparentMeshBuilder: modelstageweb.TransparentMeshBuilder, texturedMeshBuilder: modelstageweb.TexturedMeshBuilder) {\r\n\r\n            let toggle = false;\r\n\r\n            let poly = new psgeometry.Polygon2D();\r\n\r\n            for (let i = 0; i < this.vertices.length; i++) {\r\n                poly.addVector(this.vertices[i]);\r\n            }\r\n            var bbox = new psgeometry.AABB2D();\r\n            poly.addToAABB(bbox);\r\n            var extents = bbox.extents();\r\n            this.stage.updateShadowArea(bbox);\r\n\r\n            poly = poly.triangulate();\r\n            for (let i = 0; i < poly.Vertices.length; i += 3) {\r\n                texturedMeshBuilder.addTri(\r\n                    poly.Vertices[i].x, 0, poly.Vertices[i].y, (poly.Vertices[i].x - bbox.minX) / extents.x, (poly.Vertices[i].y - bbox.minY) / extents.y,\r\n                    poly.Vertices[i + 1].x, 0, poly.Vertices[i + 1].y, (poly.Vertices[i + 1].x - bbox.minX) / extents.x, (poly.Vertices[i + 1].y - bbox.minY) / extents.y,\r\n                    poly.Vertices[i + 2].x, 0, poly.Vertices[i + 2].y, (poly.Vertices[i + 2].x - bbox.minX) / extents.x, (poly.Vertices[i + 2].y - bbox.minY) / extents.y,\r\n                    0.2, 0.2, 0.2, true);\r\n            }\r\n\r\n            for (let i = 0; i < this.vertices.length; i++) {\r\n                let start = this.vertices[i];\r\n                let end = this.vertices[(i + 1) % this.vertices.length];\r\n\r\n                transparentMeshBuilder.addQuad(\r\n                    start.x, 0.0, start.y,\r\n                    end.x, 0.0, end.y,\r\n                    end.x, 2.6, end.y,\r\n                    start.x, 2.6, start.y,\r\n                    toggle ? 0.1 : 0.15, toggle ? 0.1 : 0.15, toggle ? 0.1 : 0.15, .4, true);\r\n\r\n                toggle = !toggle;\r\n            }\r\n\r\n        }\r\n\r\n        public updateSpace() {\r\n\r\n            let spaceIndices = new modelstageweb.BufferAssetWebGL(undefined, 'space_indices', true);\r\n            let spaceVertices = new modelstageweb.BufferAssetWebGL(undefined, 'space_vertices', false);\r\n            let transparentMeshBuilder = new modelstageweb.TransparentMeshBuilder(spaceVertices, spaceIndices);\r\n            let floorIndices = new modelstageweb.BufferAssetWebGL(undefined, 'floor_indices', true);\r\n            let floorVertices = new modelstageweb.BufferAssetWebGL(undefined, 'floor_vertices', false);\r\n            let texturedMeshBuilder = new modelstageweb.TexturedMeshBuilder(floorVertices, floorIndices);\r\n\r\n            if (this.vertices.length < 3) {\r\n                this.initializeSquareRoom(transparentMeshBuilder, texturedMeshBuilder);\r\n            } else {\r\n                this.initializeArbitraryRoom(transparentMeshBuilder, texturedMeshBuilder);\r\n            }\r\n\r\n            let figure = new modelstageweb.FigureWebGL('Space');\r\n\r\n            texturedMeshBuilder.initialize(this.stage);\r\n            this.stage.AssetStore.addBufferAsset('floor_indices', floorIndices);\r\n            this.stage.AssetStore.addBufferAsset('floor_vertices', floorVertices);\r\n            let floorShaderInstance = new modelstageweb.MeshShaderInstance('TexturedMeshShader');\r\n            floorShaderInstance.addReference('IndexBuffer', 'floor_indices');\r\n            floorShaderInstance.addReference('VertexBuffer', 'floor_vertices');\r\n            floorShaderInstance.addReference('TextureBuffer', 'Shadow');\r\n            figure.addShaderInstance(floorShaderInstance);\r\n            \r\n            transparentMeshBuilder.initialize(this.stage);\r\n            this.stage.AssetStore.addBufferAsset('space_indices', spaceIndices);\r\n            this.stage.AssetStore.addBufferAsset('space_vertices', spaceVertices);\r\n            let shaderInstance = new modelstageweb.MeshShaderInstance('TransparentMeshShader');\r\n            shaderInstance.addReference('IndexBuffer', 'space_indices');\r\n            shaderInstance.addReference('VertexBuffer', 'space_vertices');\r\n            figure.addShaderInstance(shaderInstance);\r\n\r\n            this.actor.Figures[0] = figure;\r\n            this.actor.Filter = new modelstageweb.GenericSceneItemFilterWebGL();\r\n\r\n            this.actor.Scene.setDirty();\r\n\r\n        }\r\n\r\n        public clearVertices() {\r\n            this.vertices.length = 0;\r\n        }\r\n\r\n        public addVertex(x: number, y: number) {\r\n            this.vertices.push(new psgeometry.Vec2(x, y));\r\n        }\r\n    }\r\n\r\n    export class TheaterWebGL {\r\n\r\n        protected scene: modelstageweb.SceneWebGL;\r\n\r\n        protected stage: modelstageweb.StageWebGL;\r\n\r\n        private timer: Timer;\r\n\r\n        get Stage(): modelstageweb.StageWebGL {\r\n            return this.stage;\r\n        }\r\n\r\n        get Scene(): modelstageweb.SceneWebGL {\r\n            return this.scene;\r\n        }\r\n\r\n        constructor(canvasElementID: string) {\r\n            this.stage = new modelstageweb.StageWebGL(canvasElementID);\r\n            this.stage.initialize();\r\n\r\n            //this.scene = new modelstageweb.SceneWebGL();\r\n\r\n            this.timer = new Timer();\r\n            this.timer.animationFrame(() => { this.processFrame() });\r\n\r\n            document.addEventListener('visibilitychange', () => { this.onVisibilityChange(); }, false);\r\n\r\n            this.initialize();\r\n        }\r\n\r\n        protected initialize() {\r\n        }\r\n\r\n        /** Main render cycle for a frame.\r\n          */\r\n        protected processFrame() {\r\n            if (this.scene && this.scene.IsInitialized) {\r\n                if (!document.hidden) {\r\n                    // Render scene.\r\n                    this.render();\r\n                }\r\n\r\n                // Process available interaction data and remote messages to update application state and/or view state for the next frame.\r\n                this.scene.update();\r\n\r\n                // Finalize frame.\r\n                this.scene.endFrame();\r\n\r\n                this.scene.beginFrame();\r\n            }\r\n\r\n            this.timer.animationFrame(() => { this.processFrame() });\r\n        }\r\n\r\n        protected render() {\r\n            if (this.scene.IsInitialized) {\r\n                this.stage.render(this.scene);\r\n            }\r\n        }\r\n\r\n        private onVisibilityChange() {\r\n            if (!document.hidden) {\r\n                this.timer.animationFrame(() => { this.render() });\r\n            }\r\n        }\r\n    }\r\n\r\n    export class ActorManipulationTool extends modelstageweb.Tool {\r\n\r\n        constructor(protected connection: modelstageweb.ServerConnection) {\r\n            super();\r\n        }\r\n\r\n        protected getSceneObj(objID: string) {\r\n            let sceneObjIdx = 0;\r\n            let sceneObj = null;\r\n            while (sceneObjIdx < SceneAppState.GlobalInstance.SceneObjects.Count && !sceneObj) {\r\n                if (SceneAppState.GlobalInstance.SceneObjects.GetItemAt(sceneObjIdx).SceneObjectID == objID) {\r\n                    sceneObj = SceneAppState.GlobalInstance.SceneObjects.GetItemAt(sceneObjIdx);\r\n                } else {\r\n                    ++sceneObjIdx;\r\n                }\r\n            }\r\n            return [sceneObj, sceneObjIdx];\r\n        }\r\n\r\n        private updateModelTransform(actor: modelstageweb.ActorWebGL) {\r\n            let translationVec = actor.Data['translate'] || psgeometry.Vec4.Zero;\r\n            let rotationVec = actor.Data['rotate'] || psgeometry.Vec4.Zero;\r\n\r\n            this.connection.send('Scene|Transform|' + actor.SceneItemID + '|' + translationVec.x + ',' + translationVec.y + ',' + translationVec.z + '|' + rotationVec.y + ',' + rotationVec.x + ',' + rotationVec.z);\r\n\r\n            let translation = psgeometry.Matrix4.FromTranslation(translationVec.x, translationVec.y, translationVec.z);\r\n            let rotation = psgeometry.Matrix4.FromRotationY(rotationVec.y);\r\n\r\n            actor.State.set('ModelTransform', <psgeometry.Matrix4>rotation.multiply(translation));\r\n            actor.Scene.setDirty();\r\n        }\r\n\r\n        protected updateActorTranslation(actor: modelstageweb.ActorWebGL, x: number, y: number, z: number) {\r\n            actor.Data['translate'] = new psgeometry.Vec4(x, y, z);\r\n            this.updateModelTransform(actor);\r\n        }\r\n\r\n        protected updateActorRotation(actor: modelstageweb.ActorWebGL, x: number, y: number, z: number) {\r\n            actor.Data['rotate'] = new psgeometry.Vec4(x, y, z);\r\n            this.updateModelTransform(actor);\r\n        }\r\n    }\r\n\r\n    export class SelectionTool extends ActorManipulationTool {\r\n        private static readonly SelectionObjectID = 'SEL_MARKER';\r\n\r\n        private selectedActor: modelstageweb.ActorWebGL;\r\n\r\n        constructor(private scene: modelstageweb.SceneWebGL, private stage: modelstageweb.StageWebGL, connection: modelstageweb.ServerConnection) {\r\n            super(connection);\r\n        }\r\n\r\n        public enter(interfaceController: modelstageweb.InterfaceController) {\r\n            super.enter(interfaceController);\r\n\r\n            this.updateSelectionMarker();\r\n        }\r\n\r\n        public leave() {\r\n            this.removeSelectionMarker();\r\n        }\r\n\r\n        public handleKeyUp(e: JQuery.Event) {\r\n            if (e.keyCode == 46 && this.selectedActor) { // delete key\r\n\r\n                let [sceneObj, sceneObjIdx] = this.getSceneObj(this.selectedActor.Data['SceneObjID']);\r\n                if (sceneObj) {\r\n                    SceneAppState.GlobalInstance.SceneObjects.remove(sceneObjIdx);\r\n                    this.removeSelectionMarker();\r\n                    this.selectedActor = null;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        private removeSelectionMarker() {\r\n            this.scene.removeSceneItem(SelectionTool.SelectionObjectID);\r\n        }\r\n\r\n        private updateSelectionMarker() {\r\n            this.scene.removeSceneItem(SelectionTool.SelectionObjectID);\r\n\r\n            if (this.selectedActor) {\r\n                let box = new psgeometry.AABB3D;\r\n                this.selectedActor.Figures.forEach((fig) => {\r\n                    box.addAABB(fig.getBoundingBox());\r\n                });\r\n\r\n                let bottomCenterPoint = new psgeometry.Vec3(box.center().x, box.minY, box.center().z);\r\n                let selectionMarker = new modelstageweb.ActorWebGL(this.scene, SelectionTool.SelectionObjectID);\r\n\r\n                let [r, g, b] = [.16, .34, .6];\r\n\r\n                let meshBuilder = new modelstageweb.OpaqueMeshBuilder();\r\n\r\n                // top lid\r\n                meshBuilder.addStroke(box.minX, box.maxY, box.minZ, box.maxX, box.maxY, box.minZ, r, g, b);\r\n                meshBuilder.addStroke(box.maxX, box.maxY, box.minZ, box.maxX, box.maxY, box.maxZ, r, g, b);\r\n                meshBuilder.addStroke(box.maxX, box.maxY, box.maxZ, box.minX, box.maxY, box.maxZ, r, g, b);\r\n                meshBuilder.addStroke(box.minX, box.maxY, box.maxZ, box.minX, box.maxY, box.minZ, r, g, b);\r\n\r\n                // bottom lid\r\n                meshBuilder.addStroke(box.minX, box.minY, box.minZ, box.maxX, box.minY, box.minZ, r, g, b);\r\n                meshBuilder.addStroke(box.maxX, box.minY, box.minZ, box.maxX, box.minY, box.maxZ, r, g, b);\r\n                meshBuilder.addStroke(box.maxX, box.minY, box.maxZ, box.minX, box.minY, box.maxZ, r, g, b);\r\n                meshBuilder.addStroke(box.minX, box.minY, box.maxZ, box.minX, box.minY, box.minZ, r, g, b);\r\n                \r\n                // vertical lines\r\n                meshBuilder.addStroke(box.minX, box.minY, box.minZ, box.minX, box.maxY, box.minZ, r, g, b);\r\n                meshBuilder.addStroke(box.minX, box.minY, box.maxZ, box.minX, box.maxY, box.maxZ, r, g, b);\r\n                meshBuilder.addStroke(box.maxX, box.minY, box.minZ, box.maxX, box.maxY, box.minZ, r, g, b);\r\n                meshBuilder.addStroke(box.maxX, box.minY, box.maxZ, box.maxX, box.maxY, box.maxZ, r, g, b);\r\n\r\n                selectionMarker.addFigure(meshBuilder.createFigure(this.stage, 'SEL_MARKER'));\r\n\r\n                let figureBoundingBox = new psgeometry.AABB3D();\r\n\r\n                [r, g, b] = [.6, .1, .1];\r\n                let meshBuilder1 = new modelstageweb.OpaqueMeshBuilder();\r\n                const segmentCount = 24;\r\n                const radius0 = 1;\r\n                const radius1 = 1.1;\r\n                for (let i = 0; i < segmentCount; ++i) {\r\n                    let angle0 = 2 * Math.PI / segmentCount * i;\r\n                    let angle1 = 2 * Math.PI / segmentCount * (i + 1);\r\n                    let inner0 = new psgeometry.Vec3(Math.sin(angle0) * radius0, 0, Math.cos(angle0) * radius0).add(bottomCenterPoint);\r\n                    let inner1 = new psgeometry.Vec3(Math.sin(angle1) * radius0, 0, Math.cos(angle1) * radius0).add(bottomCenterPoint);\r\n                    let outer0 = new psgeometry.Vec3(Math.sin(angle0) * radius1, 0, Math.cos(angle0) * radius1).add(bottomCenterPoint);\r\n                    let outer1 = new psgeometry.Vec3(Math.sin(angle1) * radius1, 0, Math.cos(angle1) * radius1).add(bottomCenterPoint);\r\n                    meshBuilder1.addQuad(outer0.x, outer0.y + 0.02, outer0.z,\r\n                        outer1.x, outer1.y + 0.02, outer1.z,\r\n                        inner1.x, inner1.y + 0.02, inner1.z,\r\n                        inner0.x, inner0.y + 0.02, inner0.z,\r\n                        r, g, b);\r\n\r\n                    meshBuilder1.addQuad(outer0.x, outer1.y - 0.02, outer0.z,\r\n                        outer1.x, outer1.y - 0.02, outer1.z,\r\n                        outer1.x, outer1.y + 0.02, outer1.z,\r\n                        outer0.x, outer0.y + 0.02, outer0.z,\r\n                        r, g, b);\r\n\r\n                    meshBuilder1.addQuad(inner0.x, inner0.y - 0.02, inner0.z,\r\n                        inner1.x, inner1.y - 0.02, inner1.z,\r\n                        outer1.x, outer1.y - 0.02, outer1.z,\r\n                        outer0.x, outer0.y - 0.02, outer0.z,\r\n                        r, g, b);\r\n\r\n                    figureBoundingBox.addVector(outer0);\r\n                }\r\n                let figure = meshBuilder1.createFigure(this.stage, 'ROT_MARKER');\r\n                figure.setIntersector(new modelstageweb.BoundingBoxIntersector(figureBoundingBox));\r\n                selectionMarker.addFigure(figure);\r\n\r\n                let sceneObjTranslation = this.scene.State.get('SceneObjectPos' + this.selectedActor.Data['SceneObjID'], psgeometry.Vec4.Zero);\r\n                let sceneObjRotation = this.scene.State.get('SceneObjectRot' + this.selectedActor.Data['SceneObjID'], psgeometry.Vec4.Zero);\r\n                selectionMarker.State.set('ModelTransform', psgeometry.Matrix4.FromRotation(sceneObjRotation.x, sceneObjRotation.y, sceneObjRotation.z).multiply(psgeometry.Matrix4.FromTranslation(sceneObjTranslation.x, sceneObjTranslation.y, sceneObjTranslation.z)));\r\n\r\n                selectionMarker.Filter = new modelstageweb.GenericSceneItemFilterWebGL();\r\n                this.scene.addSceneItem(selectionMarker, true);\r\n            }\r\n        }\r\n\r\n        public handleMouseDown(e: JQuery.Event) {\r\n            let viewRay = this.stage.Camera.getViewRay(e.clientX, e.clientY);\r\n            let candidates: Array<modelstageweb.IntersectionCandidate> = [];\r\n            this.scene.getIntersectionCandidates(viewRay, candidates);\r\n\r\n            let pickedObject = false;\r\n            let currentIdx = 0;\r\n\r\n            while (!pickedObject && currentIdx < candidates.length) {\r\n\r\n                if (candidates[currentIdx].sceneItem instanceof modelstageweb.ActorWebGL) {\r\n\r\n                    let pickedActor = <modelstageweb.ActorWebGL>(candidates[currentIdx].sceneItem);\r\n                    if (pickedActor.SceneItemID != SelectionTool.SelectionObjectID) {\r\n                        if (pickedActor == this.selectedActor) {\r\n                            this.interfaceController.pushTool(new MoveActorTool(pickedActor, this.stage.Camera, this.connection));\r\n                        } else {\r\n                            this.selectedActor = pickedActor;\r\n                            this.updateSelectionMarker();\r\n                        }\r\n\r\n                        pickedObject = true;\r\n                    } else {\r\n                        this.interfaceController.pushTool(new RotateActorTool(this.selectedActor, this.stage.Camera, this.connection));\r\n\r\n                        pickedObject = true;\r\n                    }\r\n                }\r\n                currentIdx++;\r\n            }\r\n\r\n            if (!pickedObject) {\r\n                this.scene.removeSceneItem(SelectionTool.SelectionObjectID);\r\n\r\n                this.selectedActor = null;\r\n            }\r\n        }\r\n\r\n        public handleMouseMove(e: JQuery.Event, x: number, y: number) {\r\n        }\r\n\r\n        public handleMouseUp(e: JQuery.Event) {\r\n        }\r\n    }\r\n\r\n    export class PlaceActorTool extends ActorManipulationTool {\r\n        private sceneObj: SceneObject;\r\n\r\n        private sceneObjIdx: number;\r\n\r\n        constructor(figureID: string, private camera: modelstageweb.CameraWebGL, connection: modelstageweb.ServerConnection) {\r\n            super(connection);\r\n\r\n            this.sceneObj = new SceneObject();\r\n            this.sceneObj.AssetID = figureID;\r\n            this.sceneObj.SceneObjectID = modelstageweb.uuidv4();\r\n            this.sceneObj.Location = new psgeometry.Vec4(); \r\n            this.sceneObj.Rotation = new psgeometry.Vec4();\r\n            this.sceneObj.Scale = new psgeometry.Vec4(1, 1, 1, 1);\r\n            SceneAppState.GlobalInstance.SceneObjects.append(this.sceneObj);\r\n\r\n            this.sceneObjIdx = SceneAppState.GlobalInstance.SceneObjects.Count - 1;\r\n        }\r\n\r\n        public handleMouseMove(e: JQuery.TriggeredEvent, x: number, y: number) {\r\n            let viewRay = this.camera.getViewRay(x, y);\r\n            let p = viewRay.intersectRayWithPlane(new psgeometry.Vec3(), new psgeometry.Vec3(0, 1, 0));\r\n            if (p) {\r\n                this.sceneObj = { ...this.sceneObj };\r\n                this.sceneObj.Location = new psgeometry.Vec4(p.x, 0, p.z);\r\n                SceneAppState.GlobalInstance.SceneObjects.replace(this.sceneObj, this.sceneObjIdx);\r\n                //this.updateActorTranslation(this.actor, p.x, 0, p.z);\r\n            }\r\n        }\r\n\r\n        public handleMouseUp(e: JQuery.Event) {\r\n            this.interfaceController.popTool();\r\n        }\r\n\r\n    }\r\n\r\n    let UserNames = {\r\n        'Administrator': 'Administrator',\r\n        'Arne': 'Arne Thurm',\r\n        'Ulrich': 'Ulrich BÃ¶nkemeyer',\r\n        'Tom': 'Tom Jachmann',\r\n        'Zacharias': 'Zacharias Reinhardt'\r\n    };\r\n\r\n    let PeerColors = [\r\n        [0.31, 0.02, 0.06, 1.00],  // red\r\n        [0.02, 0.17, 0.31, 1.00],  // blue\r\n        [0.02, 0.31, 0.06, 1.00],  // green\r\n        [0.69, 0.34, 0.00, 1.00],  // orange\r\n        [0.33, 0.00, 0.53, 1.00],  // purple\r\n//        [, 1.00],\r\n//        [, 1.00],\r\n//        [, 1.00],\r\n    ];\r\n\r\n    export class MoveActorTool extends ActorManipulationTool {\r\n        private isInitialized = false;\r\n        private lastX: number;\r\n        private lastZ: number;\r\n\r\n        constructor(private actor: modelstageweb.ActorWebGL, private camera: modelstageweb.CameraWebGL, connection: modelstageweb.ServerConnection) {\r\n            super(connection);\r\n        }\r\n\r\n        public handleMouseMove(e: JQuery.TriggeredEvent, x: number, y: number) {\r\n            let viewRay = this.camera.getViewRay(x, y);\r\n            let p = viewRay.intersectRayWithPlane(new psgeometry.Vec3(), new psgeometry.Vec3(0, 1, 0));\r\n            if (p) {\r\n                if (this.isInitialized) {\r\n                    let [sceneObj, sceneObjIdx] = this.getSceneObj(this.actor.Data['SceneObjID']);\r\n                    if (sceneObj) {\r\n                        let translatedSceneObj: SceneObject = { ...sceneObj };\r\n                        let translation = translatedSceneObj.Location;\r\n                        translatedSceneObj.Location = translatedSceneObj.Location.add(new psgeometry.Vec4(p.x - this.lastX, 0, p.z - this.lastZ));\r\n                        SceneAppState.GlobalInstance.SceneObjects.replace(translatedSceneObj, sceneObjIdx);\r\n                    }\r\n                }\r\n                this.lastX = p.x;\r\n                this.lastZ = p.z;\r\n                this.isInitialized = true;\r\n            }\r\n        }\r\n\r\n        public handleMouseUp(e: JQuery.Event) {\r\n            this.interfaceController.popTool();\r\n        }\r\n\r\n    }\r\n\r\n    export class RotateActorTool extends ActorManipulationTool {\r\n        constructor(private actor: modelstageweb.ActorWebGL, private camera: modelstageweb.CameraWebGL, connection: modelstageweb.ServerConnection) {\r\n            super(connection);\r\n        }\r\n\r\n        public handleDrag(e: JQuery.Event, startX: number, startY: number, dX: number, dY: number) {\r\n\r\n            let fac = 1;\r\n            if (Math.abs(e.clientY - startY) > 300) {\r\n                fac = 6\r\n            } else if (Math.abs(e.clientY - startY) > 200) {\r\n                fac = 3\r\n            } else if (Math.abs(e.clientY - startY) > 100) {\r\n                fac = 2\r\n            }\r\n\r\n            let [sceneObj, sceneObjIdx] = this.getSceneObj(this.actor.Data['SceneObjID']);\r\n            if (sceneObj) {\r\n                let rotatedSceneObj: SceneObject = { ...sceneObj };\r\n                let rotation = rotatedSceneObj.Rotation;\r\n                rotatedSceneObj.Rotation = rotatedSceneObj.Rotation.add(new psgeometry.Vec4(dX / (fac * 100) * Math.PI, 0, 0));\r\n                SceneAppState.GlobalInstance.SceneObjects.replace(rotatedSceneObj, sceneObjIdx);\r\n            }\r\n        }\r\n\r\n        public handleMouseUp(e: JQuery.Event) {\r\n            this.interfaceController.popTool();\r\n        }\r\n\r\n    }\r\n\r\n    export class DemoSceneWebGL extends modelstageappstate.DirectedSceneWebGL {\r\n\r\n        private stage: modelstageweb.StageWebGL;\r\n\r\n        private spaceActor: modelstageweb.ActorWebGL = new modelstageweb.ActorWebGL(this, 'Space');\r\n\r\n        private spaceModel: SpaceModel;\r\n\r\n        public get SpaceModel() { return this.spaceModel; }\r\n\r\n        constructor(stage: modelstageweb.StageWebGL, connection: modelstageweb.ServerConnection) {\r\n            super(new modelstageappstate.Director(modelstageappstate.AppState.GetInstance()), connection);\r\n            this.director.Scene = this;\r\n            this.stage = stage;\r\n\r\n            this.spaceModel = new SpaceModel(this, this.stage, this.spaceActor);\r\n\r\n            let shaderProgram: modelstageweb.ShaderProgramWebGL = new modelstageweb.OpaqueMeshShaderProgramWebGL();\r\n            shaderProgram.initialize(stage);\r\n            stage.registerShaderProgram('OpaqueMeshShader', shaderProgram);\r\n\r\n            shaderProgram = new modelstageweb.TransparentMeshShaderProgramWebGL();\r\n            shaderProgram.initialize(stage);\r\n            stage.registerShaderProgram('TransparentMeshShader', shaderProgram);\r\n\r\n            shaderProgram = new modelstageweb.TexturedMeshShaderProgramWebGL();\r\n            shaderProgram.initialize(stage);\r\n            stage.registerShaderProgram('TexturedMeshShader', shaderProgram);\r\n\r\n            shaderProgram = new modelstageweb.MatCapShaderProgramWebGL();\r\n            shaderProgram.initialize(stage);\r\n            stage.registerShaderProgram('MatCapMeshShader', shaderProgram);\r\n\r\n            // Shadow shaders\r\n\r\n            shaderProgram = new modelstageweb.ShadowTexturedMeshShaderProgramWebGL();\r\n            shaderProgram.initialize(stage);\r\n            stage.registerPhaseSpecificShaderProgram('Shadow', 'TexturedMeshShader', shaderProgram);\r\n\r\n            shaderProgram = new modelstageweb.ShadowTexturedMeshShaderProgramWebGL();\r\n            shaderProgram.initialize(stage);\r\n            stage.registerPhaseSpecificShaderProgram('Shadow', 'MatCapMeshShader', shaderProgram);\r\n        }\r\n\r\n        public initialize() {\r\n            this.addSceneItem(this.spaceActor, true);\r\n            this.spaceModel.updateSpace();\r\n\r\n            $.when(\r\n//                this.stage.AssetFactory.getFromUrl('/data/commonassets.psmesh'),\r\n                this.stage.AssetFactory.getFromUrl('/data/hologem.psmesh'),\r\n//                this.stage.AssetFactory.getFromUrl('/data/office_assets.psmesh'),\r\n                this.stage.AssetFactory.getFromUrl('/data/office_assets_bake.psmesh')\r\n            ).done(() => {\r\n                this.IsInitialized = true;\r\n            });\r\n\r\n            /*        this.stage.AssetFactory.getFromUrl('/data/if5-office-1.psmesh')\r\n                        .then((success) => {\r\n                            let actor = new modelstageweb.ActorWebGL(this, 'actor');\r\n                            for (let x in this.stage.AssetStore.Figures) {\r\n                                actor.addFigure(this.stage.AssetStore.Figures[x]);\r\n                            }\r\n                            this.addSceneItem(actor, true);\r\n            \r\n                            this.stage.AssetFactory.getFromUrl('/data/assets.psmesh').then(() => {\r\n                                this.IsInitialized = true;\r\n                            });\r\n                        })\r\n                        .fail((req) => {\r\n                        })\r\n                        .progress((percentage) => {\r\n                            document.title = percentage;\r\n                        });\r\n                    */\r\n\r\n        }\r\n\r\n        public updateSpace() {\r\n            this.spaceModel.clearVertices();\r\n            for (let i = 0; i < RoomAppState.GlobalInstance.Vertices.Count; ++i) {\r\n                let vert = RoomAppState.GlobalInstance.Vertices.GetItemAt(i);\r\n                this.spaceModel.addVertex(vert.x, vert.z);\r\n            }\r\n            this.spaceModel.updateSpace();\r\n        }\r\n\r\n        public updatePeerInfo(peerID: string, peerColorIndex: number, userName: string) {\r\n            if (peerID != '-1') {\r\n                let peerInfoID = 'peer-info-' + peerID;\r\n\r\n                let peerInfoElement = $('#' + peerInfoID);\r\n\r\n                if (peerInfoElement.length > 0) {\r\n                    peerInfoElement.find('span').text(userName);\r\n                } else {\r\n                    $('#participants-view').append('<li id=\"' + peerInfoID + '\"><img src=\"images/info/Lens' + peerColorIndex + '.png\" /><span>' + userName + '</span></li>');\r\n                }\r\n            }\r\n        }\r\n\r\n        public removePeer(peerID: string) {\r\n            this.removeSceneItem('Peer' + peerID);\r\n\r\n            let peerInfoID = 'peer-info-' + peerID;\r\n            let peerInfoElement = $('#' + peerInfoID);\r\n            peerInfoElement.addClass('removing');\r\n            setTimeout(() => {\r\n                peerInfoElement.remove();\r\n            }, 2000);\r\n        }\r\n\r\n        public getColorIndexFromPeerID(peerID: string) {\r\n            return (parseInt(peerID) - 1) % PeerColors.length;\r\n        }\r\n\r\n        public createPeer(peerID: string) {\r\n            let obj: modelstageweb.ActorWebGL = new modelstageweb.ActorWebGL(this, 'Peer' + peerID);\r\n            obj.addFigure(this.stage.AssetStore.Figures['hololens.hololens.000']);\r\n            // TODO @UB: do this the right way...\r\n            obj.Figures[0].ShaderInstances[0].ShaderKey = 'MatCapMeshShader';\r\n\r\n            let colorIndex = this.getColorIndexFromPeerID(peerID);\r\n\r\n            obj.State.set('Color', new psgeometry.Vec4(PeerColors[colorIndex][0], PeerColors[colorIndex][1], PeerColors[colorIndex][2], PeerColors[colorIndex][3]));\r\n            obj.State.set('ModelTransform', (state: modelstageweb.RenderState) => {\r\n                let pos: psgeometry.Vec4 = state.get('HeadPos' + peerID, psgeometry.Vec4.Zero);\r\n                let cursor: psgeometry.Vec4 = state.get('CursPos' + peerID, psgeometry.Vec4.Zero);\r\n                let dir = cursor.sub(pos);\r\n\r\n                let spherical = psgeometry.Spherical.FromCartesianVector(dir);\r\n\r\n                return (<psgeometry.Matrix4>psgeometry.Matrix4.FromRotationX(-spherical.azimuth).multiply(\r\n                    psgeometry.Matrix4.FromRotationY(-spherical.polar))).multiply(\r\n                    psgeometry.Matrix4.FromTranslation(pos.x, pos.y, pos.z));\r\n            });\r\n\r\n            this.addSceneItem(obj, true /* makeVisible */);\r\n            obj.TestIntersection = false;\r\n            obj.TestChildrenIntersection = false;\r\n            return obj;\r\n        }\r\n\r\n        public createSceneObject(objectID: string, assetID: string) {\r\n            let suffix = objectID;\r\n\r\n            let obj = new modelstageweb.ActorWebGL(this, 'SceneObject' + suffix);\r\n            obj.State.set('ModelTransform', (state: modelstageweb.RenderState) => {\r\n                let pos = state.get('SceneObjectPos' + suffix, psgeometry.Vec4.Zero);\r\n                let rot = state.get('SceneObjectRot' + suffix, psgeometry.Vec4.Zero);\r\n                let scale = state.get('SceneObjectScale' + suffix, psgeometry.Vec4.One);\r\n\r\n                return <psgeometry.Matrix4>psgeometry.Matrix4.FromRotation(rot.x, rot.y, rot.z).multiply(\r\n                    psgeometry.Matrix4.FromScaling(scale.x, scale.y, scale.z).multiply(\r\n                        psgeometry.Matrix4.FromTranslation(pos.x, pos.y, pos.z)));\r\n            });\r\n            obj.addFigure(this.stage.AssetStore.getFigure(assetID));\r\n            obj.Data['SceneObjID'] = suffix;\r\n\r\n            return obj;\r\n        }\r\n\r\n    }\r\n\r\n    export class RoomAppState extends modelstageappstate.AppStateCluster {\r\n        static ClusterTypeID = 'Room';\r\n\r\n        static GlobalInstance: RoomAppState;\r\n\r\n        public FloorLevel: modelstageappstate.AppStateFloatValue = new modelstageappstate.AppStateFloatValue();\r\n\r\n        public MasterView: modelstageappstate.AppStateVector4Value = new modelstageappstate.AppStateVector4Value();\r\n\r\n        public Vertices: modelstageappstate.AppStateCollection<psgeometry.Vec4> = new modelstageappstate.AppStateCollection<psgeometry.Vec4>(modelstageappstate.AppStateCollectionOperation);\r\n\r\n        public constructor() {\r\n            super();\r\n            RoomAppState.GlobalInstance = this;\r\n        }\r\n\r\n        public registerEntries() {\r\n            this.registerEntry('FloorLevel', this.FloorLevel);\r\n            this.registerEntry('MasterView', this.MasterView);\r\n            this.registerEntry('Vertices', this.Vertices);\r\n        }\r\n\r\n        public readValue(key: string, reader: modelstageappstate.AppStateDeltaReader): any {\r\n            if (key == 'Vertices') {\r\n                return reader.Reader.readVec4();\r\n            } else {\r\n                return super.readValue(key, reader);\r\n            }\r\n        }\r\n\r\n        public applyChanges(scene: modelstageweb.SceneWebGL, peerID: string, instanceID: string) {\r\n            if (this.FloorLevel.isDirty()) {\r\n                scene.State.set('FloorLevel', this.FloorLevel.get());\r\n                (<DemoSceneWebGL>scene).SpaceModel.FloorLevel = this.FloorLevel.get();\r\n            }\r\n            if (this.MasterView.isDirty()) {\r\n                scene.State.set('MasterViewPos', this.MasterView.get());\r\n            }\r\n            if (this.Vertices.isDirty()) {\r\n                let sc = <DemoSceneWebGL>scene;\r\n                (<DemoSceneWebGL>scene).updateSpace();\r\n            }\r\n        }\r\n    }\r\n\r\n    class SceneObject {\r\n        public SceneObjectID: string; // char[40]\r\n\r\n        public AssetID: string;       // char[20]\r\n\r\n        public Location: psgeometry.Vec4;\r\n\r\n        public Rotation: psgeometry.Vec4;\r\n\r\n        public Scale: psgeometry.Vec4;\r\n    }\r\n\r\n    export class SceneAppState extends modelstageappstate.AppStateCluster {\r\n        static ClusterTypeID = 'Obj';\r\n\r\n        static GlobalInstance: SceneAppState;\r\n\r\n        public SceneObjects: modelstageappstate.AppStateCollection<SceneObject> = new modelstageappstate.AppStateCollection<SceneObject>(modelstageappstate.AppStateCollectionOperation);\r\n\r\n        public constructor() {\r\n            super();\r\n            SceneAppState.GlobalInstance = this;\r\n        }\r\n\r\n        public registerEntries() {\r\n            this.registerEntry('Obj', this.SceneObjects);\r\n        }\r\n\r\n        public readValue(key: string, reader: modelstageappstate.AppStateDeltaReader): any {\r\n            if (key == 'Obj') {\r\n                let value = new SceneObject();\r\n\r\n                value.SceneObjectID = reader.Reader.readCharArray(40);\r\n                value.AssetID = reader.Reader.readCharArray(40);\r\n                value.Location = reader.Reader.readVec4();\r\n                value.Rotation = reader.Reader.readVec4();\r\n                value.Scale = reader.Reader.readVec4();\r\n\r\n                return value;\r\n            } else {\r\n                return super.readValue(key, reader);\r\n            }\r\n        }\r\n\r\n        public writeValue(key: string, writer: modelstageappstate.AppStateDeltaWriter, value: any) {\r\n            if (key == 'Obj') {\r\n                writer.Writer.writeCharArray(value.SceneObjectID, 40);\r\n                writer.Writer.writeCharArray(value.AssetID, 40);\r\n                writer.Writer.writeVec4(value.Location);\r\n                writer.Writer.writeVec4(value.Rotation);\r\n                writer.Writer.writeVec4(psgeometry.Vec4.One);\r\n            } else {\r\n                super.writeValue(key, writer, value);\r\n            }\r\n        }\r\n\r\n        public applyChanges(scene: modelstageweb.SceneWebGL, peerID: string, instanceID: string) {\r\n            if (this.SceneObjects.isDirty()) {\r\n                let sc = <DemoSceneWebGL>(scene);\r\n\r\n                this.SceneObjects.Operations.forEach((operation) => {\r\n                    if (operation.Operation == modelstageappstate.OperationType.Append) {\r\n                        let objID = operation.NewValue.SceneObjectID;\r\n                        let assetID = operation.NewValue.AssetID;\r\n                        sc.addSceneItem(sc.createSceneObject(objID, assetID), true /* makeVisible */);\r\n                        scene.State.set('SceneObjectPos' + objID, operation.NewValue.Location);\r\n                        scene.State.set('SceneObjectRot' + objID, operation.NewValue.Rotation);\r\n                        scene.State.set('SceneObjectScale' + objID, operation.NewValue.Scale);\r\n                        //scene.RunSequence(\"ShowSceneObject\", std::string{ \"ShowSceneObject\" } +noteID, { { \"SceneObjectID\", objID } });\r\n                    }\r\n                    else if (operation.Operation == modelstageappstate.OperationType.Replace) {\r\n                        let objID = operation.NewValue.SceneObjectID;\r\n                        scene.State.set('SceneObjectPos' + objID, operation.NewValue.Location);\r\n                        scene.State.set('SceneObjectRot' + objID, operation.NewValue.Rotation);\r\n                        scene.State.set('SceneObjectScale' + objID, operation.NewValue.Scale);\r\n                    }\r\n                    else if (operation.Operation == modelstageappstate.OperationType.Remove) {\r\n                        let objID = operation.PreviousValue.SceneObjectID;\r\n                        scene.removeSceneItem('SceneObject' + objID);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    export class PeerAppState extends modelstageappstate.AppStateCluster {\r\n        static ClusterTypeID = 'Peer';\r\n\r\n        private headPos: modelstageappstate.AppStateVector4Value = new modelstageappstate.AppStateVector4Value();\r\n\r\n        private cursorPos: modelstageappstate.AppStateVector4Value = new modelstageappstate.AppStateVector4Value();\r\n\r\n        private userID: modelstageappstate.AppStateStringValue = new modelstageappstate.AppStateStringValue();\r\n\r\n        private active: modelstageappstate.AppStateBoolValue = new modelstageappstate.AppStateBoolValue();\r\n\r\n        public providesInitializationData() {\r\n            return true;\r\n        }\r\n\r\n        public registerEntries() {\r\n            this.registerEntry('Head', this.headPos);\r\n            this.registerEntry('Curs', this.cursorPos);\r\n            this.registerEntry('User', this.userID);\r\n            this.registerEntry('Active', this.active);\r\n        }\r\n\r\n        public applyChanges(scene: modelstageweb.SceneWebGL, peerID: string, instanceID: string) {\r\n            let sc = <DemoSceneWebGL>scene;\r\n            if (peerID.length > 0 && (this.headPos.isDirty() || this.cursorPos.isDirty())) {\r\n                if (!sc.getSceneItem('Peer' + peerID)) {\r\n                    sc.createPeer(peerID);\r\n                }\r\n                let levelOfs = new psgeometry.Vec4(0, -sc.SpaceModel.FloorLevel, 0, 0);\r\n                let headPos = this.headPos.get();\r\n                let cursorPos = this.cursorPos.get();\r\n                if (headPos && cursorPos) {\r\n                    scene.State.set('HeadPos' + peerID, headPos.add(levelOfs));\r\n                    scene.State.set('CursPos' + peerID, cursorPos.add(levelOfs));\r\n                }\r\n            }\r\n\r\n            if (this.userID.isDirty()) {\r\n                let userName = UserNames[this.userID.get()] || '';\r\n                sc.updatePeerInfo(peerID, sc.getColorIndexFromPeerID(peerID), userName);\r\n            }\r\n\r\n            if (this.active.isDirty()) {\r\n                if (!this.active.get()) {\r\n                    sc.removePeer(peerID);\r\n                }\r\n            }\r\n         }\r\n    }\r\n\r\n    class Note {\r\n        public NoteID: string; //char[20];\r\n\r\n        public NoteType: number; // int\r\n\r\n        public OwnerID: string; // char[10];\r\n\r\n        public AssignedToID: string; // char[10];\r\n\r\n        public Location: psgeometry.Vec4;\r\n\r\n        public AzimuthalRotation: number; // float\t\t\t\r\n\r\n    };\r\n\r\n    export class NotesAppState extends modelstageappstate.AppStateCluster {\r\n        static ClusterTypeID = 'Notes';\r\n\r\n        static GlobalInstance: NotesAppState;\r\n\r\n        public Notes: modelstageappstate.AppStateCollection<Note> = new modelstageappstate.AppStateCollection<Note>(modelstageappstate.AppStateCollectionOperation);\r\n\r\n        public constructor() {\r\n            super();\r\n            NotesAppState.GlobalInstance = this;\r\n        }\r\n\r\n        public registerEntries() {\r\n            this.registerEntry('Notes', this.Notes);\r\n        }\r\n\r\n        public readValue(key: string, reader: modelstageappstate.AppStateDeltaReader): any {\r\n            if (key == 'Notes') {\r\n                let value = new Note();\r\n\r\n                value.NoteID = reader.Reader.readCharArray(20);\r\n                value.NoteType = reader.Reader.readUInt32();\r\n                value.OwnerID = reader.Reader.readCharArray(10);\r\n                value.Location = reader.Reader.readVec4();\r\n                value.AzimuthalRotation = reader.Reader.readFloat32();\r\n\r\n                return value;\r\n            } else {\r\n                return super.readValue(key, reader);\r\n            }\r\n        }\r\n\r\n        public writeValue(key: string, writer: modelstageappstate.AppStateDeltaWriter, value: any) {\r\n            if (key == 'Notes') {\r\n                writer.Writer.writeCharArray(value.NoteID, 20);\r\n                writer.Writer.writeInt32(value.NoteType);\r\n                writer.Writer.writeCharArray(value.OwnerID, 10);\r\n                writer.Writer.writeVec4(value.Location);\r\n                writer.Writer.writeFloat32(value.AzimuthalRotation);\r\n            } else {\r\n                super.writeValue(key, writer, value);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n","/// ModelStage Â© 2018 Plansysteme GmbH, Hamburg, Germany. All rights reserved.\r\n\r\nimport { modelstage } from './modelstage';\r\nimport { modelstageweb } from './mx-common';\r\nimport { modelstageappstate } from './mx-appstate';\r\nimport 'jquery-ui';\r\n//import 'jquery-ui/ui/widgets/droppable';\r\nimport 'jquery.mousewheel';\r\n\r\nexport class MessageChannel {\r\n\r\n    protected extractPart(message: string): { remainder: string, part: string } {\r\n        let sep = message.indexOf('|');\r\n        if (sep >= 0) {\r\n            return {\r\n                part: message.substring(0, sep),\r\n                remainder: message.substring(sep + 1)\r\n            };\r\n        } else {\r\n            return {\r\n                remainder: '',\r\n                part: message\r\n            };\r\n        }\r\n    }\r\n\r\n    public processMessage(message: string) {\r\n    }\r\n\r\n}\r\n\r\nexport class SampleTheaterWebGL extends modelstage.TheaterWebGL {\r\n\r\n    private peerAppState = new modelstageappstate.LocalAppStateClusterManager(modelstage.PeerAppState.ClusterTypeID, modelstage.PeerAppState);\r\n\r\n    private sceneAppState = new modelstageappstate.GlobalAppStateClusterManager(modelstage.SceneAppState.ClusterTypeID, modelstage.SceneAppState);\r\n\r\n    private roomAppState = new modelstageappstate.GlobalAppStateClusterManager(modelstage.RoomAppState.ClusterTypeID, modelstage.RoomAppState);\r\n\r\n    private notesAppState = new modelstageappstate.GlobalAppStateClusterManager(modelstage.NotesAppState.ClusterTypeID, modelstage.NotesAppState);\r\n\r\n    private actorIndex = 1;\r\n\r\n    private interfaceController: modelstageweb.InterfaceController;\r\n\r\n    private cameraController: modelstageweb.CameraController;\r\n\r\n    private connection: modelstageweb.ServerConnection;\r\n\r\n    private channels: { [index: string]: MessageChannel } = {};\r\n\r\n    constructor(canvasElementID: string) {\r\n        super(canvasElementID);\r\n\r\n        this.connection = new modelstageweb.SignalRServerConnection();\r\n\r\n        this.scene = new modelstage.DemoSceneWebGL(this.stage, this.connection);\r\n        this.scene.initialize();\r\n\r\n        this.connection.onConnected(() => {\r\n        });\r\n        this.connection.onMessage((msg) => {\r\n            if (msg.data instanceof ArrayBuffer || msg.data instanceof Uint8Array) {\r\n                let buf = msg.data instanceof Uint8Array ? msg.data : new Uint8Array(msg.data);\r\n                let networkMessage = modelstageweb.NetworkChannelMessage.FromBuffer(buf);\r\n                (<modelstageappstate.DirectedSceneWebGL>this.scene).receivedMessage(networkMessage);\r\n            } else if (typeof msg.data == 'string') {\r\n                let data = <string>msg.data;\r\n                let sep = data.indexOf('|');\r\n                if (sep >= 0) {\r\n                    let channelKey = data.substring(0, sep);\r\n                    let message = data.substr(sep + 1);\r\n                    let channel = this.channels[channelKey];\r\n                    if (channel) {\r\n                        channel.processMessage(message);\r\n                    }\r\n                }\r\n            } else {\r\n                console.warn('Received invalid message type: ' + typeof msg.data);\r\n            }\r\n        });\r\n\r\n        this.interfaceController = new modelstageweb.InterfaceController();\r\n        this.cameraController = new modelstageweb.CameraController(this.Stage, this.Stage.Camera, this.interfaceController, this.connection);\r\n        this.cameraController.construct(12.0, -0.45, 0.0);\r\n        this.interfaceController.pushTool(new modelstage.SelectionTool(this.scene, this.stage, this.connection));\r\n\r\n        $(() => { \r\n            this.connection.connect();\r\n\r\n            (<any>$('.area-right-sidebar ul li')).draggable({\r\n                containment: 'document',\r\n                cursor: 'crosshair',\r\n                helper: 'clone',\r\n                opacity: 0.5,\r\n                scroll: false\r\n            });\r\n\r\n            (<any>$('#viewCanvas')).droppable({\r\n                over: (event, ui) => {\r\n                    let figureID = $(ui.draggable).attr('data-figure-id');\r\n                    //actor.Data['rotate'] = new psgeometry.Vec4(0, this.cameraController.Yaw, 0);\r\n\r\n                    this.interfaceController.pushTool(new modelstage.PlaceActorTool(figureID, this.stage.Camera, this.connection));\r\n                }\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    protected initialize() {\r\n    }\r\n\r\n}\r\n"]}